<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>BYRIO Blogroll</title>
        <link>http://planet.byr.moe</link>
        <atom:link href="http://planet.byr.moe/rss.xml" rel="self" type="application/rss+xml"/>
        <description>BYRIO 北邮人博客圈</description>
        <pubDate>Sun, 19 Mar 2023 08:57:20 +0000</pubDate>
        <generator>Planet.js (https://github.com/phoenixlzx/planet.js)</generator>
        
        <item>
            <title>海信 Hisense A5 Pro E-ink 手機使用心得</title>
            <link>https://asaba.sakuragawa.moe/2023/03/%e6%b5%b7%e4%bf%a1-hisense-a5-pro-e-ink-%e6%89%8b%e6%a9%9f%e4%bd%bf%e7%94%a8%e5%bf%83%e5%be%97/?pk_campaign=feed&amp;pk_kwd=%25e6%25b5%25b7%25e4%25bf%25a1-hisense-a5-pro-e-ink-%25e6%2589%258b%25e6%25a9%259f%25e4%25bd%25bf%25e7%2594%25a8%25e5%25bf%2583%25e5%25be%2597</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2023/03/%e6%b5%b7%e4%bf%a1-hisense-a5-pro-e-ink-%e6%89%8b%e6%a9%9f%e4%bd%bf%e7%94%a8%e5%bf%83%e5%be%97/?pk_campaign=feed&amp;pk_kwd=%25e6%25b5%25b7%25e4%25bf%25a1-hisense-a5-pro-e-ink-%25e6%2589%258b%25e6%25a9%259f%25e4%25bd%25bf%25e7%2594%25a8%25e5%25bf%2583%25e5%25be%2597</guid>
            <pubDate>Sun, 19 Mar 2023 08:57:20 +0000</pubDate>
            <description>
                
                先前發表的文章中提到：     浅羽的主要手機是 Hisense A5 Pro，它主打一塊電子紙螢幕，在戶外有絕佳的可讀性。對於浅羽來說，不出門時則將它當作傻瓜機（dumb phone）使用，大部分時候無需理會它；而出門在外時，它可以滿足最基礎的聯絡、地圖和支付需求，並且充電一
                
            </description>
            
            <content:encoded><![CDATA[<p><a href="https://asaba.sakuragawa.moe/2022/04/%e5%82%99%e7%94%a8%e6%a9%9f%ef%bc%8c%e9%82%84%e6%98%af%e7%ac%ac%e4%ba%8c%e6%94%af%e6%89%8b%e6%a9%9f%ef%bc%9f/" data-type="post" data-id="2574" target="_blank">先前發表的文章</a>中提到：</p>



<blockquote>
<p>浅羽的主要手機是 Hisense A5 Pro，它主打一塊電子紙螢幕，在戶外有絕佳的可讀性。對於浅羽來說，不出門時則將它當作傻瓜機（dumb phone）使用，大部分時候無需理會它；而出門在外時，它可以滿足最基礎的聯絡、地圖和支付需求，並且充電一次可以使用 3-4 天，無需特別計劃出門時間然後提前充好電。</p>
</blockquote>



<p>截至文章發表，浅羽使用 A5 Pro 已經近一年，更覺得它就是手機做爲工具應該有的樣子，也分享一下使用心得。</p>



<p><em>TL; DR:</em></p>



<ul>
<li>Pros
<ul>
<li>簡單而全面的功能；</li>



<li>E-Ink 的陽光下可讀性和雙穩態特性；</li>



<li>系統提供了大量的針對性客製化；</li>
</ul>
</li>



<li>Cons
<ul>
<li>未有提供雙色溫前光燈；</li>



<li>系統未消去全部動畫；</li>



<li>全域刷新不夠主動導致殘影偏多；</li>
</ul>
</li>
</ul>



<h2><a href="https://markdown.sakuragawa.moe/1seujACVQpSqSPsrixnr9w?view#%E3%80%8C%E7%B4%B0-mon-%E6%97%97%E8%89%A6%E3%80%8D%E7%9A%84-a5-pro"></a>「細 mon 旗艦」的 A5 Pro</h2>



<p>說到 E-Ink 手機，海信並非是第一次做了：</p>



<ul>
<li>A5（掌閱 F1），前代，採用了 Micro USB 接口；</li>



<li>A5 Pro CC，彩色电子墨水版本，犧牲的是畫面清晰度；</li>



<li>A7 系列，7 吋顯示器版本，太大太重了，且取消了 NFC，浅羽就沒考慮去入手嘗試了；</li>



<li>A9 系列，有可調色溫背光，加入線性馬達，外觀也變得現代。</li>
</ul>



<p>回到 A5 Pro ，它外觀非常樸素，官方提供有黑、白、墨綠三色，浅羽則是選擇白色。手機背面是細磨砂的塑料材質配上一顆鏡頭、一顆補光燈，中間（相比前代）增加了一枚指紋辨識器，沒有高級材料、沒有花哨暗紋，回歸了最原始的智慧型手機的感覺。整面則是主打的一片單色 E-Ink 顯示器，沒有異形設計、沒有窄邊框，只有出廠就貼好的一張磨砂保護貼。浅羽自己是十分喜歡這樣的感覺。</p>



<h2><a href="https://markdown.sakuragawa.moe/1seujACVQpSqSPsrixnr9w?view#%E9%87%9D%E5%B0%8D-e-ink-%E8%AA%BF%E6%95%B4%EF%BC%8C%E4%BD%86%E6%B2%92%E6%9C%89%E5%AE%8C%E5%85%A8%E8%AA%BF%E6%95%B4%E5%A5%BD"></a>針對 E-Ink 調整，但沒有完全調整好</h2>



<p>針對這片 E-Ink，A5 Pro 在系統中做了許多調整。</p>



<p>首先下方增加了一個顯示控制面板，<strong>提供四種顯示模式可選</strong>，分別是清晰、均衡、順暢、極速：「清晰」模式是四者中解析度最好的模式，但是畫面的反應速度卻是最慢；「均衡」是對比最高的一個模式，有時它的可看度甚至比「清晰」還要好，這也是浅羽最愛用的模式；而使用「極速」則可以看 GIF 動畫甚至一些影片，當然前提是如果真的有需要在 E-Ink 上查看動態內容的話。<strong>四個模式可以隨時切換</strong>，也可以在系統設定中<strong>針對不同應用自動切換不同模式</strong>，同時還可以設定使用輸入法時自動切換到「極速」模式。其次是補光燈部分，除了自動和手動亮度外，還提供了「關閉」和「黑夜」（即超低亮度）兩個選項，只可惜受限於硬體<strong>未有提供雙色溫前光燈</strong>。</p>



<p>系統內建的應用都使用了高對比度的黑白框線風格圖示，同時針對（部分）第三方應用有覆蓋同樣風格的圖示。因應 E-Ink 的特性，<strong>系統介面本身也大量使用白底黑字的高對比度風格</strong>，並且內建應用都去除了過渡動畫。可惜的是，<strong>動畫去除得並不徹底</strong>，比如輸入 SIM 卡 PIN 碼、使用 NFC 配對藍芽時依然還有一些動畫，同時一些第三方應用也會固執地顯示華麗的動畫，並在螢幕上留下一團團殘影。本質上，海信並沒有完全重新爲 E-Ink 設計一套新系統，而是在儘可能保留原先 Android 的 UX 的前提下改造 UI，使其更適合 E-Ink 顯示──比如說，擷取螢幕就可以發現，很多的圖示依然是彩色的；相機拍出的照片也依然是彩色的。</p>



<p>海信官方對 A5 Pro 的定位是一款「閱讀手機」，因此也提供了許多輔助功能試圖改善閱讀體驗。比方說<strong>專門的「閱讀模式」</strong>，打開後可以延後通知、降低鈴聲音量；「單頁捲動模式」，開啓後會在捲動完成手指鬆開時才一併刷新畫面。可惜的是，浅羽幾乎沒有測試出有什麼應用程式中可用。<strong>全局音量鍵翻頁是沒有的</strong>，不過解決翻頁問題還<strong>可以選擇啓用「滑動指紋辨識器翻頁」</strong>；這個在 Pixel 上被浅羽不屑一顧的功能，現在成爲了在第三方應用程式中翻頁的最佳方式。在指紋辨識器上上下滑動，也可以做到一次翻一頁的效果；雖然應用程式內還是會顯示動畫，但是翻頁距離固定，效果會比觸摸滑動好一些，不過無法支援橫向滑動。直接觸摸指紋辨識器但不滑動，還會觸發手動的全域刷新，這在使用 KOReader 等閱讀器時非常實用，尤其是考慮到 A5 Pro 即使在「清晰」模式下全域刷新也很不主動。</p>



<p>爲了發揮 E-Ink 雙穩態的特性，A5 Pro 還導入了「截屏便籤」功能，<strong>可以在鎖定螢幕後甚至關機後繼續顯示螢幕擷取畫面</strong>，用來顯示名片一類的也很合適。如果沒有需要顯示的便籤，也可以選擇內建的隨機詩詞、單詞作爲鎖定螢幕，每種鎖定螢幕也有一些設定可以調整，客製化程度較高。或者乾脆在鎖定螢幕上顯示大時鐘，這樣就可以直接放在桌面當擺件了。關機以後亦可以保持顯示特定的圖片。當然，也可以選擇關閉自動鎖定螢幕，保持顯示某一個應用程式，也不會額外耗費多少電力。</p>



<h2><a href="https://markdown.sakuragawa.moe/1seujACVQpSqSPsrixnr9w?view#%E4%B8%8D%E5%A4%A0-hi-fi-%E7%9A%84%E3%80%8C%E9%9F%B3%E6%A8%82%E6%89%8B%E6%A9%9F%E3%80%8D"></a>不夠 Hi-Fi 的「音樂手機」</h2>



<p>除了閱讀，海信 A5 Pro 主推 Hi-Fi 音樂功能。作爲 E-Ink 下比較合適的娛樂方式，海信在硬體方面使用了一片 AKM AK4377AECB 作爲 DAC，同時還給了很多連線的可能性：NFC 和支援 LDAC 的藍牙功能，保留 3.5mm 耳機接口，同時 USB Type-C 也可以接駁數位音訊裝置，搭配大部分耳機都不是問題。不過<strong>聲音質素則只能稱一般般</strong>，內建的 Hi-Fi 模式開啓後也只是覺得音量更大了（或許是推力更大了？）。</p>


<div>
<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2023/03/SKG-20230319-161317-4096x1512.jpg" /></div>


<p>內建的音樂應用程式也頗爲實用，播放浅羽音樂庫中的 AAC 和 FLAC 檔案都沒有問題，可以根據標籤分類選歌、顯示歌詞，不過<strong>尚缺少 ReplayGain 功能</strong>。得益於手機不怎麼樣的效能，播放音樂時續航表現也令浅羽安心。打開音樂程式、隱藏導航列、插上耳機，這就是一支簡單好用的隨身聽。</p>



<h2><a href="https://markdown.sakuragawa.moe/1seujACVQpSqSPsrixnr9w?view#%E4%B8%80%E5%88%87%E8%83%BD%E7%94%A8%E5%B0%B1%E5%A5%BD"></a>一切能用就好</h2>



<p>海信 A5 Pro 在其他硬體的規格上都中規中矩（甚至可以說是落後），但可用度都不低。前後兩枚鏡頭正如官方宣傳的「前置識別，後置掃碼」，搭配可以用來做支付認證的指紋辨識，基本上做到了安全和方便兼顧。不過遺憾的是僅僅採用了<strong>轉子馬達</strong>。習慣了不錯的線性馬達之後，振動觸感真的非常差。不過倒也不是墊底──畢竟還有採用了線性馬達、但觸感更差的小米 Civi。</p>



<p>比較有特色的是左側是「墨智鍵」，支援自訂短按、雙擊兩種操作，可惜的是長按只能選擇是否使用語音助手。浅羽把短按設定成全局刷新(如果畫面太髒了可以按一下)，點按兩次設定成清晰/流暢模式切換。另外，「墨智鍵」和右側的音量鍵同時按下，可以開啓或者關閉前光，不小心在深夜關掉了前光時尤爲實用。同時系統也支援在來電時一律開啓前光，避免低光狀況下的手忙腳亂。</p>



<h2><a href="https://markdown.sakuragawa.moe/1seujACVQpSqSPsrixnr9w?view#%E5%A5%BD%E7%9A%84%E5%B7%A5%E5%85%B7"></a>好的工具</h2>



<p>一旦習慣了 E-Ink 的缺點，就可以盡情享受 E-Ink 帶來的優勢。</p>



<p><strong>E-Ink 的陽光下可讀性在戶外非常實用</strong>，這使得 A5 Pro 在外出時是非常好用的工具。選用「清晰」模式顯示地圖，抑或是選用「流暢」模式查看和回覆訊息，自然光照成爲了優勢而非影響閱讀的阻礙；而且可以保持顯示地圖或音樂等等，而無需太擔心耗電問題。在展示條碼的場景下，E-Ink 同樣好用；不過對於非雷射讀取的條碼辨識器來說，可能需要打開前光輔助辨識。</p>



<p>最大的問題是充電：習慣了新近機種的快速充電後，會覺得給 A5 Pro 充電很慢很慢；好在受惠於不算高的配置和 E-Ink，充電一次能夠使用 3-4 天，勉強讓充電速度不再是大問題。浅羽乾脆貼了無線充電貼，有空就用無線慢慢充電，還能順便當作桌面座鐘。</p>



<p>總的來說，這支手機足以被稱爲好用的工具。其他的方面——就交給更大的螢幕、甚至其他的媒介吧！</p>


<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2023%2F03%2F%25e6%25b5%25b7%25e4%25bf%25a1-hisense-a5-pro-e-ink-%25e6%2589%258b%25e6%25a9%259f%25e4%25bd%25bf%25e7%2594%25a8%25e5%25bf%2583%25e5%25be%2597%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e6%2525b5%2525b7%2525e4%2525bf%2525a1-hisense-a5-pro-e-ink-%2525e6%252589%25258b%2525e6%2525a9%25259f%2525e4%2525bd%2525bf%2525e7%252594%2525a8%2525e5%2525bf%252583%2525e5%2525be%252597&amp;action_name=%E6%B5%B7%E4%BF%A1+Hisense+A5+Pro+E-ink+%E6%89%8B%E6%A9%9F%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="3211" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>3    </span>
</div><div>
    <a data-post-id="3211" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>针对 HTML 内容使用 Ant Design 图片弹框</title>
            <link>https://www.ohyee.cc/post/note_antd_lightbox</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_antd_lightbox</guid>
            <pubDate>Sun, 12 Mar 2023 12:58:06 +0000</pubDate>
            <description>
                
                使用 React 组件渲染 HTML，并进行交互
                
            </description>
            
            <content:encoded><![CDATA[使用 React 组件渲染 HTML，并进行交互]]></content:encoded>
            
        </item>
        
        <item>
            <title>吃好一餐</title>
            <link>https://asaba.sakuragawa.moe/2023/02/%e5%90%83%e5%a5%bd%e4%b8%80%e9%a4%90/?pk_campaign=feed&amp;pk_kwd=%25e5%2590%2583%25e5%25a5%25bd%25e4%25b8%2580%25e9%25a4%2590</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2023/02/%e5%90%83%e5%a5%bd%e4%b8%80%e9%a4%90/?pk_campaign=feed&amp;pk_kwd=%25e5%2590%2583%25e5%25a5%25bd%25e4%25b8%2580%25e9%25a4%2590</guid>
            <pubDate>Mon, 13 Feb 2023 17:36:20 +0000</pubDate>
            <description>
                
                吃飯是很麻煩的事情，吃得開心更是件艱難的事情。    過年的時候去 partner 家。本來的計畫是：早上去菜市買好新鮮食材，下午開始準備年夜飯，這樣吃完正餐還可以喝點酒。家裏吃飯的人多，只算大人的話也有八張嘴；但是每人都有一些愛吃或者不吃的食材，所以買菜的時候自然想着多買幾樣
                
            </description>
            
            <content:encoded><![CDATA[<p>吃飯是很麻煩的事情，吃得開心更是件艱難的事情。</p>



<p>過年的時候去 partner 家。本來的計畫是：早上去菜市買好新鮮食材，下午開始準備年夜飯，這樣吃完正餐還可以喝點酒。家裏吃飯的人多，只算大人的話也有八張嘴；但是每人都有一些愛吃或者不吃的食材，所以買菜的時候自然想着多買幾樣。魚、蝦、花螺，加上祭拜用完的雞和一些其他的青菜，也足夠吃好一餐了。結果早早去買了菜，去到家裏，都要等到點了祭祀。午餐隨便糊弄了一下，等到下午，終於開始討論晚上（年夜飯）的菜單了。本來訂好四樣大菜，突然長輩說「晚上不要吃花螺」，追問原因又支支吾吾不說，只說不要吃。不讓吃也好吧，可是提前買的時候不說；現在買完了，海鮮不做預處理也不能久放。還好帶了兩瓶好酒，於是趁時間還早，先做了一碟酒煮花螺，當下酒菜吃（聽起來好像用酒下酒）。</p>







<p>下午的時光倒是還挺開心，有一些輩份近、年齡也相仿的表哥表弟來走動。他們平日不缺好酒好肉，但是聽說有不太常見的日本酒和下酒菜，倒也都小酌幾口。期間也終於陸陸續續開始準備祭祖用的茶、酒、果品、熱食，但最重要的一樣──米飯──卻遲遲不好。約摸又過了半個鍾，米飯才煮好，然後才能正式開始祭拜。淺羽本來以爲這個過程應該也要花些時間，就先去處理食材了。沒成想，幾個小時的等待，結果祭拜 10 分鐘就結束了！聊到晚上的安排，突然又說想 6 時吃飯，但是這個時候已經接近下午 4 時，家庭廚房又缺鍋竈，做菜只能一道一道做，難免時間有些緊迫。</p>



<p>緊趕慢趕，最後終於在六點半時做好了全部的菜品。菜端上桌，結果連一桌人都坐不整齊。大人有的忙着想先把廚具清理趕緊，有的不緊不慢地喝着茶滑着手機，有的在追着不想吃飯的小孩餵飯……難得有坐上桌子的同齡人，但是一直也是鬱鬱寡歡。到頭來，一桌飯菜，其他人稀稀拉拉地來、沒動兩筷子又走了。沒有想像中熱鬧的飯桌，只有就浅羽和 partner 在努力進食。</p>




        
    
    



<p>大人們這麼着急當然也是有原因的──他們急着結束這一天，所以吃飯也只是草草了事，又不停地問着「吃好了沒有」。大家都有點心不在焉，只想著趕緊把年過完，完全忘記了節日歡聚的意義。再好的飯菜，如果趕着時間，也索然無味了。</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2023%2F02%2F%25e5%2590%2583%25e5%25a5%25bd%25e4%25b8%2580%25e9%25a4%2590%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%252590%252583%2525e5%2525a5%2525bd%2525e4%2525b8%252580%2525e9%2525a4%252590&amp;action_name=%E5%90%83%E5%A5%BD%E4%B8%80%E9%A4%90&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="3126" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="3126" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>移动吉比特 H5-8 光猫超级密码</title>
            <link>https://www.whosneo.com/h5-8-admin/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/h5-8-admin/</guid>
            <pubDate>Sat, 04 Feb 2023 02:28:48 +0000</pubDate>
            <description>
                
                移动吉比特系列光猫均可参考。 首先使用光猫背面信息，登录普通用户管理界面。再修改浏览器地址，访问：http://192.168.1.1/usr=CMCCAdmin&amp;amp;psw=aDm8H%25MdA&amp;amp;cmd=1&amp;amp;telnet.gch，浏览器会显示 Succe
                
            </description>
            
            <content:encoded><![CDATA[<p>移动吉比特系列光猫均可参考。<span></span></p>
<p>首先使用光猫背面信息，登录普通用户管理界面。再修改浏览器地址，访问：<a href="http://192.168.1.1/usr=CMCCAdmin&amp;psw=aDm8H%25MdA&amp;cmd=1&amp;telnet.gch">http://192.168.1.1/usr=CMCCAdmin&amp;psw=aDm8H%25MdA&amp;cmd=1&amp;telnet.gch</a>，浏览器会显示 Success。</p>
<p>此时使用 telnet 登录光猫，用户名为 <code>CMCCAdmin</code>，密码为 <code>aDm8H%MdA</code>。</p>
<p>登录光猫以后，虽然我们还是没有办法获得超级密码，但是我们可以修改超级密码：</p>
<pre><code># 修改超级密码为 admin
sidbg 1 DB set DevAuthInfo 0 Pass admin
# 保存设置
sidbg 1 DB save
</code></pre>
<p>此时再回到光猫登录页面，使用用户名 <code>CMCCAdmin</code> 与密码 <code>admin</code> 即可登录管理员账户。</p>
<blockquote><p>
  参考链接：https://www.bilibili.com/read/cv15548233
</p></blockquote>]]></content:encoded>
            
        </item>
        
        <item>
            <title>早知道，還是……原道醬 / YD30 簡單試聽</title>
            <link>https://asaba.sakuragawa.moe/2023/01/%e6%97%a9%e7%9f%a5%e9%81%93%ef%bc%8c%e9%82%84%e6%98%af%e5%8e%9f%e9%81%93%e9%86%ac-yd30-%e7%b0%a1%e5%96%ae%e8%a9%a6%e8%81%bd/?pk_campaign=feed&amp;pk_kwd=%25e6%2597%25a9%25e7%259f%25a5%25e9%2581%2593%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e5%258e%259f%25e9%2581%2593%25e9%2586%25ac-yd30-%25e7%25b0%25a1%25e5%2596%25ae%25e8%25a9%25a6%25e8%2581%25bd</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2023/01/%e6%97%a9%e7%9f%a5%e9%81%93%ef%bc%8c%e9%82%84%e6%98%af%e5%8e%9f%e9%81%93%e9%86%ac-yd30-%e7%b0%a1%e5%96%ae%e8%a9%a6%e8%81%bd/?pk_campaign=feed&amp;pk_kwd=%25e6%2597%25a9%25e7%259f%25a5%25e9%2581%2593%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e5%258e%259f%25e9%2581%2593%25e9%2586%25ac-yd30-%25e7%25b0%25a1%25e5%2596%25ae%25e8%25a9%25a6%25e8%2581%25bd</guid>
            <pubDate>Mon, 23 Jan 2023 08:21:09 +0000</pubDate>
            <description>
                
                「早知道，還是原道」的梗不知道什麼時候突然就開始流行，到現在甚至都有些過氣了。這一系列耳機的的歷史可以追溯到原道品牌平板的配件耳機，所以習慣上就稱為「原道耳機」。不過現在想買到貼着「VIDO 原道」品牌的的款式似乎不太容易，容易買到的是 NiceHCK 的品牌的「原道耳機」。關
                
            </description>
            
            <content:encoded><![CDATA[<p>「早知道，還是原道」的梗不知道什麼時候突然就開始流行，到現在甚至都有些過氣了。這一系列耳機的的歷史可以追溯到原道品牌平板的配件耳機，所以習慣上就稱為「原道耳機」。不過現在想買到貼着「VIDO 原道」品牌的的款式似乎不太容易，容易買到的是 NiceHCK 的品牌的「原道耳機」。關於這個品牌有說法是：</p>



<blockquote>
<p>NiceHCK 是福兰声的经销商，闹掰了以后福兰声才出来自立门户的。所以 NiceHCK 前期卖的和后期卖的应该不是同一个作坊出来的。</p>
</blockquote>



<p>其實浅羽一直想感受流下「悔恨之淚」的感覺，最近偶然又看到了透明粉色配鍍銀線的款式，就當交「粉紅稅」買下了 3.5mm 無麥版。</p>







<p>經過這幾年的發展，這款耳機不僅包裝不再簡陋，甚至還擁有了耳機娘「<em>原道醬</em>」的插畫形象。除開有點精美味道的紙盒外，包裝裏甚至還有一張<em>原道醬</em>的卡片。除此之外還給了一黑一白兩對實心海綿套，以及證明自己不是三無<s>少女</s>產品的合格證和保證書。</p>



<p>耳機本身當然就是 MX500 的公模沒得跑的。透明粉色的顏色實際上很偏玫紅，不過浅羽原本以爲戴着會很顯眼，實際上全部被側髮遮住了完全看不到（笑）。這麼看，長髮的話其實買什麼顏色都無所謂，尤其是不用擔心自己喜歡的顏色戴起來合不合適。鍍銀線看起來就很有 Hi-Fi 的感覺，據說透明線是新版，音質都會好一些。</p>



<p>按照慣例，曲庫依然是浅羽聽什麼就有什麼、環境依然是浅羽在哪裏就是哪裏，依然是不會有嚴謹的試聽，只有感受。因爲沒有配中空海綿套，所以浅羽直接用了自己的備件。本來接了 amp 想認真聽聽，後來覺得這麼做不知道是在侮辱誰。所以最後是用 xDuoo X3II 和 HiBy R2 + HiBy FD3 的組合。首先低頻的量是很大的，相對地高頻就被壓制了，整個聲音聽起來偏悶。不過繼續聽下去，中頻很飽滿、厚實，非常適合聽一些人聲和器樂。不過，整體的聲音還是很糊的；甚至不用過多的樂器，單一樂器只需要旋律複雜一些，聲音就會混雜成一團。比如一些鋼琴曲，編排較複雜的部分，低音就會混著中音，以致無法分辨。至於什麼聲場、定位，整體人聲不能說貼不貼耳，只能說聲音根本就在大腦中間，而伴奏是分佈在兩耳旁的——這個價格，聲音均勻就不錯了，對吧？</p>



<p>在這種偏下盤的氛圍中，聲音聽起來很溫暖，其實非常適合睡前聽聽催催眠；可惜浅羽長期佩戴這個造型的耳機還是會耳朵痛。另外，這樣的聲音，在馬路邊聆聽的時候，可以很好地保持低音部分不被車流的噪音掩蓋，聲音反而聽著更加「正確」。</p>



<p>如果要總結的話，YD30 絕對不能用來發燒入門，只能是有經驗了當個玩具笑一笑。但是相比其他類似的選擇呢？比它價格幾乎翻倍的潛韻 25 也並沒有更好，而更高價位的潛韻 39 則完全不是一個聲音走向。可以說，雖然大家的聲音都有各種各樣的缺陷，但百元以內，YD30 也可以稱得上的是物有所值了。加上相對多彩的配色和<em>原道醬</em><s>自己代言自己</s>，倒也不妨一試。</p>



<hr />



<p><em>原道醬</em>的裙子有點似曾相識，浅羽好像也有一條類似的。不過這個乳量真是只能羨慕了……話說回來，如果裙子沒有口袋、<em>原道醬</em>的兩隻手也都沒有拿着的話，音源難道是綁在腿上的？</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2023%2F01%2F%25e6%2597%25a9%25e7%259f%25a5%25e9%2581%2593%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e5%258e%259f%25e9%2581%2593%25e9%2586%25ac-yd30-%25e7%25b0%25a1%25e5%2596%25ae%25e8%25a9%25a6%25e8%2581%25bd%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e6%252597%2525a9%2525e7%25259f%2525a5%2525e9%252581%252593%2525ef%2525bc%25258c%2525e9%252582%252584%2525e6%252598%2525af%2525e5%25258e%25259f%2525e9%252581%252593%2525e9%252586%2525ac-yd30-%2525e7%2525b0%2525a1%2525e5%252596%2525ae%2525e8%2525a9%2525a6%2525e8%252581%2525bd&amp;action_name=%E6%97%A9%E7%9F%A5%E9%81%93%EF%BC%8C%E9%82%84%E6%98%AF%E2%80%A6%E2%80%A6%E5%8E%9F%E9%81%93%E9%86%AC+%2F+YD30+%E7%B0%A1%E5%96%AE%E8%A9%A6%E8%81%BD&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="3069" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="3069" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>博客进程泄露及僵尸进程解决</title>
            <link>https://www.ohyee.cc/post/note_zombie_process</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_zombie_process</guid>
            <pubDate>Thu, 19 Jan 2023 17:23:06 +0000</pubDate>
            <description>
                
                chromedp 清理 chromium 问题 + 容器环境 = 僵尸进程
                
            </description>
            
            <content:encoded><![CDATA[chromedp 清理 chromium 问题 + 容器环境 = 僵尸进程]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tailscale 自定义 DERP 服务器</title>
            <link>https://www.whosneo.com/tailscale-custom-derper/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/tailscale-custom-derper/</guid>
            <pubDate>Wed, 21 Dec 2022 00:56:35 +0000</pubDate>
            <description>
                
                Tailscale 官方的 DERP 中继服务器全部在境外，距离最近的香港节点在国内的网络环境中也不一定能稳定连接。所以，还是很有必要建立自己的 DERP 服务器的。好在，操作起来并不难。 准备工作  需要有自己的云服务器，有 docker 运行环境。 需要有自己的域名。 需要
                
            </description>
            
            <content:encoded><![CDATA[<p>Tailscale 官方的 DERP 中继服务器全部在境外，距离最近的香港节点在国内的网络环境中也不一定能稳定连接。所以，还是很有必要建立自己的 DERP 服务器的。好在，操作起来并不难。<span></span></p>
<h2>准备工作</h2>
<ul>
<li>需要有自己的云服务器，有 docker 运行环境。</li>
<li>需要有自己的域名。</li>
<li>需要申请 SSL 证书。</li>
</ul>
<h2>安装</h2>
<p>假设你的域名为 <code>example.com</code>，对应的证书为 <code>example.com.crt</code>，私钥为 <code>example.com.key</code>，DERP 对外提供服务的端口为 8443。<br />
一行 docker 命令即可创建 DERP 服务器：</p>
<pre><code>docker run -d \
--name derp \
--restart=always \
-p 0.0.0.0:3478:3478/udp \
-p 0.0.0.0:8443:8443 \
-v /path/to/example.com.crt:/app/certs/example.com.crt \
-v /path/to/example.com.key:/app/certs/example.com.key \
-e DERP_DOMAIN=example.com \
-e DERP_ADDR=:8443 \
-e DERP_CERT_MODE=manual \
fredliang/derper:latest
</code></pre>
<p>启动 3478 端口不要修改，8443 端口可以按照自己的喜好来改，DERP_ADDR 变量后面的端口好需要与之前的保持一致，但是这里的冒号不能丢。</p>
<p>接下来来到 Tailscale 管理页面 – Access controls 标签页中，将编辑区域的内容清空，并填入以下内容：</p>
<pre><code>{
    "derpMap": {
        "Regions": {
            "900": {
                "RegionID":   900,
                "RegionCode": "bj",
                "RegionName": "Beijing",
                "Nodes": [
                    {
                        "Name":     "example.com",
                        "RegionID": 900,
                        "HostName": "example.com",
                        "DERPPort": 8443
                    }
                ]
            }
        }
    }
}
</code></pre>
<p><code>RegionCode</code> 与 <code>RegionName</code> 可以自定义，建议使用纯字母。<code>DERPPort</code> 需要与启动 docker 时设置的端口一致。点击保存之后即可。</p>
<p>在本地终端或者命令提示符中运行 <code>tailscale netcheck</code> 命令检查一下，看你设置的节点是否出现在下方的列表之中。</p>
<pre><code>Report:
    * UDP: true
    * IPv4: yes, *.*.*.*:*
    * IPv6: yes, [*:*:*:*:*:*:*:*]:*
    * MappingVariesByDestIP: true
    * HairPinning: false
    * PortMapping: 
    * CaptivePortal: false
    * Nearest DERP: Beijing
    * DERP latency:
        -  bj: 36ms    (Beijing)
        - hkg: 235.7ms (Hong Kong)
        - sea: 240.9ms (Seattle)
        - sfo: 247ms   (San Francisco)
        - syd: 253.2ms (Sydney)
        - sin: 259.5ms (Singapore)
        - tok: 260.3ms (Tokyo)
        - dfw: 271.5ms (Dallas)
        - blr: 277ms   (Bangalore)
        - mia: 295.4ms (Miami)
        - dbi: 314.6ms (Dubai)
        - nyc: 315.2ms (New York City)
        - tor: 326ms   (Toronto)
        - lax: 326.9ms (Los Angeles)
        - den: 333.1ms (Denver)
        - lhr: 347.6ms (London)
        - hnl: 350.9ms (Honolulu)
        - ord: 351.2ms (Chicago)
        - sao: 407.1ms (São Paulo)
        - fra: 487.8ms (Frankfurt)
        - mad: 493.2ms (Madrid)
        - par: 525ms   (Paris)
        - ams: 537.4ms (Amsterdam)
        - waw: 555.3ms (Warsaw)
        - jnb: 680.2ms (Johannesburg)
</code></pre>
<p>当使用 <code>tailscale ping</code> 命令去 ping 一个客户端的时候，就可以看到真正使用上了我们自己的节点。</p>
<pre><code>pong from * (*.*.*.*) via DERP(bj) in 60ms
pong from * (*.*.*.*) via *.*.*.*:* in 58ms
</code></pre>
<h2>防止被白嫖</h2>
<p>如果你的云服务器的带宽、流量不是很大很多的话，做好客户端验证防止别人使用你的 DERP 服务器还是有用的。</p>
<p>首先在服务器上按照 Tailscale 官方安装手册安装客户端，在成功接入自己的局域网之后，本地会创建一个套接字接口 <code>/var/run/tailscale/tailscaled.sock</code>，之后需要做的就是调整一下 docker 的命令：</p>
<pre><code>docker run -d \
--name derp \
--restart=always \
-p 0.0.0.0:3478:3478/udp \
-p 0.0.0.0:8443:8443 \
-v /path/to/example.com.crt:/app/certs/example.com.crt \
-v /path/to/example.com.key:/app/certs/example.com.key \
-v /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock \
-e DERP_DOMAIN=example.com \
-e DERP_ADDR=:8443 \
-e DERP_CERT_MODE=manual \
-e DERP_VERIFY_CLIENTS=true \
fredliang/derper:latest
</code></pre>
<p>调整之处为两个，一个是将套接字接口挂载进容器中，另一个是添加环境变量 <code>DERP_VERIFY_CLIENTS</code>，这样 DERP 就会验证连接的客户端是否与本机的客户端为同一个账号下，从而避免其他客户端白嫖服务器。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>ThinkPad X1 Carbon Gen 9 簡單體驗</title>
            <link>https://asaba.sakuragawa.moe/2022/11/thinkpad-x1-carbon-gen-9-%e7%b0%a1%e5%96%ae%e9%ab%94%e9%a9%97/?pk_campaign=feed&amp;pk_kwd=thinkpad-x1-carbon-gen-9-%25e7%25b0%25a1%25e5%2596%25ae%25e9%25ab%2594%25e9%25a9%2597</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2022/11/thinkpad-x1-carbon-gen-9-%e7%b0%a1%e5%96%ae%e9%ab%94%e9%a9%97/?pk_campaign=feed&amp;pk_kwd=thinkpad-x1-carbon-gen-9-%25e7%25b0%25a1%25e5%2596%25ae%25e9%25ab%2594%25e9%25a9%2597</guid>
            <pubDate>Wed, 23 Nov 2022 22:04:02 +0000</pubDate>
            <description>
                
                用了三年多的 ThinkPad X1 Carbon Gen 6 的電池鼓包了，雖然續航時間下降不明顯，卻把整個 D 殼都撐了起來，連螺絲都壓制不住，無奈只好換了 Gen 9。浅羽收到的這台是定製配置的版本，CPU 爲 Intel Core i7-1185G7，配備 32GB R
                
            </description>
            
            <content:encoded><![CDATA[<p>用了三年多的 ThinkPad X1 Carbon Gen 6 的電池鼓包了，雖然續航時間下降不明顯，卻把整個 D 殼都撐了起來，連螺絲都壓制不住，無奈只好換了 Gen 9。浅羽收到的這台是定製配置的版本，CPU 爲 Intel Core i7-1185G7，配備 32GB RAM 和 512GB SSD，生物辨識方面有帶 Think Shutter 的 IR/RGB 相機和電源鍵指紋辨識，非 WWAN 版本。</p>



<p>這一代 ThinkPad X1 Carbon 有 1.13kg 重，比起前兩代略爲重，但比起 Gen 6 來說基本是一致的。這比起 LG Gram 來說當然還有一定距離，但浅羽也可以舉出一個反面例子：搭配智慧型摺套連鍵盤（Smart Keyboard Folio）的 12.9 吋 iPad Pro（實測重量爲 624g + 413g ≈ 1.3kg）。</p>



<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/11/SKG-20221113-040139-2-2048x1152.jpg" />



<p>外觀上差別也不大，不過<strong>終於不是反貓咪的吹爪爪設計了</strong>！這一代的出風口放在了轉軸下，還因此而放棄了 one hinge 設計。同時還<strong>在 D 面設計了一條膠墊來提高筆電平放時的傾斜度</strong>。<strong>B、C 面 180 度開合的傳統藝能也是同樣保留的</strong>，不過由於底部墊高的存在，所以下半部分始終會保持一定的傾斜度。<strong>螢幕方面，尺寸維持 14 吋的前提下比例變成了 16:10</strong>，<strong>下巴的長短終於沒有那麼驚爲天人了</strong>。比例的變更加上窄邊框設計也使得外觀上更偏方正──當然，和 4:3 時代的飯盒比不了。這代的 Think Shutter 可以和 IR/RGB 共存了。就是不知道什麼時候可以有 1080P 的攝影機，這對於 video call 的幫助還是很大的。</p>



<p>開機做一些設定，發現 <strong>UEFI 新增了圖形介面</strong>，也支援滑鼠操作；但是浅羽不喜歡，好在還可以換回 Simple Text 模式。鍵盤方面，<strong>按鍵高度方面是有肉眼可見的降低</strong>，但是神奇的是沒有感受到明顯的鍵程變化，<strong>打鍵感維持了相對一致</strong>。Think Point 沒有變化。<strong>觸控板變得更寬了</strong>，連帶着觸控板的左右按鍵也變得更長了。不過這一代的<strong>觸控板在 Windows 下竟然無法靠內建驅動程式驅動</strong>，而沒有驅動程式的狀況下完全不能使用！如果不是熟練使用各種小紅小藍小白點的老用家，恐怕要頭痛了。倒是 Fedora 下無需額外設定可以直接使用。<strong>指紋辨識整合到了電源鍵上</strong>，同時電源燈號也充當了指紋辨識的提示燈號，同時擁有白、綠、黃三種顏色。指紋辨識的靈敏度比較一般，浅羽基本上都需要嘗試兩三次才能成功辨識。</p>



<p>效能方面，浅羽沒有詳細測試。新平臺有 4×2 個框框，加上較高的主時脈，應付日常的圖片後製自然是沒問題的。內建的 Iris® Xe 應付一些簡單的遊戲也是可以的，中間 partner 拿去玩了幾天 <em>Europa Universalis IV</em>，解析度設定在 4K 還是無法流暢運行，降到 1080P 後基本就沒有問題了。當然畢竟不是「遊戲本」，就不要認真和隔壁 Ryzen 去比了。滿載的風扇聲音也不小，但是比起 Gen 6 的高頻噪音來說還是略好，<s>沒有刺耳的高頻，中頻飽滿，更加豐滿悅耳一些</s>。</p>



<p>揚聲器意外地很不錯，這一代配備了 4 揚聲器，C 面兩個 0.8W 揚聲器，D 面還有兩個帶音腔的 2W 揚聲器。高音不甜，中音勉強準，低音也完全不沉；但人聲交談的話總算是勉強可以聽的。</p>



<p>總體來說，這代除了 16:10 顯示器外基本上都是常規迭代。但是細節方面的一些完善和提升對於浅羽來說還是比較受用的。可嘆的是 Lenovo 爲什麼非要給 WWAN 版專門單獨開模，簡直是一點升級空間都不想給用家留了。</p>



<h2><a href="https://markdown.sakuragawa.moe/Y6y3FSkgSpOFiGnPg_MFZg#%E9%85%8D%E4%BB%B6%E5%92%8C%E8%B2%BC%E7%B4%99"></a>配件和貼紙</h2>



<p>浅羽把<a href="https://asaba.sakuragawa.moe/2019/02/%e7%94%a8%e5%ae%a2%e8%a3%bd%e5%8c%96%e8%b6%85%e4%bd%8e%e6%ac%be-trackpoint-caps-%e6%94%b9%e5%96%84%e6%96%b0-thinkpad-%e4%b8%8a%e7%9a%84%e5%b0%8f%e7%b4%85%e9%bb%9e%e6%89%8b%e6%84%9f/" data-type="post" data-id="1504" target="_blank">指點桿帽</a>直接從 Gen 6 上取下裝到 Gen 9 上了，完全可以通用。</p>



<p>貼紙這一次沒有選擇 dbrand，而是找了據說是代工廠的一家店。店鋪內有包括 Swarm、Camouflage 在內的各種 dbrand 同款貼紙，同時也可以做 logo cutout。實際收到後，浅羽發現貼紙的材料應該是同款，但開模方面還是存在不小的公差，考慮到和 dbrand 的價格差距不算大，所以也很難說值得。</p>



<p>浅羽這次就要求做 ThinkPad 的 logo cutout，這樣還可以保留 A 面的狀態指示燈號。另一邊的 Lenovo logo 則是完全遮住，不過這代的 Lenovo logo 有一個下陷，浅羽乾脆就在中間貼了點<s>奇怪的東西</s>「自由之光」。</p>


<div>
<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/11/SKG-20221113-035532-4096x2560.jpg" />貼上一點「自由之光」</div>


<h2><a href="https://markdown.sakuragawa.moe/Y6y3FSkgSpOFiGnPg_MFZg#%E8%87%AA%E8%A1%8C%E6%94%B9%E8%A3%9D"></a>自行改裝</h2>



<p>拆後蓋看了一下，RAM 焊死，没有空余插槽，甚至连 WLAN 模組都是焊死的，整机只有 SSD 可以替换。非 WWAN 機種，出廠沒有預置 WWAN 模組和天線；同時Lenovo 有單獨開模，機身上也沒有 SIM 卡槽開孔。不過拆開後蓋後可以看到 SIM 卡托盤還保留着，WWAN 接口也留空。</p>



<p>這代留給自行改裝和升級的空間已經基本沒有了，不過「可維護性」倒是依然很好，大部分組件靠螺絲（而不是膠水）固定──雖然也不知道有什麼可「維護」的就是了。</p>



<h3><a href="https://markdown.sakuragawa.moe/Y6y3FSkgSpOFiGnPg_MFZg#%E5%8A%A0%E8%A3%9D-wwan"></a>加裝 WWAN</h3>



<p>根據 TP 非官方情報站站長所說：</p>



<blockquote>
<p>這是因為 X1 Carbon Gen9 的 WLAN Only 機種，整個 C Cover 都由鎂合金打造而成，即使加裝了 WWAN 天線，也想辦法塞入 SIM 卡了，WWAN 無線訊號卻會被鎂合金材質所屏蔽掉！至於 X1 Carbon Gen9 的 WWAN 機種，在 Palmrest 兩側前緣部位，也就是下圖中對應 WWAN 天線的部位，都改用玻璃纖維（GFRP）材質了，以利無線訊號收送。</p>
<a href="http://www.tpuser.idv.tw/wp/?p=4073" target="_blank">ThinkPad X1 Carbon Gen9與X13 Gen2簡測心得(上) | TP非官方情報站</a></blockquote>



<p>應該說，<strong>本來只需要付出購買 WWAN 模組和天線的成本</strong>，<strong>現在還要加上換掉 C 殼的高昂成本了</strong>。不過如果只是收訊較差的話，其實不改可能也「能用」。先前在 X1 Carbon Gen 7 上體驗過 LTE 連線，感覺非常用。有機會的話的話也會在 X1 Carbon Gen 9 上試試看，不過至少要等浅羽決定好買 4G 還是 5G 模組之後了。</p>



<hr />



<p><em>（附頁爲筆電詳細規格）</em></p>


<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2022%2F11%2Fthinkpad-x1-carbon-gen-9-%25e7%25b0%25a1%25e5%2596%25ae%25e9%25ab%2594%25e9%25a9%2597%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3Dthinkpad-x1-carbon-gen-9-%2525e7%2525b0%2525a1%2525e5%252596%2525ae%2525e9%2525ab%252594%2525e9%2525a9%252597&amp;action_name=ThinkPad+X1+Carbon+Gen+9+%E7%B0%A1%E5%96%AE%E9%AB%94%E9%A9%97&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2930" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>2    </span>
</div><div>
    <a data-post-id="2930" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>单调栈全攻略</title>
            <link>https://icebound.cc/2022/11/06/monotonic_stack.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/11/06/monotonic_stack.html</guid>
            <pubDate>Sun, 06 Nov 2022 13:49:09 +0000</pubDate>
            <description>
                
                最近刷了不少单调栈，总算搞懂了 基本性质 入栈顺序为下标顺序。 出栈序列分批次为单调增/单调减。 每个元素应当 […] The post 单调栈全攻略 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>最近刷了不少单调栈，总算搞懂了 基本性质 入栈顺序为下标顺序。 出栈序列分批次为单调增/单调减。 每个元素应当 […]</p>
<p>The post <a href="https://icebound.cc/2022/11/06/monotonic_stack.html">单调栈全攻略</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>蓝易云服务器体验</title>
            <link>https://www.ohyee.cc/post/ad_tsyvps</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/ad_tsyvps</guid>
            <pubDate>Sun, 06 Nov 2022 09:14:41 +0000</pubDate>
            <description>
                
                null
                
            </description>
            
            <content:encoded><![CDATA[null]]></content:encoded>
            
        </item>
        
        <item>
            <title>SSH 调起本地 VSCode</title>
            <link>https://www.ohyee.cc/post/note_ssh_local_vscode</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_ssh_local_vscode</guid>
            <pubDate>Sun, 23 Oct 2022 14:44:05 +0000</pubDate>
            <description>
                
                ssh 调起本地 VSCode 打开远端文件夹
                
            </description>
            
            <content:encoded><![CDATA[ssh 调起本地 VSCode 打开远端文件夹]]></content:encoded>
            
        </item>
        
        <item>
            <title>InfluxDB 2.4+grafana9.0部署</title>
            <link>https://icebound.cc/2022/10/12/influxdb_grafana.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/10/12/influxdb_grafana.html</guid>
            <pubDate>Wed, 12 Oct 2022 13:57:43 +0000</pubDate>
            <description>
                
                工作中需要自建一个简单的离线监控平台，车上收集的collectd数据会通过ETL平台提取，上传至时序数据库，然 […] The post InfluxDB 2.4+grafana9.0部署 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>工作中需要自建一个简单的离线监控平台，车上收集的collectd数据会通过ETL平台提取，上传至时序数据库，然 […]</p>
<p>The post <a href="https://icebound.cc/2022/10/12/influxdb_grafana.html">InfluxDB 2.4+grafana9.0部署</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>一些想法</title>
            <link>https://icebound.cc/2022/10/06/some_idea.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/10/06/some_idea.html</guid>
            <pubDate>Thu, 06 Oct 2022 06:59:21 +0000</pubDate>
            <description>
                
                中秋节在北京一个人过，整个人无比的焦虑：明明很困，躺在床上睡5分钟就会惊醒；看Hadoop源码分析，看不到10 […] The post 一些想法 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>中秋节在北京一个人过，整个人无比的焦虑：明明很困，躺在床上睡5分钟就会惊醒；看Hadoop源码分析，看不到10 […]</p>
<p>The post <a href="https://icebound.cc/2022/10/06/some_idea.html">一些想法</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>光猫 SK-D740-C 超级密码</title>
            <link>https://www.whosneo.com/sk-d740-c-admin/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/sk-d740-c-admin/</guid>
            <pubDate>Mon, 19 Sep 2022 09:31:39 +0000</pubDate>
            <description>
                
                创维品牌系列光猫均可参考。 打开隐藏配置页面：http://192.168.1.1/hidden_version_switch.html，勾选 Telnet Enable，页面自动刷新即表示完成。如果页面打不开，可以试试 http://192.168.1.1/hidden_ve
                
            </description>
            
            <content:encoded><![CDATA[<p>创维品牌系列光猫均可参考。<span></span></p>
<p>打开隐藏配置页面：<a href="http://192.168.1.1/hidden_version_switch.html">http://192.168.1.1/hidden_version_switch.html</a>，勾选 Telnet Enable，页面自动刷新即表示完成。如果页面打不开，可以试试 <a href="http://192.168.1.1/hidden_version_switch.gch">http://192.168.1.1/hidden_version_switch.gch</a>。</p>
<p>开启 telnet 的目的是使得超级密码明文存储在文件中，方便我们获取。</p>
<p>使用 FTP 登录 192.168.1.1，账号密码均为 useradmin，/tmp/telnet_su_passwd 文件内容即为超级密码。</p>
<p>此时再回到光猫管理员登录页面，使用文件内的密码即可登录管理员账户。</p>
<blockquote><p>
  参考链接：https://www.right.com.cn/forum/thread-8249610-1-1.html
</p></blockquote>]]></content:encoded>
            
        </item>
        
        <item>
            <title>猫之城物理钓鱼挂（二）：图像采集以及画面分类</title>
            <link>https://binux.blog/2022/09/cat-planet-bot-part-2-video-capture-and-classification/</link>
            
            <author>Roy Binux</author>
            
            <guid>https://binux.blog/2022/09/cat-planet-bot-part-2-video-capture-and-classification/</guid>
            <pubDate>Sun, 18 Sep 2022 22:19:13 +0000</pubDate>
            <description>
                
                上一篇中，我们实现了屏幕触控的物理输出，但是钓鱼这个小游戏还是需要根据画面反馈来做动作的。我一开始的想法是用一个摄像头拍摄平板的画面然后进行图像处理。尝试了一会发现，就摄像头这 720P 的分辨率，光是梯形校正准确率都不高，可能做个图像分类还行，但是要分辨画面中的信息对我来说还
                
            </description>
            
            <content:encoded><![CDATA[<p>上一篇中，我们实现了屏幕触控的物理输出，但是钓鱼这个小游戏还是需要根据画面反馈来做动作的。我一开始的想法是用一个摄像头拍摄平板的画面然后进行图像处理。尝试了一会发现，就摄像头这 720P 的分辨率，光是梯形校正准确率都不高，可能做个图像分类还行，但是要分辨画面中的信息对我来说还是有些困难。然后睡前一阵查找，发现了软件实现的 AirPlay。</p><h1><a href="https://binux.blog/2022/09/cat-planet-bot-part-2-video-capture-and-classification/#图像采集"></a>图像采集</h1><p>AirPlay 是 Apple 的屏幕镜像和投影协议，这个协议已经被逆向并且有软件实现了，例如 <a href="https://letsview.com/">LetsView</a>, <a href="https://www.airserver.com/">AirServer</a>。通过 AirPlay + 接收软件，我们可以将 iPad 画面镜像投影到电脑上，分辨率更高，而且没有<strong>色差</strong>，处理起来就更简单了。如果是安卓的平板，也可以通过 Chromecast 或者 Miracast 协议投影，原理是一样的。</p><p>当图像投影到 PC 上之后，就可以通过截取 PC 屏幕窗口的的方式获取到平板画面内容。第一种方案是使用 <a href="https://python-mss.readthedocs.io/">MSS</a>，一个跨平台的 Python 截图包，它能以大约 20 FPS 的速度捕获图片。使用也很简单，首先需要获取投影软件的窗口位置和大小，然后按帧截图发送给 OpenCV 处理。实现的代码在这里：<a href="https://github.com/binux/cat-planet-bot/blob/main/screen_capture.py">screen_capture.py</a>。由于 MSS 并没有提供获取窗口大小的方法，它的区域捕获仅仅依靠的是屏幕坐标。所以获取窗口还是需要我们自己实现的，而这部分不是跨平台的，也没办法获知窗口移动。再加上 MSS 仅仅是截图，当窗口在后台时就失效了，使用起来并不方便。</p><p>而更好的方法是通过 <a href="https://obsproject.com/">OBS</a> + 虚拟摄像头 + OpenCV，对的，就是平时游戏主播使用的直播软件。简单来说就是使用 OBS 捕获投影软件窗口，再通过虚拟摄像头输出给 OpenCV。OBS 软件本身是跨平台的（但是在不同平台可能会有些不同），FPS 要多少有多少，而且窗口可以被遮挡（窗口不能最小化到后台，但是可以放在另一个 Virtual Desktop），窗口移动什么的也完全没有问题，专业的确实就是专业。OBS 设置部分很简单，只要增加一个 Source，然后再根据需要调整输出分辨率就好了。Python 部分的源代码在：<a href="https://github.com/binux/cat-planet-bot/blob/main/obs_capture.py">obs_capture.py</a>。</p><p><img src="https://binux.blog/assets/image/OBS-window-capture.png" /></p><p>Note：虽然最新的 OBS 自带了 Virtual Cam，但是似乎在 Windows 上和 OpenCV 有兼容性问题，捕获的画面是黑的，依旧需要使用<a href="https://github.com/Fenrirthviti/obs-virtual-cam">插件</a>解决。</p><h1><a href="https://binux.blog/2022/09/cat-planet-bot-part-2-video-capture-and-classification/#画面分类"></a>画面分类</h1><p>现在采集到了平板上的游戏画面，下一步就是给画面进行分类，来获得游戏所处的界面。这么做主要有这些原因：</p><ol><li>很多游戏操作是有网络交互的，当点击按钮之后，会有不定长的延迟进入下一个界面，在下一步操作前进行画面分类识别能更<a href="https://baike.baidu.com/item/%E9%B2%81%E6%A3%92%E6%80%A7/832302">鲁棒</a>。</li><li>在有的界面中，存在需要进一步识别的交互内容，例如钓鱼小游戏的浮标。先识别界面类型，能更有效和准确地决定是否需要进行这些信息提取。</li><li>获取当前状态可以使 bot 更灵活，脚本可以从任意状态启动。这一部分会再 第四篇 blog 中讲到。</li></ol><p>在这个项目中，我直接抄了 <a href="https://www.tensorflow.org/">tensorflow</a> 的 <a href="https://www.tensorflow.org/tutorials/images/classification">Image Classification Tutorial</a>。对于这种标准的 UI 界面，随便什么模型效果应该都不差：<a href="https://github.com/binux/cat-planet-bot/blob/main/classifier_training.ipynb">classifier_training.ipynb</a>。</p><p>做图片分类的第一步是采集训练样本，你会注意到 <a href="https://github.com/binux/cat-planet-bot/blob/main/screen_capture.py">screen_capture.py</a> 和 <a href="https://github.com/binux/cat-planet-bot/blob/main/obs_capture.py">obs_capture.py</a> 的 <code>__main__</code> 部分都有 <code>cv.imwrite</code> 以及对应的按键绑定的代码。我首先会在开启图像采集的过程中，游玩游戏，手动进行需要自动化的整个流程，手动或者每 1 秒地频率采集一些原始图像。然后对应每一个分类新建一个文件夹，例如在《猫之城》中，我有 fish_idle, fish_ring, fish_drag, fish_reward 和 not_supported 这样一些分类。然后将采集到的图片拖到对应分类的文件夹中，我对于分类和图片的选取是这样的：</p><ul><li>分类之间的图像需要有较大的不同。例如，点击之后显示的确认对话框就没必要单独建立一个分类。</li><li>每个分类选取至少 10-20 张 <strong>不同</strong> 的图片，尽量涵盖这个类别可能出现的所有变种，例如《猫之城》中 fish_idle 会出现不同的场景导致背景不一样。</li><li>单个类别不应该有远多于别的类别的样本，最多和最少之间不超过 10 倍这样。</li><li>not_supported 可以用来放一些脚本用不到的 UI 截图来增加类别之间的差异性，以及在进入没有分类的页面的时候不会错误激活脚本。</li></ul><p>然后就是套代码了，图片分类并不需要很高的图片分辨率，这里我随便选了一个 220x300 来保持图片宽高比，套示例模型就能达到 99% 的准确度了。因为是 UI 界面，也不存在裁切变换，之后实际测试结果也非常好。最后将分类列表和模型保存下来就可以啦。为了保存单个文件，并且减少体积，使用的是 <a href="https://www.tensorflow.org/lite/">TensorFlow Lite</a> 模型，predict 的代码在 <a href="https://github.com/binux/cat-planet-bot/blob/main/classifier.py">classifier.py</a>。唯一需要注意的是使用的时候需要自己 resize 到 220x300，并且 OpenCV 图片的颜色是 BGR 而 tensorflow 是 RGB 的，需要要进行转换。其他就没什么了，总共有效代码也就 15 行，踩着巨人的肩膀，使用成熟的库之后还是挺简单的。</p><p><img src="https://binux.blog/assets/image/cat-plant-bot-image-classification-sample.jpg" /></p><p>Note: 图片中的 <code>fish_ring = 099%</code> 就是图片分类的结果和 score，而其他的图片识别内容和辅助线就在下一篇 blog 中讲解啦。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>OpenWrt SquashFS 镜像扩容</title>
            <link>https://www.whosneo.com/openwrt-squashfs-expand/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/openwrt-squashfs-expand/</guid>
            <pubDate>Fri, 09 Sep 2022 06:04:48 +0000</pubDate>
            <description>
                
                最近搞了个软路由，OpenWrt 官方下载的镜像默认空间只有一百多兆，完全不够用的，白白浪费了 SD 卡的空间。本文记录一下如何将默认的空间给扩容。 解压安装包，得到 img 镜像文件 gzip -d friendlyarm_nanopi-r4s-squashfs-sysupg
                
            </description>
            
            <content:encoded><![CDATA[<p>最近搞了个软路由，OpenWrt 官方下载的镜像默认空间只有一百多兆，完全不够用的，白白浪费了 SD 卡的空间。本文记录一下如何将默认的空间给扩容。<span></span></p>
<p>解压安装包，得到 img 镜像文件</p>
<pre><code>gzip -d friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
</code></pre>
<p>给 img 镜像文件末尾增加 6G 空白数据</p>
<pre><code>dd if=/dev/zero bs=1G count=6 &gt;&gt; friendlyarm_nanopi-r4s-squashfs-sysupgrade.img
</code></pre>
<p>对 img 镜像文件进行分区调整，使分区占满整个镜像文件</p>
<pre><code>parted friendlyarm_nanopi-r4s-squashfs-sysupgrade.img

# 显示出分区
print

# 将第二个分区调整为 100% 大小
resizepart 2 100%

# 完成退出
quit
</code></pre>
<p>最后，将 img 镜像文件打包成压缩文件</p>
<pre><code>gzip friendlyarm_nanopi-r4s-squashfs-sysupgrade.img
</code></pre>
<p>这样最后得到的安装包就是扩容完成的了，用这个刷机即可，再也不会提示空间不足了。</p>
<blockquote><p>
  参考链接：https://dickies.myds.me:56789/st/routeos/1024/
</p></blockquote>]]></content:encoded>
            
        </item>
        
        <item>
            <title>[Leetcode系列]初级算法</title>
            <link>https://icebound.cc/2022/08/28/leetcode_primary.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/08/28/leetcode_primary.html</guid>
            <pubDate>Sun, 28 Aug 2022 11:55:29 +0000</pubDate>
            <description>
                
                初级系列：https://leetcode.cn/leetbook/detail/top-interview- […] The post [Leetcode系列]初级算法 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>初级系列：https://leetcode.cn/leetbook/detail/top-interview- […]</p>
<p>The post <a href="https://icebound.cc/2022/08/28/leetcode_primary.html">[Leetcode系列]初级算法</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>猫之城物理钓鱼挂（一）：物理模拟触屏点击</title>
            <link>https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/</link>
            
            <author>Roy Binux</author>
            
            <guid>https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/</guid>
            <pubDate>Sun, 28 Aug 2022 07:49:57 +0000</pubDate>
            <description>
                
                真的有2年半没有写 blog 了。我是那种不愿意在事情尘埃落定之前，把它写下来的类型。在这两年半里，H1B 抽到了，也跳槽了。收入上去之后，也更愿意花钱解决问题，而不是自己做点什么，有好几次想要提笔，又感觉没什么好写的。以后会改善吗？我觉得不会，虽然我依旧会去尝试各种新的东西，
                
            </description>
            
            <content:encoded><![CDATA[<p>真的有2年半没有写 blog 了。我是那种不愿意在事情尘埃落定之前，把它写下来的类型。在这两年半里，H1B 抽到了，也跳槽了。收入上去之后，也更愿意花钱解决问题，而不是自己做点什么，有好几次想要提笔，又感觉没什么好写的。以后会改善吗？我觉得不会，虽然我依旧会去尝试各种新的东西，但是觉得有必要写下来的变少了，现在我更多的是追求安稳的生活吧。</p><p>言归正传，这次带来的是一个手游《猫之城》的物理挂。4年以前，我做过一个<a href="https://binux.blog/2018/10/girls-frontline-ankulua-vision/">《少前》的脚本</a>，使用的是一个机器内的 App 来采集图像然后驱动控制的，然后就被封号了：P 。于是这一次就打算使用物理的方法，在机器外部实现所有的信息处理和控制。比如下面这一段视频，就是这个物理挂识别游戏内的钓鱼小游戏，然后通过电极模拟触控实现的：</p><p></p><p>在这一系列 blog 中，我会分为</p><ul><li>模拟物理点击</li><li>图像采集以及画面分类</li><li>游戏图像细节信息提取</li><li>控制与 bot 状态机</li></ul><p>等篇章讲解这个 bot 的实现，同时源代码已经上传到了 github: <a href="https://github.com/binux/cat-planet-bot">cat-planet-bot</a>。<strong>注意</strong>：使用外挂是违反游戏用户协议的行为。由于代码中使用了大量 hard coded 图像坐标，我并不认为你能直接使用它。这份代码仅在 blog 中作为引用，讲解学习。</p><p>我也是第一次做硬件，电子电路以及图像处理开发（所以使用的最简单的 Arduino），我只会很简单地介绍这方面的知识，如果有什么错误，或者更好的方案，欢迎在评论中指出。</p><h3><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#电容屏的物理触控"></a>电容屏的物理触控</h3><p>简单的说，现在的平板手机的触摸屏都是<a href="https://zh.m.wikipedia.org/zh-hans/%E7%94%B5%E5%AE%B9%E5%BC%8F%E6%84%9F%E5%BA%94">电容屏</a>，它是通过<strong>测量</strong>手指靠近屏幕导致的电容<strong>变化</strong>来获取点击位置的，所以只要你能造成屏幕上某个区域的电容变化，就能模拟出点击。不过，不管怎么说，不同屏幕实现方式和灵敏度还是有区别的，最靠谱简单的方式还是实践。毕竟只要某个方案在你自己的机器上有效就可以了嘛。这里我直接使用了一个<a href="https://patrickhlauke.github.io/touch/tracker/multi-touch-tracker-pointer-hud.html">网页</a>，在 iPad 上测试了一些可行和不可行的例子：</p><p>不可行的：</p><ul><li>塑料的笔（和其他绝缘材料）</li><li>没有接地的硬币（比如你手拿着硬币就可以认为是有效接地）</li><li>没有接地的铝箔卷（在形状合适的情况下，不接地的铝箔卷可以形成点击，类似多芯导线形成的毛刷）</li><li>接地了的硬币边缘</li><li>单芯导线，回形针或者金属餐具（和屏幕接触面积只有一个点，无论是否接地）</li></ul><p>可行的：</p><ul><li>电容笔或者触控笔（无论是否接地）</li><li>接地并躺平的硬币</li><li>接地了的铝箔卷</li><li>不接地的多芯导线形成的毛刷</li><li>电池正负极（类似上一条）</li></ul><p>总结起来这里有两个关键：</p><ul><li>接触面积要足够大（面积要和手指类似）</li><li>是否接地不是关键，但接地可以改变触控状态（这一点很重要，它是我们能够通过电路控制的关键）</li></ul><p>于是，我这里选择的是：<a href="https://www.google.com/search?q=%E7%94%B5%E5%87%BB+%E6%8C%89%E6%91%A9%E8%B4%B4">电击按摩贴</a>。首先，这东西导电，而且可以随意裁剪大小，并且自带粘性，可以粘在屏幕上。通过控制是否接地（初次粘贴时屏幕会感应为持续按住状态，需要关闭再打开屏幕reset，原因见下文）可以控制触摸状态。最最最重要的是，这东西在美国很容易买到，并且我家里有：D 。如果你在国内，可以买到成品连点器，或者直接买吸盘造型的导电橡胶，价格实惠，卖家甚至已经给你接好了导线。</p><p><img src="https://binux.blog/assets/image/touch-contact.jpg" /></p><h3><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#电脑控制触控"></a>电脑控制触控</h3><p>在上一步我们知道可以通过电极的接地与否，模拟触摸的按下和抬起，这时候就需要一个 PC 到这个接地电路的控制器，这里一般是一个与 PC 通信的 MUC 中导出的 GPIO 接口。我这里使用的是 Arduino，一个非常成熟的入门级开发板和配套程序。不过你也可以用例如 树莓派，STM32，ESP32 等等平台，它们的开发板可能更便宜，而且有的还能做到无线控制。</p><p>然后电路具体怎么实现呢？简单查询，网上有说使用<a href="https://electronics.stackexchange.com/questions/423740/simulate-capacitive-touch">继电器，伺服电机的</a>，也有说可以使用 <a href="https://electronics.stackexchange.com/questions/60070/how-do-i-make-a-micro-controller-act-as-a-finger-on-a-touch-screen">N-channel MOSFET</a>（也有说用 <a href="https://electronics.stackexchange.com/questions/328031/how-to-physically-stimulate-a-touch-screen-with-an-external-device">P-channel</a> 或者<a href="https://electronics.stackexchange.com/a/60424">不能用的</a>）。但是都有一个问题：没有实物，而且我也不知道需要买什么规格的啊。在美国，如果一次没有搞定，重复购买的话，光运费就会多花出很多钱了。于是，我把镜头看向了国内，刷到了 <a href="https://www.bilibili.com/video/BV1wB4y1A76k">【单片机】Arduino光遇自动弹琴机器人2.0来了</a> 这个视频，视频中 UP 主使用了光耦甚至给出了型号。那还说什么呢？照着来呗。</p><blockquote><p>选择这个方案还有一些原因是，其他方案里的，伺服电机存在机械机构，安装麻烦；继电器往往是电磁继电器，开关时会发出噪音；而 MOSFET 的电路<a href="https://electronics.stackexchange.com/a/60424">不完全隔离</a>，可能会因为自身存在一些电容，而屏幕判断不准确。</p></blockquote><p>在面包板上将一个 GPIO 端口，与一个发光二极管，光耦，限流电阻串联，然后接地就可以了；光耦的另一端分别接按摩贴做的电极和地：</p><p><img src="https://binux.blog/assets/image/circle-connection.png" /></p><p>在 GPIO 高电平时，光耦开关闭合，会将电极和地连通，从而模拟出按下的状态。</p><blockquote><p>光耦和 LED 类似，需要串联一个限流电阻。例如我使用的 PC817 的 Forward Voltage 是 1.2V，电流 20mA。而 Arduino 的 GPIO 输出是 5V 的，通过 <a href="http://www.chinaaet.com/tools/led_current_limiting_resistance.html">计算</a> 我们需要串联一个大约 190Ω 的电阻。（什么，你说我还串联了一个 LED ？管它呢，又不是不能用）</p></blockquote><h4><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#Arduino-控制程序"></a>Arduino 控制程序</h4><p>Arduino 非常简单地提供了一个 IDE，插上开发板的 USB 就可以开始编程了，你首先可以照着 Arduino 的标准教程 <a href="https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink">Blink</a> 熟悉下环境，当程序上传到开发板之后就不需要 IDE 了。PC 将通过 USB 连接 Arduino UART 串口进行通信。Arduino 部分的代码如下：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /><span>23</span><br /></pre></td><td><pre><span><span><span>void</span> <span>setup</span><span>()</span> </span>{</span><br /><span>  <span>Serial</span>.<span>begin</span>(<span>9600</span>);</span><br /><span>  <span>for</span> (<span>int</span> i = <span>8</span>; i &lt;= <span>13</span>; i++) {</span><br /><span>    <span>pinMode</span>(i, <span>OUTPUT</span>);</span><br /><span>  }</span><br /><span>  <span>for</span> (<span>int</span> i = A0; i &lt;= A5; i++) {</span><br /><span>    <span>pinMode</span>(i, <span>OUTPUT</span>);</span><br /><span>  }</span><br /><span>  <span>Serial</span>.<span>println</span>(<span>"OK"</span>);</span><br /><span>}</span><br /><span></span><br /><span><span><span>void</span> <span>loop</span><span>()</span> </span>{</span><br /><span>  <span>while</span> (<span>Serial</span>.<span>available</span>()) {</span><br /><span>    <span>String</span> command = <span>Serial</span>.<span>readStringUntil</span>(<span>'\n'</span>);</span><br /><span>    <span>String</span> op = command.<span>substring</span>(<span>0</span>, <span>3</span>);</span><br /><span>    <span>String</span> rest = command.<span>substring</span>(<span>3</span>);</span><br /><span>    <span>if</span> (op == <span>"LOW"</span>) {</span><br /><span>      <span>digitalWrite</span>(rest.<span>toInt</span>(), <span>LOW</span>);</span><br /><span>    } <span>else</span> <span>if</span> (op == <span>"HIG"</span>) {</span><br /><span>      <span>digitalWrite</span>(rest.<span>toInt</span>(), <span>HIGH</span>);</span><br /><span>    }</span><br /><span>  }</span><br /><span>}</span><br /></pre></td></tr></table><p>是不是很简单呢？这里首先初始化了开发板的串口，和一些 GPIO 作为输出。然后我们定义了一个通信协议：HIG00 和 LOW00 来控制 GPIO 的高低电平。注意，这里开发板在初始化后会立即发送一个 OK 信息，这是因为 Arduino UNO 会在串口连接上时<a href="https://playground.arduino.cc/Main/DisablingAutoResetOnSerialConnection/">重启</a>，这个 OK 信息可以让 PC 端知道开发板已经准备好了。</p><h4><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#PC-端"></a>PC 端</h4><p>PC 这边可以用 <a href="https://pyserial.readthedocs.io/en/latest/index.html">pySerial</a> 这个包，当开发板连接上 PC 或者 Mac 之后，会显示为 COM* 或者 /dev/tty* 设备。pySerial 也有 <code>serial.tools.list_ports.comports()</code> API 可以列出所有的串口设备，我们可以通过一些条件找到 Arduino：</p><p><a href="https://github.com/binux/cat-planet-bot/blob/main/arduino.py">https://github.com/binux/cat-planet-bot/blob/main/arduino.py</a></p><p>代码中我还实现了一些 helper function 例如 <code>throttle_press</code> 和 <code>autorelease</code> 并且记录了每个 pin 的按下状态。这些都只是为了方便，并不是必须的，串口的速率是完全足够直接发送每个指令的，并且我测试中也没有感觉到任何延迟。</p><h4><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#更多？"></a>更多？</h4><p>只要在面包板上插上更多的光耦和 Arduino GPIO 连接，然后制作更多的电极，就能支持多点触控了。但是，很明显的，这个数量是有限制的。而且无法改变点击位置，也无法实现滑动。那么有解决方案吗？我这里有一些想法：</p><p>首先，可以增加电极的数量，以至于覆盖到整个屏幕，然后在屏幕上分区分块控制每个点的电容变化。这个想法在 <a href="http://www.fpl2012.org/Presentations/PHD7.pdf">这篇论文</a> 中有描述，但是我并没有找到成品。</p><p>而另一个更可行的方案是通过机械控制触控笔，实现全屏覆盖。例如改装一个 3D 打印机，将喷头换成一只触控笔，通过 3D 打印机的精确 3 轴移动来模拟点击。这个方案的好处在于 3D 打印机是一个非常便宜的成品，省去了零散零件采购的成本，而且很多 3D 打印机的固件是开源的，可以很容易地通过 <a href="https://en.wikipedia.org/wiki/G-code">G-code</a> 操作。</p><h3><a href="https://binux.blog/2022/08/cat-planet-bot-part-1-touch-simulation/#总结"></a>总结</h3><p>到这里，我们就打通了 PC 到平板的物理触控了。使用这些东西，就可以开发一些固定的自动化脚本了，例如下面这个脚本每次执行，自动按了 99 次 +10 然后购买：</p><p></p><p>在使用中，有一些影响触控成功率的经验：</p><ol><li>在安装电极后，需要关闭屏幕再打开。（刚安装上的贴片，无论是否接地都会被检测为按下，重启屏幕可以将这个状态重置为抬起，这样接地时改变的电容就会检测为按下了。）</li><li>将平板接上电源效果会更好。（这样可以给平板接地，类似你手持平板的状态。但是并不需要和 Arduino 接在一起。）</li><li>我在电极和地之间接了一个电阻，可见导线的长度并没有关系。不需要担心导线太长产生的电容。</li></ol>]]></content:encoded>
            
        </item>
        
        <item>
            <title>在 Proxmox VE 上使用 LXC 建置 UU 加速器</title>
            <link>https://asaba.sakuragawa.moe/2022/08/%e5%9c%a8-proxmox-ve-%e4%b8%8a%e4%bd%bf%e7%94%a8-lxc-%e5%bb%ba%e7%bd%ae-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2022/08/%e5%9c%a8-proxmox-ve-%e4%b8%8a%e4%bd%bf%e7%94%a8-lxc-%e5%bb%ba%e7%bd%ae-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8</guid>
            <pubDate>Tue, 23 Aug 2022 18:39:53 +0000</pubDate>
            <description>
                
                               本篇爲「家庭網路」系列第 15 篇（全 15 篇）。                         入手 Linksys WRT1900AC 作爲 AP，刷 DD-WRT 固件          闖入聯通定製烽火 HG220G-U（WO-36） 
                
            </description>
            
            <content:encoded><![CDATA[<div>
			
	
	
		<p>
			本篇爲「<em>家庭網路</em>」系列第 15 篇（全 15 篇）。		</p>
			

			<div>
			<ol>
									<li><a href="https://asaba.sakuragawa.moe/2017/12/%e5%85%a5%e6%89%8b-linksys-wrt1900ac-%e4%bd%9c%e7%88%b2-ap%ef%bc%8c%e5%88%b7-dd-wrt-%e5%9b%ba%e4%bb%b6/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">入手 Linksys WRT1900AC 作爲 AP，刷 DD-WRT 固件</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2017/12/%e9%97%96%e5%85%a5%e8%81%af%e9%80%9a%e5%ae%9a%e8%a3%bd%e7%83%bd%e7%81%ab-hg220g-u%ef%bc%88wo-36%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">闖入聯通定製烽火 HG220G-U（WO-36）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%a8%88%e5%8a%83/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：計劃</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%bb%9f%e9%ab%94/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：軟體</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%a3%9d%e6%a9%9f/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：裝機</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/02/%e5%9c%a8%e5%9c%8b%e7%a7%91%e5%a4%a7%ef%bc%88ucas%ef%bc%89%e5%ae%bf%e8%88%8d%e9%85%8d%e7%bd%ae-ipv6-%e7%a9%bf%e9%80%8f/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">在國科大（UCAS）宿舍配置 IPv6 穿透</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/03/%e6%96%90%e8%a8%8a-k3-%e4%b8%8a%e8%bb%8a%ef%bc%8c%e9%96%8b%e5%95%93-telnet%e3%80%81%e5%88%b7%e5%b7%b2-root-%e7%89%88%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6%e5%92%8c-merlin/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">斐訊 K3 上車，開啓 Telnet、刷已 Root 版官方固件和 Merlin</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/03/%e4%bd%bf%e7%94%a8-bind9-%e5%bb%ba%e7%bd%ae%e6%b7%b7%e5%90%88-dns%ef%bc%88response-policy-zone%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">使用 bind9 建置混合 DNS（Response Policy Zone）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/%e6%96%90%e8%a8%8a-k2t-%e9%96%8b%e7%ae%b1%e8%88%87%e5%8b%95%e6%89%8b%e8%89%b9%ef%bc%88%e5%8b%95%e6%89%8b%e7%8e%a9%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">斐訊 K2T 開箱與動手艹（動手玩）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/huawei-b315s-936-4g-lte-cpe-%e9%96%8b%e7%ae%b1%e8%88%87%e5%8b%95%e6%89%8b%e7%8e%a9/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">Huawei B315s-936 4G LTE CPE 開箱與動手玩</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/%e9%80%8f%e9%81%8e-vlan-%e5%be%9e%e4%b8%8d%e5%90%8c%e5%87%ba%e5%8f%a3%e7%8d%b2%e5%be%97-ipv4-ipv6-%e6%a7%8b%e5%bb%ba%e9%9b%99%e6%a3%a7%e7%b6%b2%e8%b7%af/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">透過 VLAN 從不同出口獲得 IPv4/IPv6 地址構建雙棧網路</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2020/02/%e9%97%9c%e6%96%bc%e5%8d%8a%e5%a4%9c%e8%89%b9%e8%b2%93%e7%9a%84%e9%80%99%e6%aa%94%e4%ba%8b%ef%bc%9a%e4%b8%ad%e8%88%88-zte-zxhn-f677v2-ont-%e8%a8%ad%e5%ae%9a%e6%a9%8b%e6%8e%a5/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">關於半夜艹貓的這檔事：中興 ZTE ZXHN F677V2 ONT 設定橋接</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2021/01/%e4%bf%ae%e5%be%a9-openwrt-%e4%b8%8a-clash%ef%bc%88openclash%ef%bc%89%e5%bd%b1%e9%9f%bf-port-forwarding-%e7%9a%84%e5%95%8f%e9%a1%8c/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">修復 OpenWRT 上 Clash（OpenClash）影響 Port Forwarding 的問題</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2021/10/%e5%9c%a8-openwrt-%e4%b8%8a%e6%ad%a3%e7%a2%ba%e9%96%8b%e5%95%93%e7%b6%b2%e6%98%93-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">在 OpenWRT 上正確開啓網易 UU 加速器</a></li>
									<li><span>在 Proxmox VE 上使用 LXC 建置 UU 加速器</span></li>
							</ol>
		</div>
	</div>

<p>網易的 <a href="https://uu.163.com/router/direction.html" data-type="URL" data-id="https://uu.163.com/router/direction.html" target="_blank">UU 路由器插件</a>支援 Merlin、小米路由器和 OpenWRT。但是如果沒有支援的路由器如何使用呢？開 VM 是最簡單的方式，先前也<a href="https://asaba.sakuragawa.moe/2021/10/%e5%9c%a8-openwrt-%e4%b8%8a%e6%ad%a3%e7%a2%ba%e9%96%8b%e5%95%93%e7%b6%b2%e6%98%93-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/" data-type="post" data-id="2380" target="_blank">分享過一些技巧</a>。容器作法也已經有<a href="https://github.com/DianQK/uuplugin">現成的工作</a>可以使用。不過在 Proxmox VE 上還可以使用 Linux 容器單獨運行 OpenWRT。</p>



<h2><a href="https://markdown.sakuragawa.moe/-EOu9OJBRcSlLdaR-pYFQA?view#%E5%BB%BA%E7%AB%8B-lxc-%E5%AE%B9%E5%99%A8"></a>建立 LXC 容器</h2>



<p>OpenWRT 現時已經提供了<a href="https://images.linuxcontainers.org/images/openwrt/" target="_blank">官方的 rootfs</a>，直接下載就可以使用了。不過由於 Proxmox VE 上的 LXC 作業系統類型未有預設 OpenWRT，所以需要在命令列下建立容器：</p>



<pre><code>export CTID=2000
pct create ${CTID} \
    /path/to/storage/template/cache/openwrt-21.02-amd64.tar.xz \
    --hostname openwrt-uu
    --rootfs local-lvm:1 \
    --cores 1 \
    --memory 512 \
    --arch amd64 \
    --ostype unmanaged \
    --unprivileged 0
pct set ${CTID} --net0 name=eth0,bridge=vmbr0,ip=manual</code></pre>



<p>注意：由於容器後續需要使用 TUN 裝置，所以<strong>需要是特權容器</strong>（<code>--unprivileged 0</code>）。至於其他部分則是看需求而定。</p>



<p>然後爲容器新增 TUN 裝置，編輯 <code>/etc/pve/lxc/${CTID}.conf</code> 加入以下行：</p>



<pre><code>lxc.cgroup2.devices.allow: c 10:200 rwm
lxc.hook.autodev: sh -c "modprobe tun; cd ${LXC_ROOTFS_MOUNT}/dev; mkdir net; mknod net/tun c 10 200; chmod 0666 net/tun"</code></pre>



<p>此時容器已經準備好，可以啓動了。</p>



<h2><a href="https://markdown.sakuragawa.moe/-EOu9OJBRcSlLdaR-pYFQA?view#%E8%A8%AD%E5%AE%9A%E7%B6%B2%E8%B7%AF"></a>設定網路</h2>



<p>啓動容器後，OpenWRT 預設是從 DHCP 獲得 IP 位置的，並且預設的網路介面劃定爲 WAN 區域。由於 UU 加速器需要 <code>br-lan</code> 接口，爲了方便後續設定，編輯 <code>/etc/config/network</code> 以調整 OpenWRT 的網路設定：</p>



<pre><code>config interface 'loopback'
	option proto 'static'
	option ipaddr '127.0.0.1'
	option netmask '255.0.0.0'
	option device 'lo'
	option ifname 'lo'

config interface 'lan'
	option type 'bridge'
	option ifname 'eth0'
	option proto 'static'
	option ipaddr '{{UU_LAN_IPADDR}}'
	option gateway '{{UU_LAN_GATEWAY}}'
	option netmask '{{UU_LAN_NETMASK}}'</code></pre>



<p>同時編輯 <code>/etc/config/dhcp</code> 關閉掉接口上的 DHCP：</p>



<pre><code>config dhcp 'lan'
        option interface 'lan'
        option ignore '1'
        option ra_management '0'</code></pre>



<p>重新啓動容器，然後安裝 UU 路由器插件及第三方的 LuCI 管理介面：</p>



<pre><code>opkg update
opkg install ca-certificates kmod-tun
opkg install uugamebooster luci-app-uugamebooster luci-i18n-uugamebooster-zh-cn</code></pre>



<p>出於保險考慮，可以禁用掉防火牆之類的無關服務：</p>



<pre><code>/etc/init.d/firewall disable
/etc/init.d/odhcpd disable</code></pre>



<p>最後開啓 UU 加速器：</p>



<pre><code>uci set uuplugin.uuplugin.enabled='1'
/etc/init.d/uuplugin enable
/etc/init.d/uuplugin start</code></pre>



<h2><a href="https://markdown.sakuragawa.moe/-EOu9OJBRcSlLdaR-pYFQA?view#%E4%BD%BF%E7%94%A8-uu-%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8B%99"></a>使用 UU 加速服務</h2>



<p>在 DHCP 伺服器上，爲遊戲主機下發特定的設定檔，將閘道器和 DNS 設定為容器的 IP。同時，在手機上的「UU 主機加速」應用程式中綁定路由器插件前，需要將手機閘道器和 DNS 也設定爲容器的 IP；綁定完畢後，可以改回原來的設定。設定完成後，打開「UU 主機加速」應用程式即可看到裝置出現，正常操作加速即可。</p>


<div>
<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/08/cgi-bin_luci_admin_services_uuplugin.png" />第三方的 LuCI 管理介面</div>


<h2><a href="https://markdown.sakuragawa.moe/-EOu9OJBRcSlLdaR-pYFQA?view#%E9%96%B1%E8%AE%80%E6%9B%B4%E5%A4%9A"></a>閱讀更多</h2>



<ul><li><a href="https://openwrt.org/docs/guide-user/virtualization/lxc" target="_blank">OpenWrt in LXC containers</a></li></ul>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2022%2F08%2F%25e5%259c%25a8-proxmox-ve-%25e4%25b8%258a%25e4%25bd%25bf%25e7%2594%25a8-lxc-%25e5%25bb%25ba%25e7%25bd%25ae-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%25259c%2525a8-proxmox-ve-%2525e4%2525b8%25258a%2525e4%2525bd%2525bf%2525e7%252594%2525a8-lxc-%2525e5%2525bb%2525ba%2525e7%2525bd%2525ae-uu-%2525e5%25258a%2525a0%2525e9%252580%25259f%2525e5%252599%2525a8&amp;action_name=%E5%9C%A8+Proxmox+VE+%E4%B8%8A%E4%BD%BF%E7%94%A8+LXC+%E5%BB%BA%E7%BD%AE+UU+%E5%8A%A0%E9%80%9F%E5%99%A8&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2763" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="2763" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>【2022 秋招内推】阿里云后端研发工程师</title>
            <link>https://www.ohyee.cc/post/writting_aliyun_2022_qiuzhaoi</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_aliyun_2022_qiuzhaoi</guid>
            <pubDate>Mon, 22 Aug 2022 04:16:02 +0000</pubDate>
            <description>
                
                null
                
            </description>
            
            <content:encoded><![CDATA[null]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用函数计算获取 IP 地址信息</title>
            <link>https://www.ohyee.cc/post/note_fc_ip</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_fc_ip</guid>
            <pubDate>Sat, 06 Aug 2022 09:55:08 +0000</pubDate>
            <description>
                
                根据 IP 获取地区信息
                
            </description>
            
            <content:encoded><![CDATA[根据 IP 获取地区信息]]></content:encoded>
            
        </item>
        
        <item>
            <title>正确获取客户端 IP/HTTP Header 也可能重复</title>
            <link>https://www.ohyee.cc/post/note_repeat_headers</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_repeat_headers</guid>
            <pubDate>Sat, 06 Aug 2022 09:30:44 +0000</pubDate>
            <description>
                
                博客支持 IP 地区显示的遇到的 BUG
                
            </description>
            
            <content:encoded><![CDATA[博客支持 IP 地区显示的遇到的 BUG]]></content:encoded>
            
        </item>
        
        <item>
            <title>斷捨離 | 再見，如果你不那麼 Pro：紅米 Redmi K40 Pro 一年經驗談</title>
            <link>https://asaba.sakuragawa.moe/2022/07/%e6%96%b7%e6%8d%a8%e9%9b%a2-%e5%86%8d%e8%a6%8b%ef%bc%8c%e5%a6%82%e6%9e%9c%e4%bd%a0%e4%b8%8d%e9%82%a3%e9%ba%bc-pro%ef%bc%9a%e7%b4%85%e7%b1%b3-redmi-k40-pro-%e4%b8%80%e5%b9%b4%e7%b6%93%e9%a9%97/?pk_campaign=feed&amp;pk_kwd=%25e6%2596%25b7%25e6%258d%25a8%25e9%259b%25a2-%25e5%2586%258d%25e8%25a6%258b%25ef%25bc%258c%25e5%25a6%2582%25e6%259e%259c%25e4%25bd%25a0%25e4%25b8%258d%25e9%2582%25a3%25e9%25ba%25bc-pro%25ef%25bc%259a%25e7%25b4%2585%25e7%25b1%25b3-redmi-k40-pro-%25e4%25b8%2580%25e5%25b9%25b4%25e7%25b6%2593%25e9%25a9%2597</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2022/07/%e6%96%b7%e6%8d%a8%e9%9b%a2-%e5%86%8d%e8%a6%8b%ef%bc%8c%e5%a6%82%e6%9e%9c%e4%bd%a0%e4%b8%8d%e9%82%a3%e9%ba%bc-pro%ef%bc%9a%e7%b4%85%e7%b1%b3-redmi-k40-pro-%e4%b8%80%e5%b9%b4%e7%b6%93%e9%a9%97/?pk_campaign=feed&amp;pk_kwd=%25e6%2596%25b7%25e6%258d%25a8%25e9%259b%25a2-%25e5%2586%258d%25e8%25a6%258b%25ef%25bc%258c%25e5%25a6%2582%25e6%259e%259c%25e4%25bd%25a0%25e4%25b8%258d%25e9%2582%25a3%25e9%25ba%25bc-pro%25ef%25bc%259a%25e7%25b4%2585%25e7%25b1%25b3-redmi-k40-pro-%25e4%25b8%2580%25e5%25b9%25b4%25e7%25b6%2593%25e9%25a9%2597</guid>
            <pubDate>Sat, 23 Jul 2022 14:33:06 +0000</pubDate>
            <description>
                
                    儘管大家對於紅米 Redmi K40 系列褒貶不一，但其熱度無疑是足夠的。整個系列之中，定位最低的 K40 （在一系列優惠之後）是最受歡迎的。但是定位夾在中間的 K40 Pro 則在核心部分有諸多升級：    SoC 由 Snapdragon 870 更換爲 Snapd
                
            </description>
            
            <content:encoded><![CDATA[<h6><a href="https://markdown.sakuragawa.moe/U3deInS4RkesfV2QJq34UA?view#tags-draft-blog"></a></h6>



<p>儘管大家對於紅米 Redmi K40 系列褒貶不一，但其熱度無疑是足夠的。整個系列之中，定位最低的 K40 （在一系列優惠之後）是最受歡迎的。但是定位夾在中間的 K40 Pro 則在核心部分有諸多升級：</p>



<ul><li>SoC 由 Snapdragon 870 更換爲 Snapdragon 888</li><li>主鏡頭由 IMX582 提升到 IMX686 感測器（<em>f</em> = 1/1.89）</li><li>Wi-Fi 6E</li></ul>



<p>整體來看，除去 SoC 的升級外，其他方面可感知的改進不多。但考慮到 SD870 無法兩張 SIM 卡同時 5G 駐網，再加上 K40 在發表之後一時竟難以購買，浅羽最終還是選擇了「比較 Pro」的 K40 Pro。</p>



<p>浅羽是將 K40 Pro 作工具機用，主要解決電話、簡訊、地圖和支付功能。從這個角度出發，K40 Pro 應該說<strong>該有的功能都不缺</strong>，而且<strong>重量控制尚可</strong>；至於飽受詬病的塑料邊框，實際的質感也並不差，並且外觀上可以做到無斷點。K40 Pro 全系列都是使用了側邊指紋辨識，對於浅羽這種<s>老索狗</s> Sony 老用家來說很是得討喜。側邊指紋辨識的好處之一是有準確的位置標識，並且兼顧靈敏與準確，實際體驗比 Xperia 的指紋辨識還是好不少。號稱「最小」的前鏡頭打孔確實很小，且周圍沒有額外一圈黑色區域；相比之下，小米 11 系列、小米 10S 和小米 Civi 反而都沒有做到。</p>



<p>當然，作爲一款「廉價」機種，K40 Pro 也有不少缺點──甚至可以說拿着好的硬體做着極差的體驗。首先是飽受詬病的 SD888 發熱問題，以 K40 Pro 上的散熱自然是無法完全發揮其效能。不過浅羽對於 K40 Pro 的定位就是電話支付機，極少使用它玩大型遊戲，倒也還算流暢。這當然同時也得益於宣傳的「三星 E4 AMOLED 硬性螢幕」的 120Hz 刷新率。不過，這片螢幕也僅有 1920×1080 的解析度，無硬體 DC 調光功能，久看易累不知是否於此有關；系統中也有原色顯示功能，但<strong>對於外部色溫的測定不準確，容易忽冷忽暖</strong>。</p>



<p>背面的一片霧面處理的玻璃算是外觀上的一大賣點，但是非常<strong>不耐刮擦</strong>，<strong>容易劃傷</strong>。浅羽剛拿到幾日就在擦拭灰塵時就不慎刮出幾道淺印，好在後來貼了保護貼後就看不出來了。而且有了好的先天條件卻沒有無線充電，<strong>有線充電也只給到 33W 的功率</strong>，應該是受限制於定位了。好在 NFC 和紅外都完整保留，這也算是小米（紅米）手機的保留項目了。</p>


<div>
<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/07/IMG_20220723_154121-scaled.jpg" />框內爲擦拭灰塵時不慎刮出的淺印</div>


<p>最後在相機的方面。廣角加上超廣角的組合僅僅是保證能影到相，兩顆鏡頭都沒有 OIS，所以低光下基本也不用想什麼。另外，主鏡頭是 64MP（日常使用開啓 4-in-1 拍攝 12MP 相片），浅羽用得更多超廣角的畫素卻只給到 8MP。倒是附贈一顆 5MP 微距镜头頗爲有趣，用來拍攝細緻的貓咪皮膚紋理還是很好用的。浅羽其實對這部份不太在意，因爲影相還是用相機或者 instax 比較多，手機嘛可以記錄到就好了。</p>



<p>至於最終換掉它的理由也很樸素：強迫症浅羽不太喜歡螢幕上打孔……然後機緣巧合就換了屏下鏡頭的手機。閒置之後，浅羽開始思考給 K40 Pro 換個系統當作玩樂機，結果發現選擇寥寥無幾（截止 2022 年 2 月──是的，這篇網誌拖了半年）；對比之下，去掉 Pro 的 K40 選擇則多了不少。這也從一個側面反應了不同機種的熱度差別。最終在新舊手機的過渡期結束時候，還是決定「手機不需要可以給有需要的人」，最終以首發價 45% off 轉讓了它。</p>


<div>
<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/07/IMG_20220723_154353-4096x2304.jpg" />最後看一眼（沒有本體的）全家福</div>


<p>如果是 K40 代表的是極致的 C/P 值，對比之下 K40 Pro 就顯得有些尷尬了。背負了 Pro 之名的它既要做得更好、卻處處受限於品牌定位不能做到最好。這種「帶着鐐銬跳舞」的做法，不但考驗着廠牌如何做取捨，更考驗用家如何說服自己去接受一些不完美。也許想真正接受這樣的不完美，只有把付出的代價和期望都降低——比如，如果 K40 Pro 沒有那麼 Pro。</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2022%2F07%2F%25e6%2596%25b7%25e6%258d%25a8%25e9%259b%25a2-%25e5%2586%258d%25e8%25a6%258b%25ef%25bc%258c%25e5%25a6%2582%25e6%259e%259c%25e4%25bd%25a0%25e4%25b8%258d%25e9%2582%25a3%25e9%25ba%25bc-pro%25ef%25bc%259a%25e7%25b4%2585%25e7%25b1%25b3-redmi-k40-pro-%25e4%25b8%2580%25e5%25b9%25b4%25e7%25b6%2593%25e9%25a9%2597%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e6%252596%2525b7%2525e6%25258d%2525a8%2525e9%25259b%2525a2-%2525e5%252586%25258d%2525e8%2525a6%25258b%2525ef%2525bc%25258c%2525e5%2525a6%252582%2525e6%25259e%25259c%2525e4%2525bd%2525a0%2525e4%2525b8%25258d%2525e9%252582%2525a3%2525e9%2525ba%2525bc-pro%2525ef%2525bc%25259a%2525e7%2525b4%252585%2525e7%2525b1%2525b3-redmi-k40-pro-%2525e4%2525b8%252580%2525e5%2525b9%2525b4%2525e7%2525b6%252593%2525e9%2525a9%252597&amp;action_name=%E6%96%B7%E6%8D%A8%E9%9B%A2+%7C+%E5%86%8D%E8%A6%8B%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E9%82%A3%E9%BA%BC+Pro%EF%BC%9A%E7%B4%85%E7%B1%B3+Redmi+K40+Pro+%E4%B8%80%E5%B9%B4%E7%B6%93%E9%A9%97%E8%AB%87&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2711" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="2711" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>评测 Oculus Quest2 及 BigScreen</title>
            <link>https://www.ohyee.cc/post/evaluation_quest2_with_bigscreen</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_quest2_with_bigscreen</guid>
            <pubDate>Tue, 28 Jun 2022 17:51:20 +0000</pubDate>
            <description>
                
                一个值得一试的 idea——使用 VR 眼镜来替代多显示分屏
                
            </description>
            
            <content:encoded><![CDATA[一个值得一试的 idea——使用 VR 眼镜来替代多显示分屏]]></content:encoded>
            
        </item>
        
        <item>
            <title>NextJS 热重载保留状态</title>
            <link>https://www.ohyee.cc/post/note_cache_variables_for_hotload</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_cache_variables_for_hotload</guid>
            <pubDate>Wed, 22 Jun 2022 17:36:13 +0000</pubDate>
            <description>
                
                js 热重载时保留 cache
                
            </description>
            
            <content:encoded><![CDATA[js 热重载时保留 cache]]></content:encoded>
            
        </item>
        
        <item>
            <title>如何优雅地贴 gist 代码</title>
            <link>https://www.ohyee.cc/post/note_paste_gist_gracefully</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paste_gist_gracefully</guid>
            <pubDate>Wed, 22 Jun 2022 16:12:17 +0000</pubDate>
            <description>
                
                优雅使用 gist
                
            </description>
            
            <content:encoded><![CDATA[优雅使用 gist]]></content:encoded>
            
        </item>
        
        <item>
            <title>Linux 精细化文件权限</title>
            <link>https://www.ohyee.cc/post/note_linux_acl</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_linux_acl</guid>
            <pubDate>Mon, 13 Jun 2022 04:17:12 +0000</pubDate>
            <description>
                
                null
                
            </description>
            
            <content:encoded><![CDATA[null]]></content:encoded>
            
        </item>
        
        <item>
            <title>從 DSM 6 更新到 DSM 7（DS119j/DS120j）</title>
            <link>https://asaba.sakuragawa.moe/2022/05/%e5%be%9e-dsm-6-%e6%9b%b4%e6%96%b0%e5%88%b0-dsm-7%ef%bc%88ds119j-ds120j%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%25be%259e-dsm-6-%25e6%259b%25b4%25e6%2596%25b0%25e5%2588%25b0-dsm-7%25ef%25bc%2588ds119j-ds120j%25ef%25bc%2589</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2022/05/%e5%be%9e-dsm-6-%e6%9b%b4%e6%96%b0%e5%88%b0-dsm-7%ef%bc%88ds119j-ds120j%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%25be%259e-dsm-6-%25e6%259b%25b4%25e6%2596%25b0%25e5%2588%25b0-dsm-7%25ef%25bc%2588ds119j-ds120j%25ef%25bc%2589</guid>
            <pubDate>Sat, 21 May 2022 14:53:51 +0000</pubDate>
            <description>
                
                DSM 7 已經釋出一段時間了，但是大量的新功能都屬於「買多一臺」系列，對浅羽來說不是很有吸引力。不過考慮到更好看的用戶介面以及整合的 Synology Drive，趁得閒還是升級一下好了。    Entware 環境    Synology 暫未向 ARM 機種提供 Cont
                
            </description>
            
            <content:encoded><![CDATA[<p>DSM 7 已經釋出一段時間了，但是大量的新功能都屬於「買多一臺」系列，對浅羽來說不是很有吸引力。不過考慮到更好看的用戶介面以及整合的 <strong>Syno</strong>logy Drive，趁得閒還是升級一下好了。</p>



<h2><a href="https://markdown.sakuragawa.moe/6niu1SJCQHeEenknfdBDXA?both#entware"></a>Entware 環境</h2>



<p><strong>Syno</strong>logy 暫未向 ARM 機種提供 Container Station，但浅羽需要使用一些第三方套件，因此只能透過 Entware 安裝。浅羽的 Entware 是在 DSM 6 時安裝的，更新至 DSM 7 後可以繼續使用，無需額外操作。更新完成後，iPKGui 等相關套件會提示損壞，但是無需理會；而且 <code>opkg</code> 是可以正常使用的。</p>



<img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/05/網頁擷取_21-5-2022_224243_skg-pt-01.ad_.sakuragawa.cloud_.jpeg" />



<p>由於 <a href="https://www.cphub.net/?p=ebi" target="_blank">Easy Bootstrap Installer</a> 需要使用 root 權限，所以暫時無法正常使用。不過仍然可以<a href="https://github.com/Entware/Entware/wiki/Install-on-Synology-NAS" target="_blank">在 DSM 7 上手動安裝</a>。</p>



<h2>網路影像錄影機功能</h2>



<p>剛完成更新時，Surveilance Station 還停留在版本 8 上，套件中心也未能檢測到新版本，於是只好<a href="https://archive.synology.com/download/Package/SurveillanceStation" target="_blank">自己下載 SPK 包</a>安裝。DSM 7 中似乎取消了 <code>armada37xx</code> 架構，安裝 <code>armv8</code> 的 SPK 包即可。</p>



<p>Surveillance Station 9 更新了 DSM 7 風格的用戶介面，並且整合了實時監看和回放功能，不過需要搭配 2.0 版本以上的 Surveillance Station Client。新版本的 Client 的用戶介面也變得更加現代了。但更新到 DSM 7.1 後，H.265 的相關授權轉移到 <a href="https://www.synology.com/zh-tw/dsm/7.1/software_spec/advanced_media_extensions" target="_blank">Advanced Media Extensions</a> 內，並且<strong>要求登入 Synology 賬戶後才能安裝 HEVC codec pack</strong>。如果有需要使用 H.265 編碼但介意登入 Synology 的賬戶的話謹慎更新。</p>



<h2><a href="https://markdown.sakuragawa.moe/6niu1SJCQHeEenknfdBDXA?both#%E5%AE%98%E6%96%B9%E5%A5%97%E4%BB%B6"></a>官方套件</h2>



<p>有部分套件未能隨 DSM 更新而更新，浅羽這邊就遇到 Cloud Sync 一例。這些套件在套件中心中顯示爲「已安裝」，但無法開啓。從套件中心中移除（選擇<em>保留資料庫</em>）、重新安裝以後，就可以正常開啓、使用了。</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2022%2F05%2F%25e5%25be%259e-dsm-6-%25e6%259b%25b4%25e6%2596%25b0%25e5%2588%25b0-dsm-7%25ef%25bc%2588ds119j-ds120j%25ef%25bc%2589%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%2525be%25259e-dsm-6-%2525e6%25259b%2525b4%2525e6%252596%2525b0%2525e5%252588%2525b0-dsm-7%2525ef%2525bc%252588ds119j-ds120j%2525ef%2525bc%252589&amp;action_name=%E5%BE%9E+DSM+6+%E6%9B%B4%E6%96%B0%E5%88%B0+DSM+7%EF%BC%88DS119j%2FDS120j%EF%BC%89&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2601" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="2601" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>VSCode 容器开发环境</title>
            <link>https://www.ohyee.cc/post/note_vscode_container_remote</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_vscode_container_remote</guid>
            <pubDate>Wed, 18 May 2022 18:10:22 +0000</pubDate>
            <description>
                
                使用 Remote Docker 构建干净的开发环境及 Remote SSH + Remote Container 双重 Buff
                
            </description>
            
            <content:encoded><![CDATA[使用 Remote Docker 构建干净的开发环境及 Remote SSH + Remote Container 双重 Buff]]></content:encoded>
            
        </item>
        
        <item>
            <title>我丢失了一位朋友</title>
            <link>https://icebound.cc/2022/05/14/lost_friend.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/05/14/lost_friend.html</guid>
            <pubDate>Sat, 14 May 2022 10:56:36 +0000</pubDate>
            <description>
                
                当然，是我又一次和朋友闹掰了。 当然，事情的起因经过结果也都是因为我自己。 在很多人眼里，看上去什么也没有发生 […] The post 我丢失了一位朋友 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>当然，是我又一次和朋友闹掰了。 当然，事情的起因经过结果也都是因为我自己。 在很多人眼里，看上去什么也没有发生 […]</p>
<p>The post <a href="https://icebound.cc/2022/05/14/lost_friend.html">我丢失了一位朋友</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>Clash 的不兼容更新排查</title>
            <link>https://www.ohyee.cc/post/note_clash_breaking_update</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_clash_breaking_update</guid>
            <pubDate>Sat, 07 May 2022 16:37:50 +0000</pubDate>
            <description>
                
                同一个线路，V2Ray 可以用，Clash 不能用
                
            </description>
            
            <content:encoded><![CDATA[同一个线路，V2Ray 可以用，Clash 不能用]]></content:encoded>
            
        </item>
        
        <item>
            <title>WordPress 子主题</title>
            <link>https://www.whosneo.com/wordpress-child-theme/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/wordpress-child-theme/</guid>
            <pubDate>Fri, 29 Apr 2022 14:29:59 +0000</pubDate>
            <description>
                
                为了能对 WordPress 的主题自定义，有时候会对主题文件进行编辑；但如果遇到主题文件有升级，则修改的内容便会丢失。若想保持自己的修改不受主题升级影响，则可考虑使用 WordPress 的子主题功能。 创建子主题文件夹 第一步则是在 wp-content/themes 下创
                
            </description>
            
            <content:encoded><![CDATA[<p>为了能对 WordPress 的主题自定义，有时候会对主题文件进行编辑；但如果遇到主题文件有升级，则修改的内容便会丢失。若想保持自己的修改不受主题升级影响，则可考虑使用 WordPress 的子主题功能。<span></span></p>
<h2>创建子主题文件夹</h2>
<p>第一步则是在 <code>wp-content/themes</code> 下创建子主题文件夹，为了方便，名称最好是在原主题文件夹名称后加上 <code>-child</code>，以 Twenty Twelve 主题为例，子主题文件夹最好是 <code>twentytwelve-child</code>，以下涉及到的文件都在子主题文件夹内。</p>
<h2>创建样式表 style.css</h2>
<p>接下来需要创建名为 <code>style.css</code> 的样式表文件，文件的开头需要有以下格式的内容，以便 WordPress 能正确识别这是一个子主题。</p>
<pre><code>/*
Theme Name:     Twenty Twelve Child
Description:    Child theme for Twenty Twelve
Author:         Neo
Author URI:     https://www.whosneo.com/about/
Template:       twentytwelve
Version:        0.1.0
*/
</code></pre>
<p>其中，有几项是必不可少的：<br />
– <strong>Theme Name</strong> – 主题名称不可与其他主题相同<br />
– <strong>Template</strong> – 父主题的文件夹名称</p>
<p>其余的信息可以选择性的添加。虽然子主题可以只有一个 <code>style.css</code> 样式表文件，但是不能缺了 <code>functions.php</code>，否则便无法正确加载样式。</p>
<h2>装载样式</h2>
<p>最后一步便是装载父主题和子主题的样式了。</p>
<blockquote><p>
  以前通用的做法是在 <code>style.css</code> 文件中使用 <code>@import</code> 引入父主题的样式，但现在已经不再推荐使用，因为这会增加样式加载时间，也有可能造成父主题样式重复加载。
</p></blockquote>
<p>装载主题推荐的方法就是在子主题的 <code>functions.php</code> 文件中增加一个 <code>wp_enqueue_scripts</code> 动作，并使用 <code>wp_enqueue_style()</code> 函数。如果不存在 <code>functions.php</code> 文件，则创建。同时不要忘了。所有的 php 代码都需要用 php 标签包围起来<code>&lt;?php 👻 ?&gt;</code>。</p>
<pre><code>&lt;?php
add_action( 'wp_enqueue_scripts', 'enqueue_parent_styles' );
function enqueue_parent_styles() {
    $theme = wp_get_theme();
    wp_enqueue_style( 'parent-style', get_template_directory_uri() . '/style.css', array(), $theme-&gt;parent()-&gt;get('Version') );
    wp_enqueue_style( 'child-style', get_stylesheet_uri(), array( 'parent-style' ), $theme-&gt;get('Version') );
}
?&gt;
</code></pre>
<h2>安装激活子主题</h2>
<p>在后台管理 &gt; 外观 &gt; 主题 中，激活你的子主题即可。</p>
<h2>添加模版文件</h2>
<p>除了上面提到的  <code>style.css</code>  <code>functions.php</code> 文件之外，添加的其他任何文件都会覆盖父主题的同名文件。例如你想修改父主题的页脚，就可以复制 <code>footer.php</code> 文件到子主题文件夹中进行修改。修改完成后，刷新页面就可以看到修改效果了。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>Zeek 导出 PCAP</title>
            <link>https://www.ohyee.cc/post/note_zeek_extract_pcap</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_zeek_extract_pcap</guid>
            <pubDate>Thu, 28 Apr 2022 03:50:34 +0000</pubDate>
            <description>
                
                null
                
            </description>
            
            <content:encoded><![CDATA[null]]></content:encoded>
            
        </item>
        
        <item>
            <title>记一次 ssh 配置问题</title>
            <link>https://www.ohyee.cc/post/note_ssh_bash</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_ssh_bash</guid>
            <pubDate>Mon, 25 Apr 2022 15:59:22 +0000</pubDate>
            <description>
                
                记一次由于错误配置 .bashrc 导致无法 ssh 进入服务器
                
            </description>
            
            <content:encoded><![CDATA[记一次由于错误配置 .bashrc 导致无法 ssh 进入服务器]]></content:encoded>
            
        </item>
        
        <item>
            <title>備用機，還是第二支手機？</title>
            <link>https://asaba.sakuragawa.moe/2022/04/%e5%82%99%e7%94%a8%e6%a9%9f%ef%bc%8c%e9%82%84%e6%98%af%e7%ac%ac%e4%ba%8c%e6%94%af%e6%89%8b%e6%a9%9f%ef%bc%9f/?pk_campaign=feed&amp;pk_kwd=%25e5%2582%2599%25e7%2594%25a8%25e6%25a9%259f%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e7%25ac%25ac%25e4%25ba%258c%25e6%2594%25af%25e6%2589%258b%25e6%25a9%259f%25ef%25bc%259f</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2022/04/%e5%82%99%e7%94%a8%e6%a9%9f%ef%bc%8c%e9%82%84%e6%98%af%e7%ac%ac%e4%ba%8c%e6%94%af%e6%89%8b%e6%a9%9f%ef%bc%9f/?pk_campaign=feed&amp;pk_kwd=%25e5%2582%2599%25e7%2594%25a8%25e6%25a9%259f%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e7%25ac%25ac%25e4%25ba%258c%25e6%2594%25af%25e6%2589%258b%25e6%25a9%259f%25ef%25bc%259f</guid>
            <pubDate>Sun, 17 Apr 2022 07:41:34 +0000</pubDate>
            <description>
                
                    近年來，越來越多的人購入了第二支手機，「備用機」這個概念也愈發流行。第二支手機用來「備用」的地方有很多，往往也是「專機專用」，區分用途。    最常見的用備用機的理由應該是「多張電話卡」了：在這個到處都要手機門號的年代，公開號碼、私人門號分開已經是再尋常不過的事情了；又
                
            </description>
            
            <content:encoded><![CDATA[<h6><a href="https://markdown.sakuragawa.moe/sMj4hNVaRB6Q-EKYzNJh3g?both#tags-draft-blog"></a></h6>



<p>近年來，越來越多的人購入了第二支手機，「備用機」這個概念也愈發流行。第二支手機用來「備用」的地方有很多，往往也是「專機專用」，區分用途。</p>



<p>最常見的用備用機的理由應該是「多張電話卡」了：在這個到處都要手機門號的年代，公開號碼、私人門號分開已經是再尋常不過的事情了；又或者<strong>一卡工作、一卡生活</strong>；再或者因爲計劃優惠，所以<strong>一卡通話、一卡流量</strong>。當電話卡越來越多，雙卡雙待不能滿足需求的時候，如果不想換「非洲之王」 TENCO 的四卡四待手機，只能多備一支手機了。多出的手機往往只用來接收簡訊或這電話驗證，。</p>



<p>隨着越來越多的屬性被附加在手機上，手機早已不是電話、簡訊能概括的了；<strong>手機之間不是相互取代的關係</strong>，而是而是漸漸地開始出現生態、區分「陣營」，被賦予更多「定位」和「屬性」，各有所長、又各有所短。往往是「大螢幕，我所欲也；單手操作，亦我所欲也」、「拍照，我所欲也；輕薄，亦我所欲也」；這種兩支手機分工合作，既佔盡了一支的優勢、又可以另一支形成互補。反而頗有一種「分久必合，合久必分」的意味了。舉例來說：一機打機、聽音樂、看影片，主打娛樂，電量隨心用；一機通話、訊息、支付，主打生活，保證全天候──這樣的「雙機黨」也是愈發常見了。近年來，手機換代很快，往往買了新款，舊的還用得好好的；如此正好以舊手機應付生活通訊，不用來回遷移和同步資料，而以新手機之最新硬體應付娛樂，可謂是兩全其美。同時，不同廠牌的手機體驗也不盡相同，兩支手機也可以作爲體驗之用、或作爲更換廠牌的過渡。更爲極端一些，有些手機遊戲會區分 iOS 和 Android 平臺的帳號，不同平臺之間帳號無法通用，也就不難理解許多用家在更換手機後依然保留另一平臺的裝置用作娛樂的現象了。也有人選擇儘量用平板解決一些需求，只把手機作爲通話和數據資料之用。這樣一直不更換的手機就是「主力機」，而時常更換的、較新的裝置反而成爲了「備用」。</p>



<p>浅羽自己也在使用多台裝置。浅羽的主要手機是 Hisense A5 Pro，它主打一塊電子紙螢幕，在戶外有絕佳的可讀性。對於浅羽來說，不出門時則將它當作傻瓜機（dumb phone）使用，大部分時候無需理會它；而出門在外時，它可以滿足最基礎的聯絡、地圖和支付需求，並且充電一次可以使用 3-4 天，無需特別計劃出門時間然後提前充好電。唯其更新率偏低、也不支援彩色顯示，因此使用其他裝置進行補充也是在所難免的。類似這樣<strong>傻瓜機爲主、其他裝置作爲補充</strong>的組合也非常常見，無論是不想頻繁充電、不想被太多訊息干擾或是踐行數位極簡主義的用家都不少。這種狀況下，其實到底哪隻手機是作爲「主力」、哪隻作爲「備用」都很難界定了。</p>



<div><img src="https://asaba.sakuragawa.moe/wp-content/uploads/2022/04/PSX_20220417_153357-2048x1152.jpg" />浅羽的兩支手機</div>



<p>最後，還聽說有人使用第二支手機的原因是工作要求：比如自己使用 iPhone，但工作運用到只能在 Android 上運行應用程式；比如自己使用其他廠牌，但是工作僱主對手機廠牌有強硬要求……這種爲了滿足某些要求而添置的手機，反倒更接近真正意義上的「備用」了──因爲不到非用不可的場合，可能不會真的去使用吧。</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2022%2F04%2F%25e5%2582%2599%25e7%2594%25a8%25e6%25a9%259f%25ef%25bc%258c%25e9%2582%2584%25e6%2598%25af%25e7%25ac%25ac%25e4%25ba%258c%25e6%2594%25af%25e6%2589%258b%25e6%25a9%259f%25ef%25bc%259f%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%252582%252599%2525e7%252594%2525a8%2525e6%2525a9%25259f%2525ef%2525bc%25258c%2525e9%252582%252584%2525e6%252598%2525af%2525e7%2525ac%2525ac%2525e4%2525ba%25258c%2525e6%252594%2525af%2525e6%252589%25258b%2525e6%2525a9%25259f%2525ef%2525bc%25259f&amp;action_name=%E5%82%99%E7%94%A8%E6%A9%9F%EF%BC%8C%E9%82%84%E6%98%AF%E7%AC%AC%E4%BA%8C%E6%94%AF%E6%89%8B%E6%A9%9F%EF%BC%9F&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2574" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>3    </span>
</div><div>
    <a data-post-id="2574" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>Git Commit 规范化工具</title>
            <link>https://www.ohyee.cc/post/note_git_commit</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_git_commit</guid>
            <pubDate>Mon, 11 Apr 2022 18:25:52 +0000</pubDate>
            <description>
                
                规范化 Git Commit 记录
                
            </description>
            
            <content:encoded><![CDATA[规范化 Git Commit 记录]]></content:encoded>
            
        </item>
        
        <item>
            <title>自动驾驶中的名词解释</title>
            <link>https://icebound.cc/2022/04/05/self-driving.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2022/04/05/self-driving.html</guid>
            <pubDate>Tue, 05 Apr 2022 12:34:07 +0000</pubDate>
            <description>
                
                上班半年多，学习到了不少东西。为了防止像之前在字节那样，跑路了之后完全忘了自己学到了些什么业务知识，在这里做一 […] The post 自动驾驶中的名词解释 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>上班半年多，学习到了不少东西。为了防止像之前在字节那样，跑路了之后完全忘了自己学到了些什么业务知识，在这里做一 […]</p>
<p>The post <a href="https://icebound.cc/2022/04/05/self-driving.html">自动驾驶中的名词解释</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>谈谈《星之卡比-探索发现》</title>
            <link>https://www.ohyee.cc/post/writting_kirby_forgotten_land</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_kirby_forgotten_land</guid>
            <pubDate>Sat, 02 Apr 2022 19:52:57 +0000</pubDate>
            <description>
                
                好游戏，以一个游戏评价；问题频发，以任天堂能力评价
                
            </description>
            
            <content:encoded><![CDATA[好游戏，以一个游戏评价；问题频发，以任天堂能力评价]]></content:encoded>
            
        </item>
        
        <item>
            <title>OpenWrt IPv6 DDNS</title>
            <link>https://www.whosneo.com/openwrt-ipv6-ddns/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/openwrt-ipv6-ddns/</guid>
            <pubDate>Mon, 28 Mar 2022 01:44:41 +0000</pubDate>
            <description>
                
                若想使用 DDNS 服务，则需要有一个自己的域名。花钱注册一个自己专属的域名是比较省心的办法，也有网站提供免费域名，但是服务不太稳定，不建议使用。本文中的例子是将域名托管在了 Cloudflare。 本文假设注册了域名 example.com，并给路由器分配一个域名 openw
                
            </description>
            
            <content:encoded><![CDATA[<p>若想使用 DDNS 服务，则需要有一个自己的域名。花钱注册一个自己专属的域名是比较省心的办法，也有网站提供免费域名，但是服务不太稳定，不建议使用。本文中的例子是将域名托管在了 Cloudflare。<span></span></p>
<p>本文假设注册了域名 example.com，并给路由器分配一个域名 openwrt1.example.com，且已经设置好该域名的 AAAA 记录为路由器的公网 IPv6 地址。</p>
<h2>安装 DDNS</h2>
<p>在 系统 – 软件 中搜索安装 <code>luci-i18n-ddns-zh-cn ddns-scripts-cloudflare bind-host ca-certificates</code>，系统会自动安装好所有的依赖。</p>
<h2>添加 DDNS 配置</h2>
<p>在 服务 – 动态 DNS 中，点击左下角添加新服务，名称可以随意填写，IP 地址版本这里选择 IPv6，DDNS 服务提供商这里本文以 Cloudflare 为例所以选择 cloudflare-v4：<br />
<img src="https://static.whosneo.com/img/2022/03/Snipaste_2022-03-29_17-44-15.png" /></p>
<p>在 Cloudflare 的 API 中，用户名对应 Cloudflare 账户的登录邮箱，密码对应的则是 API Key。<br />
登录 Cloudflare 账户之后，访问 API 令牌页面 <a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a> 即可在下方看到 API 密钥，在下方的 Global API Key 的右侧点击查看，输入 Cloudflare 账户的密码之后即可获取 API Key。<br />
<img src="https://static.whosneo.com/img/2022/03/2022-03-28_09.22.58.png" /></p>
<p>获取到 API Key 之后就可以把基本设置中的条目填写完成了：<br />
<img src="https://static.whosneo.com/img/2022/03/Snipaste_2022-03-29_18-24-50.png" /></p>
<p>高级设置中，需要将 IP 地址来源修改为接口，接口这里由于是路由器拨号上网，所以我选择了 pppoe-wan，其余选项可以不用调整也可以照图里的设置来：<br />
<img src="https://static.whosneo.com/img/2022/03/Snipaste_2022-03-29_18-27-18.png" /></p>
<p>计时器设定中，检查间隔可以根据自己的需要来，间隔小的话更新 IP 地址就更快速：<br />
<img src="https://static.whosneo.com/img/2022/03/Snipaste_2022-03-29_18-59-48.png" /></p>
<p>保存并应用所有设置之后，点击新增配置的重新加载，即可启动 DDNS 更新服务：<br />
<img src="https://static.whosneo.com/img/2022/03/Snipaste_2022-03-29_19-01-51.png" /></p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>VSCode 快捷键绑定 Shell 命令</title>
            <link>https://www.ohyee.cc/post/note_vscode_keybindings_command</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_vscode_keybindings_command</guid>
            <pubDate>Fri, 25 Mar 2022 17:03:00 +0000</pubDate>
            <description>
                
                别家有的功能，VSCode 也可以有。在 VSCode 中使用快捷键执行 Shell 命令
                
            </description>
            
            <content:encoded><![CDATA[别家有的功能，VSCode 也可以有。在 VSCode 中使用快捷键执行 Shell 命令]]></content:encoded>
            
        </item>
        
        <item>
            <title>CentOS 添加 Swap 分区</title>
            <link>https://www.whosneo.com/centos-swap/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/centos-swap/</guid>
            <pubDate>Wed, 16 Mar 2022 14:39:56 +0000</pubDate>
            <description>
                
                当系统的内存空间满了之后，Linux 系统就会使用硬盘的空间来“扩展”内存。如果没有设置 Swap 分区，当内存耗尽之后，系统可能就会假死。 创建和激活 Swap 文件 首先创建 Swap 文件： sudo fallocate -l 4G /swapfile  如果 fallo
                
            </description>
            
            <content:encoded><![CDATA[<p>当系统的内存空间满了之后，Linux 系统就会使用硬盘的空间来“扩展”内存。如果没有设置 Swap 分区，当内存耗尽之后，系统可能就会假死。<span></span></p>
<h2>创建和激活 Swap 文件</h2>
<p>首先创建 Swap 文件：</p>
<pre><code>sudo fallocate -l 4G /swapfile
</code></pre>
<p>如果 <code>fallocate</code> 不可用，则可以换用另一种方法：</p>
<pre><code>sudo dd if=/dev/zero of=/swapfile bs=1024 count=4194304
</code></pre>
<p>设置权限，确保只有 root 用户可以读写 Swap 文件：</p>
<pre><code>sudo chmod 600 /swapfile
</code></pre>
<p>接下来，在 Swap 文件上设置 Swap 分区：</p>
<pre><code>sudo mkswap /swapfile
</code></pre>
<p>然后就是激活 Swap 分区：</p>
<pre><code>sudo swapon /swapfile
</code></pre>
<p>激活之后可以使用 <code>free -h</code> 命令查看 Swap 分区的使用情况，以验证是否成功激活 Swap 分区。</p>
<p>最后，需要在 <code>/etc/fstab</code> 文件的最后添加条目，确保设置永久生效：</p>
<pre><code>/swapfile swap swap defaults 0 0
</code></pre>
<h2>调整 Swappiness 值</h2>
<p>Swappiness 值是 Linux 内核中定义的使用 Swap 分区的优先级，值可以为 0 至 100 之间的任何整数。值越小系统就尽量少去使用 Swap 分区，值越大系统就尽可能多的去使用 Swap 分区。</p>
<p>在 CentOS 上，Swappiness 值默认是 30。可以通过以下命令检查当前系统的 Swappiness 值：</p>
<pre><code>cat /proc/sys/vm/swappiness
</code></pre>
<p>30 的 Swappiness 值对于桌面系统来说是合适的，但对于服务器来说，小一点可能会合适。例如，设置 Swappiness 值为 10：</p>
<pre><code>sudo sysctl vm.swappiness=10
</code></pre>
<p>如果想永久设置 Swappiness 值，需要编辑 <code>/etc/sysctl.conf</code> 文件，在末尾添加以下内容：</p>
<pre><code>vm.swappiness=10
</code></pre>
<h2>移除 Swap 分区和文件</h2>
<p>首先，取消激活 Swap 分区：</p>
<pre><code>sudo swapoff -v /swapfile
</code></pre>
<p>然后，将 <code>/etc/fstab</code> 文件中的条目 <code>/swapfile swap swap defaults 0 0</code> 删除。</p>
<p>最后，删除 Swap 文件：</p>
<pre><code>sudo rm /swapfile
</code></pre>]]></content:encoded>
            
        </item>
        
        <item>
            <title>ASN.1 语法及 X.509 证书格式解析解析</title>
            <link>https://www.ohyee.cc/post/note_asn1_and_x509_parse</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_asn1_and_x509_parse</guid>
            <pubDate>Tue, 08 Mar 2022 09:15:27 +0000</pubDate>
            <description>
                
                根据 ASN.1 语法解析 X.509 证书信息
                
            </description>
            
            <content:encoded><![CDATA[根据 ASN.1 语法解析 X.509 证书信息]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tinc on OpenWrt 组网</title>
            <link>https://www.whosneo.com/tinc-openwrt/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/tinc-openwrt/</guid>
            <pubDate>Mon, 21 Feb 2022 03:21:40 +0000</pubDate>
            <description>
                
                上一篇写了在路由器上使用 WireGuard 在 IPv6 上直连组网，效果也不错。但是 WireGuard 是使用 UDP 通信的，有可能会被运营商 QoS 限速，所以还可以试试使用 TCP 通信的 Tinc 来组网。 安装 Tinc 在两台路由器上均进行安装。 opkg u
                
            </description>
            
            <content:encoded><![CDATA[<p>上一篇写了在路由器上使用 WireGuard 在 IPv6 上直连组网，效果也不错。但是 WireGuard 是使用 UDP 通信的，有可能会被运营商 QoS 限速，所以还可以试试使用 TCP 通信的 Tinc 来组网。<span></span></p>
<h2>安装 Tinc</h2>
<p>在两台路由器上均进行安装。</p>
<pre><code>opkg update
opkg install tinc
</code></pre>
<h2>配置 Tinc</h2>
<p>此处假设使用两台路由器来配置互相连接，名称为 A 和 B。<br />
路由器 A 的 DDNS 地址为 A.router.com，路由器 B 的 DDNS 地址为 B.router.com，这里解析出来的地址无论是 IPv4 还是 IPv6 都没关系，只要是公网能访问的地址就可以。<br />
路由器 A 和 B 均使用 665 端口监听 tinc 的传入连接。<br />
路由器 A 的局域网为 192.168.88.0/24，路由器 B 的局域网为 192.168.99.0/24。<br />
在 tinc 网络中，路由器 A 使用 IP 10.0.0.88，路由器 B 使用 IP 10.0.0.99。</p>
<h3>路由器 A</h3>
<p>首先需要定义一个网络名称，这里使用 <code>tincnet</code>。</p>
<p>在 <code>/etc/tinc/</code> 目录中新建文件夹，名字为网络名称，即创建 <code>/etc/tinc/tincnet/</code> 目录。<br />
在此目录下创建 <code>tinc.conf tinc-up tinc-down</code> 文件和 <code>hosts</code> 文件夹。<br />
<code>tinc.conf</code> 为 <code>tincnet</code> 的配置文件，<code>tinc-up</code> 为启动该网络时自动执行的脚本，<code>tinc-down</code> 为关闭该网络时自动执行的脚本，<code>hosts</code> 文件夹保存着各个节点（路由器）的信息。</p>
<p><code>tinc.conf</code> 文件中保存着路由器 A 的配置信息：</p>
<pre><code>Name = A #路由器 A 的名称
BindToAddress = * 665 #监听端口
Interface = tinc #虚拟接口名称
Device = /dev/net/tun
Mode = switch #交换机模式
ConnectTo = B #默认连接路由器 B
</code></pre>
<p><code>tinc-up</code> 文件是网络启动时执行的脚本，一般在这里为 tinc 的接口添加地址信息：</p>
<pre><code>#!/bin/sh

ip link set $INTERFACE up
ip addr add 10.0.0.88/24 dev $INTERFACE
ip route add 192.168.99.0/24 via 10.0.0.99 dev tinc src 10.0.0.88 onlink
</code></pre>
<p><code>tinc-down</code> 文件是网络关闭时执行的脚本，一般在这里为 tinc 的接口清除配置：</p>
<pre><code>#!/bin/sh

ip route del 192.168.99.0/24
ip addr del 10.0.0.88/24 dev $INTERFACE
ip link set $INTERFACE down
</code></pre>
<p>配置好 <code>tinc-up tinc-down</code> 文件之后，不要忘了为这两个文件增加执行权限：</p>
<pre><code>chmod +x tinc-up
chmod +x tinc-down
</code></pre>
<p><code>hosts</code> 文件夹中先创建好本机的文件，名称需要与上方 <code>tinc.conf</code> 中第一行的配置保持一致，即文件 <code>A</code>：</p>
<pre><code>Address = A.router.com
Port = 665
Subnet = 10.0.0.88/32
</code></pre>
<p>接下来为 <code>tincnet</code> 创建密钥信息，在询问保存位置时直接回车使用默认位置即可：</p>
<pre><code>tinc -n tincnet generate-rsa-keys
tinc -n tincnet generate-ed25519-keys
</code></pre>
<p>此时路由器 A 的 <code>/etc/tinc/tincnet/</code> 目录下的情况为：</p>
<pre><code>├── ed25519_key.priv
├── hosts/
│   └── A
├── rsa_key.priv
├── tinc-down*
├── tinc-up*
└── tinc.conf
</code></pre>
<p>最后需要编辑 <code>/etc/config/tinc</code> 文件：</p>
<pre><code>config tinc-net tincnet
    option enabled 1
    option Name A

config tinc-host A
    option enabled 1
    option net tincnet
</code></pre>
<h3>路由器 B</h3>
<p>首先需要定义一个网络名称，这里还是使用 <code>tincnet</code>。</p>
<p>在 <code>/etc/tinc/</code> 目录中新建文件夹，名字为网络名称，即创建 <code>/etc/tinc/tincnet/</code> 目录。<br />
在此目录下创建 <code>tinc.conf tinc-up tinc-down</code> 文件和 <code>hosts</code> 文件夹。<br />
<code>tinc.conf</code> 为 <code>tincnet</code> 的配置文件，<code>tinc-up</code> 为启动该网络时自动执行的脚本，<code>tinc-down</code> 为关闭该网络时自动执行的脚本，<code>hosts</code> 文件夹保存着各个节点（路由器）的信息。</p>
<p><code>tinc.conf</code> 文件中保存着路由器 B 的配置信息：</p>
<pre><code>Name = B #路由器 B 的名称
BindToAddress = * 665 #监听端口
Interface = tinc #虚拟接口名称
Device = /dev/net/tun
Mode = switch #交换机模式
ConnectTo = A #默认连接路由器 A
</code></pre>
<p><code>tinc-up</code> 文件是网络启动时执行的脚本，一般在这里为 tinc 的接口添加地址信息：</p>
<pre><code>#!/bin/sh

ip link set $INTERFACE up
ip addr add 10.0.0.99/24 dev $INTERFACE
ip route add 192.168.88.0/24 via 10.0.0.88 dev tinc src 10.0.0.99 onlink
</code></pre>
<p><code>tinc-down</code> 文件是网络关闭时执行的脚本，一般在这里为 tinc 的接口清除配置：</p>
<pre><code>#!/bin/sh

ip route del 192.168.88.0/24
ip addr del 10.0.0.99/24 dev $INTERFACE
ip link set $INTERFACE down
</code></pre>
<p>配置好 <code>tinc-up tinc-down</code> 文件之后，不要忘了为这两个文件增加执行权限：</p>
<pre><code>chmod +x tinc-up
chmod +x tinc-down
</code></pre>
<p><code>hosts</code> 文件夹中先创建好本机的文件，名称需要与上方 <code>tinc.conf</code> 中第一行的配置保持一致，即文件 <code>B</code>：</p>
<pre><code>Address = B.router.com
Port = 665
Subnet = 10.0.0.99/32
</code></pre>
<p>接下来为 <code>tincnet</code> 创建密钥信息，在询问保存位置时直接回车使用默认位置即可：</p>
<pre><code>tinc -n tincnet generate-rsa-keys
tinc -n tincnet generate-ed25519-keys
</code></pre>
<p>此时路由器 B 的 <code>/etc/tinc/tincnet/</code> 目录下的情况为：</p>
<pre><code>├── ed25519_key.priv
├── hosts/
│   └── B
├── rsa_key.priv
├── tinc-down*
├── tinc-up*
└── tinc.conf
</code></pre>
<p>最后需要编辑 <code>/etc/config/tinc</code> 文件：</p>
<pre><code>config tinc-net tincnet
    option enabled 1
    option Name B

config tinc-host B
    option enabled 1
    option net tincnet
</code></pre>
<h3>交换密钥</h3>
<p>需要将路由器 A 上的 <code>/etc/tinc/tincnet/hosts/A</code> 文件复制到路由器 B 的<code>/etc/tinc/tincnet/hosts/</code> 目录下，同理，需要将路由器 B 上的 <code>/etc/tinc/tincnet/hosts/B</code> 文件复制到路由器 A 的<code>/etc/tinc/tincnet/hosts/</code> 目录下。</p>
<p>此时两个路由器的 <code>/etc/tinc/tincnet/</code> 目录下均为这样：</p>
<pre><code>├── ed25519_key.priv
├── hosts/
│   ├── A
│   └── B
├── rsa_key.priv
├── tinc-down*
├── tinc-up*
└── tinc.conf
</code></pre>
<p>需要注意两个路由器要在防火墙中开放 665 端口。</p>
<p>在两个路由器上均启动 tinc，即可连通两个路由器：</p>
<pre><code>/etc/init.d/tinc start
</code></pre>
<h2>完成</h2>
<p>如果需要更省心的操作，可以参考上一篇文章中的自动化的配置。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>腾讯企业邮箱忽略 MX 记录发信</title>
            <link>https://www.ohyee.cc/post/note_tencent_exmail_mx</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tencent_exmail_mx</guid>
            <pubDate>Wed, 09 Feb 2022 09:09:40 +0000</pubDate>
            <description>
                
                该问题会导致部分邮件被错误投递，无论是发送方还是接收方都会受到影响，同时可能存在潜在的安全隐患
                
            </description>
            
            <content:encoded><![CDATA[该问题会导致部分邮件被错误投递，无论是发送方还是接收方都会受到影响，同时可能存在潜在的安全隐患]]></content:encoded>
            
        </item>
        
        <item>
            <title>Chrome/Edge 标签组插件</title>
            <link>https://www.ohyee.cc/post/evaluation_browser_tabgroups_extensions</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_browser_tabgroups_extensions</guid>
            <pubDate>Sun, 06 Feb 2022 16:58:49 +0000</pubDate>
            <description>
                
                针对浏览器标签组自动分组插件的对比
                
            </description>
            
            <content:encoded><![CDATA[针对浏览器标签组自动分组插件的对比]]></content:encoded>
            
        </item>
        
        <item>
            <title>【应届内推】阿里云后端研发工程师</title>
            <link>https://www.ohyee.cc/post/writting_aliyun_2023</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_aliyun_2023</guid>
            <pubDate>Mon, 24 Jan 2022 04:57:18 +0000</pubDate>
            <description>
                
                内推，速投简历
                
            </description>
            
            <content:encoded><![CDATA[内推，速投简历]]></content:encoded>
            
        </item>
        
        <item>
            <title>损坏的 Typecho 备份处理为 JSON</title>
            <link>https://www.ohyee.cc/post/note_typecho_backup_json</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_typecho_backup_json</guid>
            <pubDate>Sat, 15 Jan 2022 18:00:42 +0000</pubDate>
            <description>
                
                一定不能太懒癌
                
            </description>
            
            <content:encoded><![CDATA[一定不能太懒癌]]></content:encoded>
            
        </item>
        
        <item>
            <title>VS Code VIM 插件高效使用</title>
            <link>https://www.ohyee.cc/post/note_vim</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_vim</guid>
            <pubDate>Fri, 31 Dec 2021 04:29:29 +0000</pubDate>
            <description>
                
                在 VSCode 中使用 VIM 实现高效操作
                
            </description>
            
            <content:encoded><![CDATA[在 VSCode 中使用 VIM 实现高效操作]]></content:encoded>
            
        </item>
        
        <item>
            <title>參加購物節浅羽到底經歷了什麼</title>
            <link>https://asaba.sakuragawa.moe/2021/12/%e5%8f%83%e5%8a%a0%e8%b3%bc%e7%89%a9%e7%af%80%e6%b5%85%e7%be%bd%e5%88%b0%e5%ba%95%e7%b6%93%e6%ad%b7%e4%ba%86%e4%bb%80%e9%ba%bc/?pk_campaign=feed&amp;pk_kwd=%25e5%258f%2583%25e5%258a%25a0%25e8%25b3%25bc%25e7%2589%25a9%25e7%25af%2580%25e6%25b5%2585%25e7%25be%25bd%25e5%2588%25b0%25e5%25ba%2595%25e7%25b6%2593%25e6%25ad%25b7%25e4%25ba%2586%25e4%25bb%2580%25e9%25ba%25bc</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2021/12/%e5%8f%83%e5%8a%a0%e8%b3%bc%e7%89%a9%e7%af%80%e6%b5%85%e7%be%bd%e5%88%b0%e5%ba%95%e7%b6%93%e6%ad%b7%e4%ba%86%e4%bb%80%e9%ba%bc/?pk_campaign=feed&amp;pk_kwd=%25e5%258f%2583%25e5%258a%25a0%25e8%25b3%25bc%25e7%2589%25a9%25e7%25af%2580%25e6%25b5%2585%25e7%25be%25bd%25e5%2588%25b0%25e5%25ba%2595%25e7%25b6%2593%25e6%25ad%25b7%25e4%25ba%2586%25e4%25bb%2580%25e9%25ba%25bc</guid>
            <pubDate>Tue, 28 Dec 2021 19:03:04 +0000</pubDate>
            <description>
                
                    自從京東「618 店慶」、淘寶「雙 11」開了購物節的先河後，「購物節」越辦越多，而且每次都有「預熱」、「返場」，時間越來越長，可以說是「每月一次節，每次一個月」。經過幾年的大力宣傳炒作，購物節的形式也漸漸被大家所認識和瞭解；浅羽也不能免俗，想要薅一把羊毛。    平臺
                
            </description>
            
            <content:encoded><![CDATA[<h6><a href="https://markdown.sakuragawa.moe/hHPk3Q8tRPeLAv815Tdseg?both#tags-blog-draft"></a></h6>



<p>自從京東「618 店慶」、淘寶「雙 11」開了購物節的先河後，「購物節」越辦越多，而且每次都有「預熱」、「返場」，時間越來越長，可以說是「每月一次節，每次一個月」。經過幾年的大力宣傳炒作，購物節的形式也漸漸被大家所認識和瞭解；浅羽也不能免俗，想要薅一把羊毛。</p>



<p>平臺促銷，什麼「秒殺」「限時優惠」已經是司空見慣了，守着螢幕等着零點時分也是家常便飯，不過近年的促銷活動週期拉得更長，也就少了些立減限量搶購。優惠的大頭還是滿額減價；有時爲了享受到優惠就不免要湊單。極端一點如浅羽本貓甚至變成了從按需消費變成了計劃消費，購買品牌產品漸漸地就變成了「等 618」「等雙 11」。除掉急用的必需品，其餘的儘量都在「購物節」時購買，甚至於日用品也選擇在優惠期間大量購買「屯貨」，徹底過成了優惠日曆的樣子。</p>



<p>有些情況則是比較可氣，比如說店家要參加「滿 200 減 30」的活動，原本標價 200 元出個頭的產品，在活動期間內突然做小幅度的減價，以至於不能輕易湊夠滿減。可是眼見稍加一點就可以夠上滿減的門檻，怎麼辦呢？這種時候只好去尋找「湊單品」。久而久之，訂單記錄裏就堆滿了各種幾塊錢的小商品，家裏也堆滿了沒什麼用的小零碎。好在這樣一通操作下來，原本打算購買的商品還是獲得了一定的優惠。也有甚者，爲了不多花一分錢，用隨機商品湊單之後再申請退款，只能說與活動的策劃者也不是無辜的。</p>



<p>希望有朝一日能看到這些平臺有更純粹的促銷活動，而非不停地佈置的「消費主義陷阱」；不需要分享「砍價」、不需要計算湊單，更不用爲了尷尬的紅包每天花費時間在毫無樂趣的「遊戲」上。</p>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2021%2F12%2F%25e5%258f%2583%25e5%258a%25a0%25e8%25b3%25bc%25e7%2589%25a9%25e7%25af%2580%25e6%25b5%2585%25e7%25be%25bd%25e5%2588%25b0%25e5%25ba%2595%25e7%25b6%2593%25e6%25ad%25b7%25e4%25ba%2586%25e4%25bb%2580%25e9%25ba%25bc%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%25258f%252583%2525e5%25258a%2525a0%2525e8%2525b3%2525bc%2525e7%252589%2525a9%2525e7%2525af%252580%2525e6%2525b5%252585%2525e7%2525be%2525bd%2525e5%252588%2525b0%2525e5%2525ba%252595%2525e7%2525b6%252593%2525e6%2525ad%2525b7%2525e4%2525ba%252586%2525e4%2525bb%252580%2525e9%2525ba%2525bc&amp;action_name=%E5%8F%83%E5%8A%A0%E8%B3%BC%E7%89%A9%E7%AF%80%E6%B5%85%E7%BE%BD%E5%88%B0%E5%BA%95%E7%B6%93%E6%AD%B7%E4%BA%86%E4%BB%80%E9%BA%BC&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2394" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>    </span>
</div><div>
    <a data-post-id="2394" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>SSH 正反向代理</title>
            <link>https://www.ohyee.cc/post/note_ssh_proxy</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_ssh_proxy</guid>
            <pubDate>Wed, 22 Dec 2021 13:55:36 +0000</pubDate>
            <description>
                
                让服务器用本地网络、让本地用服务器的网络，做你懂的事情（加速依赖下载）
                
            </description>
            
            <content:encoded><![CDATA[让服务器用本地网络、让本地用服务器的网络，做你懂的事情（加速依赖下载）]]></content:encoded>
            
        </item>
        
        <item>
            <title>WireGuard on OpenWrt+IPv6 组网</title>
            <link>https://www.whosneo.com/wireguard-openwrt-ipv6/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/wireguard-openwrt-ipv6/</guid>
            <pubDate>Fri, 10 Dec 2021 08:13:17 +0000</pubDate>
            <description>
                
                之前在路由器上使用 Zerotier 组网，效果还是不错的。但是两台路由器都是通过打洞连接的，效果可能并不是特别稳定。恰好我的两台路由器都是有 IPv6 地址的，那么何不试试使用 IPv6 地址直连的方式来进行组网呢？ 安装 WireGuard 依赖 在两台路由器上均安装相关的
                
            </description>
            
            <content:encoded><![CDATA[<p>之前在路由器上使用 Zerotier 组网，效果还是不错的。但是两台路由器都是通过打洞连接的，效果可能并不是特别稳定。恰好我的两台路由器都是有 IPv6 地址的，那么何不试试使用 IPv6 地址直连的方式来进行组网呢？<span></span></p>
<h2>安装 WireGuard 依赖</h2>
<p>在两台路由器上均安装相关的依赖，只需要安装 <code>luci-i18n-wireguard-zh-cn</code> 系统即可自动将所有依赖安装完毕，完成之后必须要重启路由器。</p>
<pre><code>opkg update
opkg install luci-i18n-wireguard-zh-cn
</code></pre>
<p>重新登录路由器管理页面，就可以在 状态 – WireGuard 中看到 WireGuard 连接的状态。</p>
<h2>配置 WireGuard 接口</h2>
<p>若使用 N 台路由器互相连接，则需要在每台路由器上设置 N-1 个对端，这样可以确保任意两台路由器之间能互相连接。此处假设使用两台路由器来配置互相连接，每台路由器上均需要设置一个对端。</p>
<p>路由器 A 的网段为 192.168.1.0/24，路由器 B 的网段为 192.168.2.0/24，我们选择为 WireGuard 网络设置网段 172.16.0.0/16，路由器 A 在 WireGuard 网络中的地址为 172.16.1.1，路由器 B 在 WireGuard 网络中的地址为 172.16.2.1。</p>
<h3>路由器 A</h3>
<p>进入 网络 – 接口 页面中，添加新的接口，接口名称填入 wg，协议需要选择 WireGuard VPN。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-33-45.png" /><br />
在 常规设置 中，点击生成密钥按钮，私钥栏中会自动生成内容，监听端口填写 12000，IP 地址填入 172.16.1.1/16，注意此处最好是带上网段。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-46-11.png" /><br />
在 高级设置 中，MTU 填入 1280，此处如果填大了会让两端连接速度变慢。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-55-48.png" /><br />
在 防火墙设置 中，新建一个 vpn 区域。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-57-34.png" /><br />
保存并应用，创建端口。</p>
<p>在 状态 – WireGuard 中可以看到路由器 A 的公钥，复制下来，等下要填入路由器 B 的对端设置中。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_09-00-05.png" /></p>
<p>回到 网络 – 接口 中，编辑 wg 接口，在 对端 中，添加一个对端，描述可以写 OpenWrt2，公钥中填入路由器 B 的公钥（参考本文后面路由器 B 的设置获得公钥），允许的 IP 中填入 172.16.2.1/32 和 192.168.2.0/24，勾选路由允许的 IP，端点主机填入对端路由器的公网地址，端点端口填入对端路由器的端口 12000，持续 Keep-Alive 中可以填入自己喜欢的大小，如 15，保存并应用所有设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_09-14-22.png" /></p>
<p>进入 网络 – 防火墙 – 常规设置 – 区域 中，编辑 lan 区域，将允许转发到目标区域勾选上 vpn 区域，将允许来自源区域的转发也勾选上 vpn 区域，保存；将 vpn 区域的转发改为接受，保存并应用设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-30-47.png" /><br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-29-05.png" /></p>
<p>在 网络 – 防火墙 – 通信规则 页面中，新增一项规则。<br />
在 常规设置 中，名称填写 Allow-WireGuard，协议保持默认 TCP+UDP 即可，源区域选择 wan，目标区域选择 设备（输入），目标端口调入 WireGuard 监听端口 12000，操作选择接受，保存防火墙设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-34-24.png" /></p>
<p>回到 网络 – 接口 页面中，重启 wg 接口。</p>
<h3>路由器 B</h3>
<p>进入 网络 – 接口 页面中，添加新的接口，接口名称填入 wg，协议需要选择 WireGuard VPN。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-33-45.png" /><br />
在 常规设置 中，点击生成密钥按钮，私钥栏中会自动生成内容，监听端口填写 12000，IP 地址填入 172.16.2.1/16，注意此处最好是带上网段。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-46-11.png" /><br />
在 高级设置 中，MTU 填入 1280，此处如果填大了会让两端连接速度变慢。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-55-48.png" /><br />
在 防火墙设置 中，新建一个 vpn 区域。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_08-57-34.png" /><br />
保存并应用，创建端口。</p>
<p>在 状态 – WireGuard 中可以看到路由器 B 的公钥，复制下来，等下要填入路由器 A 的对端设置中。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_09-03-06.png" /></p>
<p>回到 网络 – 接口 中，编辑 wg 接口，在 对端 中，添加一个对端，描述可以写 OpenWrt1，公钥中填入路由器 A 的公钥（参考本文前面路由器 A 的设置获得公钥），允许的 IP 中填入 172.16.1.1/32 和 192.168.1.0/24，勾选路由允许的 IP，端点主机填入对端路由器的公网地址，端点端口填入对端路由器的端口 12000，持续 Keep-Alive 中可以填入自己喜欢的大小，如 15，保存并应用所有设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_09-30-11.png" /></p>
<p>进入 网络 – 防火墙 – 常规设置 – 区域 中，编辑 lan 区域，将允许转发到目标区域勾选上 vpn 区域，将允许来自源区域的转发也勾选上 vpn 区域，保存；将 vpn 区域的转发改为接受，保存并应用设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-30-47.png" /><br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-29-05.png" /></p>
<p>在 网络 – 防火墙 – 通信规则 页面中，新增一项规则。<br />
在 常规设置 中，名称填写 Allow-WireGuard，协议保持默认 TCP+UDP 即可，源区域选择 wan，目标区域选择 设备（输入），目标端口调入 WireGuard 监听端口 12000，操作选择接受，保存防火墙设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-34-24.png" /></p>
<p>回到 网络 – 接口 页面中，重启 wg 接口。</p>
<h2>完成</h2>
<p>此时，稍等片刻，在两台路由器的 状态 – WireGuard 中即可看到另外一台路由器的连接信息。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_09-34-55.png" /></p>
<p>此时两端路由器下的设备就都可以访问另一端路由器下的设备了，就像是在同一个局域网中。</p>
<p>如果需要更省心的操作，可以选择参考以下内容。</p>
<h3>配合 DDNS 使用</h3>
<p>当其中一个路由器重新连接网络之后，公网地址可能会发生变化，此时可能会无法连接 WireGuard，不过我们可以配合 DDNS 使用。<br />
两台路由器均配置好 DDNS 之后，可以在 WireGuard 的对端配置中将端点主机的地址由 IP 地址更换为域名。<br />
DDNS 配置好之后，这样即使路由器更换了 IP 地址也可以重新连接上。</p>
<h3>配合 IPv6 使用</h3>
<p>WireGuard 可完美兼容 IPv6 使用，只需要 DDNS 的域名只有 IPv6 地址记录即可，在这种情况下，WireGuard 就使用 IPv6 与其他路由器连接。只需将上文图中 172.27.0.0/16 的地址替换为 DDNS 域名即可。</p>
<p>IPv6 DDNS 的配置可以参考另一篇文章：<a href="https://www.whosneo.com/openwrt-ipv6-ddns/">OpenWrt IPv6 DDNS</a></p>
<h3>配合 WatchCat 使用</h3>
<p>当出现问题无法连通对端路由器的时候，如果有自动化的操作可以直接重启接口，就很方便了，省去手动重启操作。</p>
<pre><code>opkg update
opkg install watchcat luci-app-watchcat luci-i18n-watchcat-zh-cn
</code></pre>
<p>在 服务 – WatchCat 页面中，增加一项配置，模式选择“重启接口”（有些固件可能会翻译为“重启实例”），周期可以设置为 1m，在路由器 A 上安装的 WatchCat 就填写路由器 B 的地址 192.168.2.1，在路由器 B 上安装的 WatchCat 就填写路由器 A 的地址 192.168.1.1，检查间隔填写 10s，接口的话就选择 wg，其余保持不动，保存应用所有设置。<br />
<img src="https://static.whosneo.com/img/2021/12/Snipaste_2021-12-10_13-42-01.png" /></p>
<p>这样，在路由器发现无法 ping 通对端路由器 1 分钟之后将会自动重启 wg 接口，保证两台路由器之间持续连接。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>Let&#39;s Encrypt 根证书过期引发的问题</title>
            <link>https://www.ohyee.cc/post/note_lets_encrypt</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_lets_encrypt</guid>
            <pubDate>Sat, 04 Dec 2021 15:13:59 +0000</pubDate>
            <description>
                
                Let&#39;s Encrypt 在部分设备上提示证书错误
                
            </description>
            
            <content:encoded><![CDATA[Let's Encrypt 在部分设备上提示证书错误]]></content:encoded>
            
        </item>
        
        <item>
            <title>OpenWRT 忽略内核依赖</title>
            <link>https://www.ohyee.cc/post/note_openwrt_kernel</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_openwrt_kernel</guid>
            <pubDate>Sun, 21 Nov 2021 18:30:55 +0000</pubDate>
            <description>
                
                内核版本导致 Cannot satisfy the following dependencies for kmod-xxx
                
            </description>
            
            <content:encoded><![CDATA[内核版本导致 Cannot satisfy the following dependencies for kmod-xxx]]></content:encoded>
            
        </item>
        
        <item>
            <title>V2Ray + TLS + WS(WSS) Docker 部署</title>
            <link>https://www.ohyee.cc/post/note_v2ray_tls_ws_docker</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_v2ray_tls_ws_docker</guid>
            <pubDate>Sun, 21 Nov 2021 16:24:23 +0000</pubDate>
            <description>
                
                伪装成正常 wss 的 v2ray 流量
                
            </description>
            
            <content:encoded><![CDATA[伪装成正常 wss 的 v2ray 流量]]></content:encoded>
            
        </item>
        
        <item>
            <title>博客前端字体选择</title>
            <link>https://www.ohyee.cc/post/note_blog_font</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_blog_font</guid>
            <pubDate>Tue, 16 Nov 2021 11:10:28 +0000</pubDate>
            <description>
                
                根据字体效果选择了一个清晰易读还尽可能不那么常规的可商用字体
                
            </description>
            
            <content:encoded><![CDATA[根据字体效果选择了一个清晰易读还尽可能不那么常规的可商用字体]]></content:encoded>
            
        </item>
        
        <item>
            <title>Zerotier 主路由旁路由搭配组网</title>
            <link>https://www.whosneo.com/zerotier-lan/</link>
            
            <author>Neo</author>
            
            <guid>https://www.whosneo.com/zerotier-lan/</guid>
            <pubDate>Tue, 16 Nov 2021 02:39:37 +0000</pubDate>
            <description>
                
                最近新入了一个 R4S 软路由，放在家里当作旁路由来使用，同时单位有一台刷了 OpenWrt 系统的小米路由器 Pro。苦于无法自由访问家中和单位的局域网，便研究了一下利用 Zerotier 来组网。 本文假设两台路由器分别叫 OpenWrt1 和 OpenWrt2，其中 Op
                
            </description>
            
            <content:encoded><![CDATA[<p>最近新入了一个 R4S 软路由，放在家里当作旁路由来使用，同时单位有一台刷了 OpenWrt 系统的小米路由器 Pro。苦于无法自由访问家中和单位的局域网，便研究了一下利用 Zerotier 来组网。<span></span></p>
<p>本文假设两台路由器分别叫 OpenWrt1 和 OpenWrt2，其中 OpenWrt1 作为主路由，OpenWrt2 作为旁路由。OpenWrt1 的局域网为 192.168.1.0/24，OpenWrt2 的局域网为 192.168.2.0/24。</p>
<h2>注册 Zerotier</h2>
<p>首先去 <a href="https://my.zerotier.com">https://my.zerotier.com</a> 注册账户，然后在 <a href="https://my.zerotier.com/network">https://my.zerotier.com/network</a> 网络页面，点击页面上方一个大大的黄色按钮“Create A Network”即可创建完成一个网络，在下方的列表中，获得你的网络 ID。</p>
<h2>安装 Zerotier</h2>
<p>两台路由器均安装 Zerotier：</p>
<pre><code>opkg install zerotier
</code></pre>
<p>两台路由器均编辑 Zerotier 配置：</p>
<pre><code>vi /etc/config/zerotier
</code></pre>
<p>修改里面的内容，将 ‘xxxxxxxxxxxxxxxx’ 修改为自己的 Zerotier 网络 ID。</p>
<pre><code>config zerotier 'sample_config'
    option enabled '1'
    list join 'xxxxxxxxxxxxxxxx'
    option nat '1'
    option secret ''
</code></pre>
<p>两台路由器均启动 Zerotier：</p>
<pre><code>/etc/init.d/zerotier start
</code></pre>
<p>网络 – 防火墙 – 常规设置 – 区域设置，将“转发”修改为“接受”：<br />
<img src="https://static.whosneo.com/img/2021/11/Snipaste_2021-11-16_14-53-01.png" /></p>
<h2>设置 Zerotier 网络</h2>
<p>在两台路由器都启动了 Zerotier 之后，在 Zerotier 的网络管理 Members 里面就可以看到两个设备了，在前面的框内都打上勾，稍等一下就可以在右边看到两个 IP 地址了：<br />
<img src="https://static.whosneo.com/img/2021/11/Snipaste_2021-11-16_14-07-54.png" /></p>
<p>再到两台路由器上运行一下 Zerotier 的命令来检查一下两台路由器到底分配的是哪个 IP：</p>
<pre><code>zerotier-cli listnetworks
</code></pre>
<p>从命令输出的最后可以出来当前路由器使用的是哪个 IP。<br />
本文中 OpenWrt1 为 10.147.19.32，OpenWrt2 为 10.147.19.12。</p>
<p>然后在 Zerotier 网络管理的高级设置中，添加对应的路由表，Destination 填入路由器的网段，Via 填入其得到的 Zerotier 地址：<br />
<img src="https://static.whosneo.com/img/2021/11/Snipaste_2021-11-16_14-30-16.png" /></p>
<h2>最后</h2>
<p>在这番设置之后，便可以在不同网段之间互相访问其他局域网中的设备了。</p>
<p>网上充斥着大量的教程，却也没有说清楚旁路由 Zerotier 到底应该如何配置。在经历了两天的配置之后，终于将主路由/旁路由任意搭配使用的配置总结好。记录一下，以便查阅。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>Surface Pro 8 测评</title>
            <link>https://www.ohyee.cc/post/evaluation_surface_pro_8</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_surface_pro_8</guid>
            <pubDate>Sun, 07 Nov 2021 05:01:54 +0000</pubDate>
            <description>
                
                第一波预购，第一波收货，最后一波测评
                
            </description>
            
            <content:encoded><![CDATA[第一波预购，第一波收货，最后一波测评]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go 中值为 nil 的 interface</title>
            <link>https://www.ohyee.cc/post/note_go_nil_interface</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_nil_interface</guid>
            <pubDate>Sat, 06 Nov 2021 15:06:57 +0000</pubDate>
            <description>
                
                记一个尽管我知道，但是仍然在项目里义无反顾踩了坑的知识点
                
            </description>
            
            <content:encoded><![CDATA[记一个尽管我知道，但是仍然在项目里义无反顾踩了坑的知识点]]></content:encoded>
            
        </item>
        
        <item>
            <title>在 OpenWRT 上正確開啓網易 UU 加速器</title>
            <link>https://asaba.sakuragawa.moe/2021/10/%e5%9c%a8-openwrt-%e4%b8%8a%e6%ad%a3%e7%a2%ba%e9%96%8b%e5%95%93%e7%b6%b2%e6%98%93-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8</link>
            
            <author>櫻川 浅羽</author>
            
            <guid>https://asaba.sakuragawa.moe/2021/10/%e5%9c%a8-openwrt-%e4%b8%8a%e6%ad%a3%e7%a2%ba%e9%96%8b%e5%95%93%e7%b6%b2%e6%98%93-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8</guid>
            <pubDate>Tue, 26 Oct 2021 21:37:53 +0000</pubDate>
            <description>
                
                               本篇爲「家庭網路」系列第 14 篇（全 15 篇）。                         入手 Linksys WRT1900AC 作爲 AP，刷 DD-WRT 固件          闖入聯通定製烽火 HG220G-U（WO-36） 
                
            </description>
            
            <content:encoded><![CDATA[<div>
			
	
	
		<p>
			本篇爲「<em>家庭網路</em>」系列第 14 篇（全 15 篇）。		</p>
			

			<div>
			<ol>
									<li><a href="https://asaba.sakuragawa.moe/2017/12/%e5%85%a5%e6%89%8b-linksys-wrt1900ac-%e4%bd%9c%e7%88%b2-ap%ef%bc%8c%e5%88%b7-dd-wrt-%e5%9b%ba%e4%bb%b6/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">入手 Linksys WRT1900AC 作爲 AP，刷 DD-WRT 固件</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2017/12/%e9%97%96%e5%85%a5%e8%81%af%e9%80%9a%e5%ae%9a%e8%a3%bd%e7%83%bd%e7%81%ab-hg220g-u%ef%bc%88wo-36%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">闖入聯通定製烽火 HG220G-U（WO-36）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%a8%88%e5%8a%83/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：計劃</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%bb%9f%e9%ab%94/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：軟體</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/01/%e4%b9%9f%e8%a8%b1%e6%98%af%e6%9c%80%e6%8a%98%e9%a8%b0%e7%9a%84%ef%bc%88%e9%9a%a8%e8%ba%ab%ef%bc%89%e8%bf%b7%e4%bd%a0%e4%bc%ba%e6%9c%8d%e5%99%a8%ef%bc%9a%e8%a3%9d%e6%a9%9f/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">也許是最折騰的（隨身）迷你伺服器：裝機</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/02/%e5%9c%a8%e5%9c%8b%e7%a7%91%e5%a4%a7%ef%bc%88ucas%ef%bc%89%e5%ae%bf%e8%88%8d%e9%85%8d%e7%bd%ae-ipv6-%e7%a9%bf%e9%80%8f/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">在國科大（UCAS）宿舍配置 IPv6 穿透</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/03/%e6%96%90%e8%a8%8a-k3-%e4%b8%8a%e8%bb%8a%ef%bc%8c%e9%96%8b%e5%95%93-telnet%e3%80%81%e5%88%b7%e5%b7%b2-root-%e7%89%88%e5%ae%98%e6%96%b9%e5%9b%ba%e4%bb%b6%e5%92%8c-merlin/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">斐訊 K3 上車，開啓 Telnet、刷已 Root 版官方固件和 Merlin</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/03/%e4%bd%bf%e7%94%a8-bind9-%e5%bb%ba%e7%bd%ae%e6%b7%b7%e5%90%88-dns%ef%bc%88response-policy-zone%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">使用 bind9 建置混合 DNS（Response Policy Zone）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/%e6%96%90%e8%a8%8a-k2t-%e9%96%8b%e7%ae%b1%e8%88%87%e5%8b%95%e6%89%8b%e8%89%b9%ef%bc%88%e5%8b%95%e6%89%8b%e7%8e%a9%ef%bc%89/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">斐訊 K2T 開箱與動手艹（動手玩）</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/huawei-b315s-936-4g-lte-cpe-%e9%96%8b%e7%ae%b1%e8%88%87%e5%8b%95%e6%89%8b%e7%8e%a9/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">Huawei B315s-936 4G LTE CPE 開箱與動手玩</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2018/06/%e9%80%8f%e9%81%8e-vlan-%e5%be%9e%e4%b8%8d%e5%90%8c%e5%87%ba%e5%8f%a3%e7%8d%b2%e5%be%97-ipv4-ipv6-%e6%a7%8b%e5%bb%ba%e9%9b%99%e6%a3%a7%e7%b6%b2%e8%b7%af/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">透過 VLAN 從不同出口獲得 IPv4/IPv6 地址構建雙棧網路</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2020/02/%e9%97%9c%e6%96%bc%e5%8d%8a%e5%a4%9c%e8%89%b9%e8%b2%93%e7%9a%84%e9%80%99%e6%aa%94%e4%ba%8b%ef%bc%9a%e4%b8%ad%e8%88%88-zte-zxhn-f677v2-ont-%e8%a8%ad%e5%ae%9a%e6%a9%8b%e6%8e%a5/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">關於半夜艹貓的這檔事：中興 ZTE ZXHN F677V2 ONT 設定橋接</a></li>
									<li><a href="https://asaba.sakuragawa.moe/2021/01/%e4%bf%ae%e5%be%a9-openwrt-%e4%b8%8a-clash%ef%bc%88openclash%ef%bc%89%e5%bd%b1%e9%9f%bf-port-forwarding-%e7%9a%84%e5%95%8f%e9%a1%8c/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">修復 OpenWRT 上 Clash（OpenClash）影響 Port Forwarding 的問題</a></li>
									<li><span>在 OpenWRT 上正確開啓網易 UU 加速器</span></li>
									<li><a href="https://asaba.sakuragawa.moe/2022/08/%e5%9c%a8-proxmox-ve-%e4%b8%8a%e4%bd%bf%e7%94%a8-lxc-%e5%bb%ba%e7%bd%ae-uu-%e5%8a%a0%e9%80%9f%e5%99%a8/?pk_campaign=feed&amp;pk_kwd=%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8">在 Proxmox VE 上使用 LXC 建置 UU 加速器</a></li>
							</ol>
		</div>
	</div>

<p>網易 UU 加速器不知道爲何被戲稱爲「富家子弟加速器」。不過傻老婆恰好還有一段時間的訂閱，而且可以安裝在網關上，給遊戲主機加速，所以也不妨用用看。</p>



<h2>安裝路由器插件</h2>



<p>網易 UU 加速器有<a href="https://uu.163.com/router/direction.html" data-type="URL" data-id="https://uu.163.com/router/direction.html" target="_blank">官方的路由器插件</a>，支援 OpenWRT 系統，但需要登入 SSH 手動執行指令稿安裝。好在有人類打包了 <code><a href="https://github.com/coolsnowwolf/lede/commits/master/package/lean/luci-app-uugamebooster" data-type="URL" data-id="https://github.com/coolsnowwolf/lede/commits/master/package/lean/luci-app-uugamebooster" target="_blank">luci-app-uugamebooster</a></code>，可以直接安裝而不用執行內容繁多的指令稿。不過還是要保證 <code>kmod-tun</code> 已經安裝並正確工作。</p>



<h2>更新插件版本</h2>



<p>加速器的路由器插件實際上是不停更新的，有時候版本太舊是會導致綁定失敗。從官方下載最新的插件包：</p>



<pre><code>curl -s "http://router.uu.163.com/api/plugin?type=openwrt-x86_64" | jq .url | sed -E 's|/([^/"]+)|/{\1}|g' | xargs curl -o "#2-#3-#4.tar.gz"</code></pre>



<p>解壓縮以後將所有的檔案都拷貝到 OpenWRT 上的 <code>/usr/share/uugamebooster</code> 中並覆蓋所有。</p>



<h2>確認 LAN 接口橋接</h2>



<p>一切準備就緒，浅羽嘗試使用客戶端應用程式綁定路由器，但卻一直收到「該路由器型號暫不支持加速」的錯誤。可是路由器插件已經在正常運行了。正常的想法是打開調試開關檢查日誌，可是這個 <code>uuplugin</code> 怎麼都不說話，只好拆可執行檔看看：</p>



<pre><code>      uVar7 = 0;
      if (*(long *)(unaff_RBP + -0x12d70) != 0) {
        uVar7 = *(undefined8 *)(unaff_RBP + -0x12d78);
      }
                    /* try { // try from 00401476 to 0040159d has its CatchHandler @ 00401a39 */
      DAT_00903308 = FUN_0041cb77(uVar7,"br-lan");</code></pre>



<p>再對比一下安裝時候用的指令稿生成 S/N 的相關函式：</p>



<pre><code>print_sn() {
    local interface=""
    case "${ROUTER}" in
        ${ASUSWRT_MERLIN})
            interface="br0"
            ;;
        ${XIAOMI} | ${HIWIFI} | ${OPENWRT})
            interface="br-lan"
            ;;
        *)
            return 1
            ;;
    esac

    local info=$(ip addr show ${interface})
    local mac=$(echo "${info}" | grep "link/ether" | awk '{print $2}')
    echo "sn=${mac}"
    return 0
}</code></pre>



<p>可以注意到兩邊都會使用 <code>br-lan</code> 接口的 MAC 地址計算出一個 S/N 類似物。巧的是浅羽的 LAN 口是獨立的接口，沒有 <code>br-lan</code>，大約因此路由器插件無法正確生成 S/N，導致客戶端綁定失敗。解決方法也很簡單，在「接口」頁面上修改 LAN 端口，從「物理設定」中找到「橋接接口」勾選保存即可。等網路恢復後，在客戶端中就可以正常綁定路由器並開啓加速了。</p>



<h2>更多參考</h2>



<p>針對路由器不是 OpenWRT 或者無法安裝網易 UU 加速器路由器插件的情況，還可以選擇其他部署方式：</p>



<ul>
<li><a href="https://www.bilibili.com/read/cv9149050" target="_blank">OpenWrt 旁路由用上 UU 加速器</a></li>



<li><a href="https://www.bilibili.com/read/cv9624192" target="_blank">使用 Docker 部署 UU 加速器</a>
<ul>
<li><a href="https://github.com/DianQK/uuplugin" data-type="URL" data-id="https://github.com/DianQK/uuplugin" target="_blank">uuplugin docker 版本</a></li>
</ul>
</li>
</ul>



<hr />



<h2>卸載官方路由器插件</h2>



<p>透過查看安裝的指令稿內容，可以發現其實官方準備了卸載指令稿。卸載指令稿的檔案會在安裝時自動下載，並放置到安裝指令稿所在的資料夾內。不過如果找不到也沒關係，可以自己下載然後執行。</p>



<pre><code>UU_UNINST_DOWNLOAD_URL="router.uu.163.com/api/script/uninstall?type=openwrt"
UU_UNINST="/tmp/uu_uninst.sh"
wget -O ${UU_UNINST} ${UNINSTALL_DOWNLOAD_URL}
chmod +x ${UU_UNINST}
/bin/sh ${UU_UNINST} openwrt</code></pre>
<img src="https://analytics.sakuragawa.moe/piwik.php?idsite=2&amp;rec=1&amp;url=https%3A%2F%2Fasaba.sakuragawa.moe%2F2021%2F10%2F%25e5%259c%25a8-openwrt-%25e4%25b8%258a%25e6%25ad%25a3%25e7%25a2%25ba%25e9%2596%258b%25e5%2595%2593%25e7%25b6%25b2%25e6%2598%2593-uu-%25e5%258a%25a0%25e9%2580%259f%25e5%2599%25a8%2F%3Fpk_campaign%3Dfeed%26pk_kwd%3D%2525e5%25259c%2525a8-openwrt-%2525e4%2525b8%25258a%2525e6%2525ad%2525a3%2525e7%2525a2%2525ba%2525e9%252596%25258b%2525e5%252595%252593%2525e7%2525b6%2525b2%2525e6%252598%252593-uu-%2525e5%25258a%2525a0%2525e9%252580%25259f%2525e5%252599%2525a8&amp;action_name=%E5%9C%A8+OpenWRT+%E4%B8%8A%E6%AD%A3%E7%A2%BA%E9%96%8B%E5%95%93%E7%B6%B2%E6%98%93+UU+%E5%8A%A0%E9%80%9F%E5%99%A8&amp;urlref=https%3A%2F%2Fasaba.sakuragawa.moe%2Ffeed%2F" /><div>
    <div>
    <a data-post-id="2380" data-trigger-type="like" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span>10    </span>
</div><div>
    <a data-post-id="2380" data-trigger-type="dislike" data-restriction="cookie" data-already-liked="0">
                        <i></i>
                </a>
    <span></span>
</div></div>]]></content:encoded>
            
        </item>
        
        <item>
            <title>stty 控制输入流</title>
            <link>https://www.ohyee.cc/post/note_stty</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_stty</guid>
            <pubDate>Sun, 24 Oct 2021 15:05:57 +0000</pubDate>
            <description>
                
                在实现自己实现 docker exec 命令时，发现需要对输入流做一些特殊处理，这些处理都涉及了 stty 的一些内容
                
            </description>
            
            <content:encoded><![CDATA[在实现自己实现 docker exec 命令时，发现需要对输入流做一些特殊处理，这些处理都涉及了 stty 的一些内容]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go io 流管道连接</title>
            <link>https://www.ohyee.cc/post/note_go_io_pipe</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_io_pipe</guid>
            <pubDate>Sun, 10 Oct 2021 07:48:30 +0000</pubDate>
            <description>
                
                将不同的 io 流连接起来
                
            </description>
            
            <content:encoded><![CDATA[将不同的 io 流连接起来]]></content:encoded>
            
        </item>
        
        <item>
            <title>工作三个月的反思</title>
            <link>https://icebound.cc/2021/10/10/work-3-month.html</link>
            
            <author>icebound</author>
            
            <guid>https://icebound.cc/2021/10/10/work-3-month.html</guid>
            <pubDate>Sat, 09 Oct 2021 16:28:24 +0000</pubDate>
            <description>
                
                最近一段时间同事离职了好几个，工作非常的忙，陪女朋友的时间少了，更不要提更博客，写技术文档了。下周要去上海出差 […] The post 工作三个月的反思 first appeared on Icebound.
                
            </description>
            
            <content:encoded><![CDATA[<p>最近一段时间同事离职了好几个，工作非常的忙，陪女朋友的时间少了，更不要提更博客，写技术文档了。下周要去上海出差 […]</p>
<p>The post <a href="https://icebound.cc/2021/10/10/work-3-month.html">工作三个月的反思</a> first appeared on <a href="https://icebound.cc">Icebound</a>.</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 Lego 申请 Let‘s Encrypt SSL 证书</title>
            <link>https://www.ohyee.cc/post/note_lets_encrypt_lego</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_lets_encrypt_lego</guid>
            <pubDate>Tue, 05 Oct 2021 13:08:10 +0000</pubDate>
            <description>
                
                突然发现这个竟然没有博客留档
                
            </description>
            
            <content:encoded><![CDATA[突然发现这个竟然没有博客留档]]></content:encoded>
            
        </item>
        
        <item>
            <title>Gitea 添加 jupyter 支持</title>
            <link>https://www.ohyee.cc/post/note_gitea_jupyter</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_gitea_jupyter</guid>
            <pubDate>Mon, 04 Oct 2021 08:52:42 +0000</pubDate>
            <description>
                
                为 Gitea 添加 jupyter notebook 支持
                
            </description>
            
            <content:encoded><![CDATA[为 Gitea 添加 jupyter notebook 支持]]></content:encoded>
            
        </item>
        
        <item>
            <title>Goroutine 池</title>
            <link>https://www.ohyee.cc/post/note_goroutine_pool</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_goroutine_pool</guid>
            <pubDate>Sat, 02 Oct 2021 05:57:40 +0000</pubDate>
            <description>
                
                实现一个 goroutine 池，避免大量创建 goroutine
                
            </description>
            
            <content:encoded><![CDATA[实现一个 goroutine 池，避免大量创建 goroutine]]></content:encoded>
            
        </item>
        
        <item>
            <title>LRU + Expired Map</title>
            <link>https://www.ohyee.cc/post/note_lru_expired_map</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_lru_expired_map</guid>
            <pubDate>Sat, 02 Oct 2021 05:52:00 +0000</pubDate>
            <description>
                
                实现一个支持超过容量自动删除，超时自动删除的 Map 作为缓存
                
            </description>
            
            <content:encoded><![CDATA[实现一个支持超过容量自动删除，超时自动删除的 Map 作为缓存]]></content:encoded>
            
        </item>
        
        <item>
            <title>Google Play 商店能访问无限等待下载</title>
            <link>https://www.ohyee.cc/post/note_google_play_store</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_google_play_store</guid>
            <pubDate>Wed, 29 Sep 2021 09:11:08 +0000</pubDate>
            <description>
                
                Google Play 商店无限等待不下载解决
                
            </description>
            
            <content:encoded><![CDATA[Google Play 商店无限等待不下载解决]]></content:encoded>
            
        </item>
        
        <item>
            <title>Linux Shell</title>
            <link>https://www.ohyee.cc/post/note_linux_shell</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_linux_shell</guid>
            <pubDate>Fri, 10 Sep 2021 12:11:24 +0000</pubDate>
            <description>
                
                记一下可能用得到的 Linux 命令
                
            </description>
            
            <content:encoded><![CDATA[记一下可能用得到的 Linux 命令]]></content:encoded>
            
        </item>
        
        <item>
            <title>博客订阅功能重构</title>
            <link>https://www.ohyee.cc/post/note_blotter_spider</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_blotter_spider</guid>
            <pubDate>Fri, 10 Sep 2021 12:08:27 +0000</pubDate>
            <description>
                
                一个提取页面里文章部分的思路，有一说一这比写个论文有意思多了
                
            </description>
            
            <content:encoded><![CDATA[一个提取页面里文章部分的思路，有一说一这比写个论文有意思多了]]></content:encoded>
            
        </item>
        
        <item>
            <title>氮化镓充电器测评</title>
            <link>https://www.ohyee.cc/post/evaluation_gan</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_gan</guid>
            <pubDate>Wed, 01 Sep 2021 15:13:03 +0000</pubDate>
            <description>
                
                测试了两款不同的氮化镓充电器
                
            </description>
            
            <content:encoded><![CDATA[测试了两款不同的氮化镓充电器]]></content:encoded>
            
        </item>
        
        <item>
            <title>博客 Docker 化 Part Ⅰ</title>
            <link>https://www.ohyee.cc/post/note_blotter_docker_1</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_blotter_docker_1</guid>
            <pubDate>Sat, 28 Aug 2021 19:15:03 +0000</pubDate>
            <description>
                
                博客 Docker 化部署第一部分 —— 基本功能实现
                
            </description>
            
            <content:encoded><![CDATA[博客 Docker 化部署第一部分 —— 基本功能实现]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go 1.17 泛型！</title>
            <link>https://www.ohyee.cc/post/note_go1.17_generic</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go1.17_generic</guid>
            <pubDate>Fri, 27 Aug 2021 18:37:12 +0000</pubDate>
            <description>
                
                Go 1.17 已经支持泛型了！
                
            </description>
            
            <content:encoded><![CDATA[Go 1.17 已经支持泛型了！]]></content:encoded>
            
        </item>
        
        <item>
            <title>随机数与并发</title>
            <link>https://www.ohyee.cc/post/note_random</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_random</guid>
            <pubDate>Fri, 13 Aug 2021 09:32:13 +0000</pubDate>
            <description>
                
                随便地使用随机数，可能会导致性能问题
                
            </description>
            
            <content:encoded><![CDATA[随便地使用随机数，可能会导致性能问题]]></content:encoded>
            
        </item>
        
        <item>
            <title>白嫖阿里云函数计算实现 V2Ray、Clash 订阅转换</title>
            <link>https://www.ohyee.cc/post/note_lambda_v2ray_clash</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_lambda_v2ray_clash</guid>
            <pubDate>Sat, 31 Jul 2021 17:01:52 +0000</pubDate>
            <description>
                
                白嫖阿里云函数计算，实现聚合各个“机场”订阅链接、自建 subconverter 转换订阅
                
            </description>
            
            <content:encoded><![CDATA[白嫖阿里云函数计算，实现聚合各个“机场”订阅链接、自建 subconverter 转换订阅]]></content:encoded>
            
        </item>
        
        <item>
            <title>从读锁切换至写锁</title>
            <link>https://www.ohyee.cc/post/note_read_lock_to_write_lock</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_read_lock_to_write_lock</guid>
            <pubDate>Thu, 22 Jul 2021 17:05:35 +0000</pubDate>
            <description>
                
                为什么在读锁切换写锁时需要重新检查状态
                
            </description>
            
            <content:encoded><![CDATA[为什么在读锁切换写锁时需要重新检查状态]]></content:encoded>
            
        </item>
        
        <item>
            <title>TLS 协议流程</title>
            <link>https://www.ohyee.cc/post/note_tls_protocol</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tls_protocol</guid>
            <pubDate>Mon, 05 Jul 2021 13:56:42 +0000</pubDate>
            <description>
                
                SSL/TLS 协议的简单流程
                
            </description>
            
            <content:encoded><![CDATA[SSL/TLS 协议的简单流程]]></content:encoded>
            
        </item>
        
        <item>
            <title>Suricata 与 Kafka 连接</title>
            <link>https://www.ohyee.cc/post/note_suricata_kafka</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_suricata_kafka</guid>
            <pubDate>Thu, 13 May 2021 10:10:57 +0000</pubDate>
            <description>
                
                将 Suricata 输出至 Kafka
                
            </description>
            
            <content:encoded><![CDATA[将 Suricata 输出至 Kafka]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 137. 只出现一次的数字 II</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_137</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_137</guid>
            <pubDate>Fri, 30 Apr 2021 17:03:38 +0000</pubDate>
            <description>
                
                一道甚至涉及数电的算法题
                
            </description>
            
            <content:encoded><![CDATA[一道甚至涉及数电的算法题]]></content:encoded>
            
        </item>
        
        <item>
            <title>SMTP 协议抓包理解</title>
            <link>https://www.ohyee.cc/post/note_smtp</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_smtp</guid>
            <pubDate>Thu, 29 Apr 2021 06:50:01 +0000</pubDate>
            <description>
                
                对 SMTP 协议进行抓包理解
                
            </description>
            
            <content:encoded><![CDATA[对 SMTP 协议进行抓包理解]]></content:encoded>
            
        </item>
        
        <item>
            <title>Kafka 部署和基础使用</title>
            <link>https://www.ohyee.cc/post/note_kafka</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_kafka</guid>
            <pubDate>Thu, 22 Apr 2021 09:20:43 +0000</pubDate>
            <description>
                
                Docker 下启动 Kafka，并使用 librdkafka 进行测试
                
            </description>
            
            <content:encoded><![CDATA[Docker 下启动 Kafka，并使用 librdkafka 进行测试]]></content:encoded>
            
        </item>
        
        <item>
            <title>WSL Docker 抓包</title>
            <link>https://www.ohyee.cc/post/note_docker_tcpdump</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_docker_tcpdump</guid>
            <pubDate>Thu, 08 Apr 2021 03:30:53 +0000</pubDate>
            <description>
                
                Docker 内抓宿主机的数据包
                
            </description>
            
            <content:encoded><![CDATA[Docker 内抓宿主机的数据包]]></content:encoded>
            
        </item>
        
        <item>
            <title>Mermaid 使用</title>
            <link>https://www.ohyee.cc/post/note_mermaid</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_mermaid</guid>
            <pubDate>Tue, 06 Apr 2021 06:50:19 +0000</pubDate>
            <description>
                
                博客添加了 mermaid 的支持
                
            </description>
            
            <content:encoded><![CDATA[博客添加了 mermaid 的支持]]></content:encoded>
            
        </item>
        
        <item>
            <title>在 Go 中运行 JS 代码</title>
            <link>https://www.ohyee.cc/post/note_go_js</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_js</guid>
            <pubDate>Tue, 06 Apr 2021 04:51:23 +0000</pubDate>
            <description>
                
                在 Golang 中，执行 JavaScript 代码
                
            </description>
            
            <content:encoded><![CDATA[在 Golang 中，执行 JavaScript 代码]]></content:encoded>
            
        </item>
        
        <item>
            <title>阿里笔试 20210326</title>
            <link>https://www.ohyee.cc/post/answer_ali_20210326</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_ali_20210326</guid>
            <pubDate>Sat, 27 Mar 2021 08:56:02 +0000</pubDate>
            <description>
                
                第二题有点难，需要多次优化。感觉阿里区分度做的并不好
                
            </description>
            
            <content:encoded><![CDATA[第二题有点难，需要多次优化。感觉阿里区分度做的并不好]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 456.132 模式</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_456</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_456</guid>
            <pubDate>Wed, 24 Mar 2021 15:32:38 +0000</pubDate>
            <description>
                
                虽然是道中等题，但是是没见过的套路
                
            </description>
            
            <content:encoded><![CDATA[虽然是道中等题，但是是没见过的套路]]></content:encoded>
            
        </item>
        
        <item>
            <title>面试笔记留档</title>
            <link>https://www.ohyee.cc/post/note_for_interview</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_for_interview</guid>
            <pubDate>Tue, 23 Mar 2021 12:58:29 +0000</pubDate>
            <description>
                
                未整理，纯留档
                
            </description>
            
            <content:encoded><![CDATA[未整理，纯留档]]></content:encoded>
            
        </item>
        
        <item>
            <title>什么是跨域</title>
            <link>https://www.ohyee.cc/post/note_cors</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_cors</guid>
            <pubDate>Tue, 23 Mar 2021 12:45:07 +0000</pubDate>
            <description>
                
                为什么要有跨域，如何跨域
                
            </description>
            
            <content:encoded><![CDATA[为什么要有跨域，如何跨域]]></content:encoded>
            
        </item>
        
        <item>
            <title>TCP 握手和挥手进一步理解</title>
            <link>https://www.ohyee.cc/post/note_tcp_handshake</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tcp_handshake</guid>
            <pubDate>Tue, 23 Mar 2021 12:38:05 +0000</pubDate>
            <description>
                
                三次握手和四次挥手细节，为什么是三次而不是两次、四次，最后一次挥手等待 2MSL
                
            </description>
            
            <content:encoded><![CDATA[三次握手和四次挥手细节，为什么是三次而不是两次、四次，最后一次挥手等待 2MSL]]></content:encoded>
            
        </item>
        
        <item>
            <title>字节笔试 20210321</title>
            <link>https://www.ohyee.cc/post/answer_zijie_20210321</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_zijie_20210321</guid>
            <pubDate>Mon, 22 Mar 2021 09:25:43 +0000</pubDate>
            <description>
                
                这场好难啊，感觉吊打我那一场
                
            </description>
            
            <content:encoded><![CDATA[这场好难啊，感觉吊打我那一场]]></content:encoded>
            
        </item>
        
        <item>
            <title>阿里笔试 20210319</title>
            <link>https://www.ohyee.cc/post/answer_ali_20210319</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_ali_20210319</guid>
            <pubDate>Fri, 19 Mar 2021 15:29:47 +0000</pubDate>
            <description>
                
                瞅了眼今天的题，感觉比我参加的那一场简单点
                
            </description>
            
            <content:encoded><![CDATA[瞅了眼今天的题，感觉比我参加的那一场简单点]]></content:encoded>
            
        </item>
        
        <item>
            <title>在 Spring 内做 JOIN 联查</title>
            <link>https://www.ohyee.cc/post/note_spring_jpa_join</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_spring_jpa_join</guid>
            <pubDate>Fri, 19 Mar 2021 04:38:15 +0000</pubDate>
            <description>
                
                一行在 MySQL 里简单的查询，在 ORM 中并不是那么“好写”
                
            </description>
            
            <content:encoded><![CDATA[一行在 MySQL 里简单的查询，在 ORM 中并不是那么“好写”]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 的奇怪 Bug 记录</title>
            <link>https://www.ohyee.cc/post/writting_leetcode_bug</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_leetcode_bug</guid>
            <pubDate>Thu, 11 Mar 2021 09:58:56 +0000</pubDate>
            <description>
                
                刷题刷出来 LeetCode 的 bug
                
            </description>
            
            <content:encoded><![CDATA[刷题刷出来 LeetCode 的 bug]]></content:encoded>
            
        </item>
        
        <item>
            <title>阿里笔试 20210308</title>
            <link>https://www.ohyee.cc/post/answer_ali_20210308</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_ali_20210308</guid>
            <pubDate>Mon, 08 Mar 2021 15:03:33 +0000</pubDate>
            <description>
                
                20210308 的阿里笔试，输在一波心态爆炸
                
            </description>
            
            <content:encoded><![CDATA[20210308 的阿里笔试，输在一波心态爆炸]]></content:encoded>
            
        </item>
        
        <item>
            <title>字节笔试 20210307</title>
            <link>https://www.ohyee.cc/post/answers_zijie_20210307</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answers_zijie_20210307</guid>
            <pubDate>Sun, 07 Mar 2021 17:44:26 +0000</pubDate>
            <description>
                
                4 道不算特别难的题（起码 1、3、4 都有印象在 LeetCode 见过类似的题目，虽然不完全一样，但是保证了有基本思路） 不过真写起来，也挺麻烦的
                
            </description>
            
            <content:encoded><![CDATA[4 道不算特别难的题（起码 1、3、4 都有印象在 LeetCode 见过类似的题目，虽然不完全一样，但是保证了有基本思路）
不过真写起来，也挺麻烦的]]></content:encoded>
            
        </item>
        
        <item>
            <title>阿里笔试 20210306</title>
            <link>https://www.ohyee.cc/post/answer_ali_20210306</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_ali_20210306</guid>
            <pubDate>Sat, 06 Mar 2021 17:34:49 +0000</pubDate>
            <description>
                
                因为电脑有问题，所以没参加这一次笔试，不过还是补一下题以备下次 耗时 58 分钟（不过真正笔试可能会更紧张，而且实际题目可能更难以理解）
                
            </description>
            
            <content:encoded><![CDATA[因为电脑有问题，所以没参加这一次笔试，不过还是补一下题以备下次
耗时 58 分钟（不过真正笔试可能会更紧张，而且实际题目可能更难以理解）]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 1178.猜字谜</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_1178</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_1178</guid>
            <pubDate>Fri, 26 Feb 2021 09:29:27 +0000</pubDate>
            <description>
                
                null
                
            </description>
            
            <content:encoded><![CDATA[null]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tomcat 非正常操作</title>
            <link>https://www.ohyee.cc/post/note_unusual_tomcat</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_unusual_tomcat</guid>
            <pubDate>Sun, 21 Feb 2021 10:10:57 +0000</pubDate>
            <description>
                
                一些与常规操作不同的 Tomcat 操作
                
            </description>
            
            <content:encoded><![CDATA[一些与常规操作不同的 Tomcat 操作]]></content:encoded>
            
        </item>
        
        <item>
            <title>尝试解答 《Go 语言笔试面试题汇总》</title>
            <link>https://www.ohyee.cc/post/note_go_qa</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_qa</guid>
            <pubDate>Wed, 17 Feb 2021 12:57:31 +0000</pubDate>
            <description>
                
                一套 Go 语言的面试题目，根据自己的理解结合网络答案给出一份结果
                
            </description>
            
            <content:encoded><![CDATA[一套 Go 语言的面试题目，根据自己的理解结合网络答案给出一份结果]]></content:encoded>
            
        </item>
        
        <item>
            <title>探讨 Go 错误机制</title>
            <link>https://www.ohyee.cc/post/post_go_error_handle</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/post_go_error_handle</guid>
            <pubDate>Mon, 15 Feb 2021 16:37:49 +0000</pubDate>
            <description>
                
                在检索相关问题时，看到很多人对 Go 错误机制褒贬不一，所以对其进行分析。
                
            </description>
            
            <content:encoded><![CDATA[在检索相关问题时，看到很多人对 Go 错误机制褒贬不一，所以对其进行分析。]]></content:encoded>
            
        </item>
        
        <item>
            <title>乌尔德女神作战计划——Git 历史修改</title>
            <link>https://www.ohyee.cc/post/note_git_history_change</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_git_history_change</guid>
            <pubDate>Sun, 07 Feb 2021 16:32:08 +0000</pubDate>
            <description>
                
                由于误操作，需要把已经被删除的记录附加到当前的所有提交前面
                
            </description>
            
            <content:encoded><![CDATA[由于误操作，需要把已经被删除的记录附加到当前的所有提交前面]]></content:encoded>
            
        </item>
        
        <item>
            <title>Linux 建立 Swap 分区</title>
            <link>https://www.ohyee.cc/post/note_linux_swap</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_linux_swap</guid>
            <pubDate>Mon, 01 Feb 2021 06:23:30 +0000</pubDate>
            <description>
                
                在 Linux 里建立交换分区
                
            </description>
            
            <content:encoded><![CDATA[在 Linux 里建立交换分区]]></content:encoded>
            
        </item>
        
        <item>
            <title>Gitea 自建 Git 服务部署</title>
            <link>https://www.ohyee.cc/post/note_gitea</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_gitea</guid>
            <pubDate>Sun, 31 Jan 2021 14:56:07 +0000</pubDate>
            <description>
                
                自建 Git 服务 Gitea 部署
                
            </description>
            
            <content:encoded><![CDATA[自建 Git 服务 Gitea 部署]]></content:encoded>
            
        </item>
        
        <item>
            <title>自定义 Bash 主题</title>
            <link>https://www.ohyee.cc/post/note_bash_terminal</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_bash_terminal</guid>
            <pubDate>Fri, 29 Jan 2021 15:14:57 +0000</pubDate>
            <description>
                
                让 bash 和其他终端一样好看
                
            </description>
            
            <content:encoded><![CDATA[让 bash 和其他终端一样好看]]></content:encoded>
            
        </item>
        
        <item>
            <title>分组加密工作模式</title>
            <link>https://www.ohyee.cc/post/note_block_cipher_mode_of_operator</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_block_cipher_mode_of_operator</guid>
            <pubDate>Sun, 24 Jan 2021 08:57:28 +0000</pubDate>
            <description>
                
                补充下分组加密的工作模式，以便后面自己查询
                
            </description>
            
            <content:encoded><![CDATA[补充下分组加密的工作模式，以便后面自己查询]]></content:encoded>
            
        </item>
        
        <item>
            <title>相关数据的认证加密 AEAD</title>
            <link>https://www.ohyee.cc/post/note_aead</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_aead</guid>
            <pubDate>Sat, 23 Jan 2021 13:25:19 +0000</pubDate>
            <description>
                
                所有的某科学工具目前都提到了一个特殊的名词——AEAD，所以搜索了下这到底是什么东西
                
            </description>
            
            <content:encoded><![CDATA[所有的某科学工具目前都提到了一个特殊的名词——AEAD，所以搜索了下这到底是什么东西]]></content:encoded>
            
        </item>
        
        <item>
            <title>Windows 电脑模拟 Nitendo Switch Amiibo</title>
            <link>https://www.ohyee.cc/post/note_ns_amiibo</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_ns_amiibo</guid>
            <pubDate>Tue, 19 Jan 2021 17:35:25 +0000</pubDate>
            <description>
                
                在 Windows 电脑使用 Linux 虚拟机模拟 Nitendo Switch 手柄刷 Amiibo
                
            </description>
            
            <content:encoded><![CDATA[在 Windows 电脑使用 Linux 虚拟机模拟 Nitendo Switch 手柄刷 Amiibo]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go 监控文件变化</title>
            <link>https://www.ohyee.cc/post/note_go_watch_file</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_watch_file</guid>
            <pubDate>Sun, 17 Jan 2021 15:14:57 +0000</pubDate>
            <description>
                
                需要实现一个监控日志文件新插入的行的功能，于是尝试实现下
                
            </description>
            
            <content:encoded><![CDATA[需要实现一个监控日志文件新插入的行的功能，于是尝试实现下]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 803. 打砖块</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_803</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_803</guid>
            <pubDate>Sat, 16 Jan 2021 15:17:44 +0000</pubDate>
            <description>
                
                花样负优化，把本来 800ms 的代码“优化”到 8s 起步，最高 10s
                
            </description>
            
            <content:encoded><![CDATA[花样负优化，把本来 800ms 的代码“优化”到 8s 起步，最高 10s]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 947. 移除最多的同行或同列石头</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_947</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_947</guid>
            <pubDate>Fri, 15 Jan 2021 08:06:21 +0000</pubDate>
            <description>
                
                一道图上的并查集题目，思路和实现都很简单，不过还是很巧妙
                
            </description>
            
            <content:encoded><![CDATA[一道图上的并查集题目，思路和实现都很简单，不过还是很巧妙]]></content:encoded>
            
        </item>
        
        <item>
            <title>Hydra 暴力破解工具</title>
            <link>https://www.ohyee.cc/post/note_hydra</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_hydra</guid>
            <pubDate>Tue, 12 Jan 2021 13:08:46 +0000</pubDate>
            <description>
                
                要学会防御，首先要知道攻击手段，Hydra 是一个非常厉害的暴力破解工具，支持很多的常见协议
                
            </description>
            
            <content:encoded><![CDATA[要学会防御，首先要知道攻击手段，Hydra 是一个非常厉害的暴力破解工具，支持很多的常见协议]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 1203. 项目管理</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_1203</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_1203</guid>
            <pubDate>Tue, 12 Jan 2021 09:17:23 +0000</pubDate>
            <description>
                
                一道很巧妙的多次拓扑排序问题
                
            </description>
            
            <content:encoded><![CDATA[一道很巧妙的多次拓扑排序问题]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 周赛 217</title>
            <link>https://www.ohyee.cc/post/answer_wc_217</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_wc_217</guid>
            <pubDate>Wed, 06 Jan 2021 17:11:56 +0000</pubDate>
            <description>
                
                LeetCode 1673 ~ LeetCode 1676 其中 LeetCode 1674 有多种有趣的解法
                
            </description>
            
            <content:encoded><![CDATA[LeetCode 1673 ~ LeetCode 1676
其中 LeetCode 1674 有多种有趣的解法]]></content:encoded>
            
        </item>
        
        <item>
            <title>长沙游记</title>
            <link>https://www.ohyee.cc/post/travels_changsha</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/travels_changsha</guid>
            <pubDate>Wed, 06 Jan 2021 12:23:22 +0000</pubDate>
            <description>
                
                2021 年元旦前后，来到长沙游玩
                
            </description>
            
            <content:encoded><![CDATA[2021 年元旦前后，来到长沙游玩]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 927. 三等分</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_927</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_927</guid>
            <pubDate>Tue, 29 Dec 2020 13:29:15 +0000</pubDate>
            <description>
                
                一道需要考虑很多细节的困难题，思路不算特别难想，但是很麻烦
                
            </description>
            
            <content:encoded><![CDATA[一道需要考虑很多细节的困难题，思路不算特别难想，但是很麻烦]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 330.按要求补齐数组</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_330</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_330</guid>
            <pubDate>Tue, 29 Dec 2020 11:08:59 +0000</pubDate>
            <description>
                
                一道很数学的困难题，只想出了一半。
                
            </description>
            
            <content:encoded><![CDATA[一道很数学的困难题，只想出了一半。]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 135.分发糖果</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_135</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_135</guid>
            <pubDate>Thu, 24 Dec 2020 15:30:22 +0000</pubDate>
            <description>
                
                每日一题的困难题，重点在于为什么要这么做
                
            </description>
            
            <content:encoded><![CDATA[每日一题的困难题，重点在于为什么要这么做]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 714. 买卖股票的最佳时机含手续费</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_714</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_714</guid>
            <pubDate>Thu, 17 Dec 2020 04:55:56 +0000</pubDate>
            <description>
                
                记录一下把一个题目做复杂的错误思路
                
            </description>
            
            <content:encoded><![CDATA[记录一下把一个题目做复杂的错误思路]]></content:encoded>
            
        </item>
        
        <item>
            <title>近视代数——环</title>
            <link>https://www.ohyee.cc/post/note_modern_algebra_ring</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_modern_algebra_ring</guid>
            <pubDate>Mon, 14 Dec 2020 06:58:48 +0000</pubDate>
            <description>
                
                近世代数环相关内容
                
            </description>
            
            <content:encoded><![CDATA[近世代数环相关内容]]></content:encoded>
            
        </item>
        
        <item>
            <title>近世代数——群</title>
            <link>https://www.ohyee.cc/post/note_modern_algebra_group</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_modern_algebra_group</guid>
            <pubDate>Tue, 08 Dec 2020 16:06:10 +0000</pubDate>
            <description>
                
                关于最重要的群相关内容
                
            </description>
            
            <content:encoded><![CDATA[关于最重要的群相关内容]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 659. 分割数组为连续子序列</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_659</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_659</guid>
            <pubDate>Sun, 06 Dec 2020 13:10:56 +0000</pubDate>
            <description>
                
                一个略有动态规划感觉的贪心题
                
            </description>
            
            <content:encoded><![CDATA[一个略有动态规划感觉的贪心题]]></content:encoded>
            
        </item>
        
        <item>
            <title>Windows 端口监听失败</title>
            <link>https://www.ohyee.cc/post/note_windows_port</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_windows_port</guid>
            <pubDate>Sun, 06 Dec 2020 04:27:19 +0000</pubDate>
            <description>
                
                Windows 奇怪的端口占用
                
            </description>
            
            <content:encoded><![CDATA[Windows 奇怪的端口占用]]></content:encoded>
            
        </item>
        
        <item>
            <title>JS 的 for ... in 真的很慢</title>
            <link>https://www.ohyee.cc/post/note_js_for_in</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_js_for_in</guid>
            <pubDate>Thu, 03 Dec 2020 16:41:45 +0000</pubDate>
            <description>
                
                在刷每日 LeetCode 的时候，意外发现在 JavaScript 在使用 for ... in 语法时，会非常的慢
                
            </description>
            
            <content:encoded><![CDATA[在刷每日 LeetCode 的时候，意外发现在 JavaScript 在使用 for ... in 语法时，会非常的慢]]></content:encoded>
            
        </item>
        
        <item>
            <title>Suricata  基础使用</title>
            <link>https://www.ohyee.cc/post/note_suricata_start</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_suricata_start</guid>
            <pubDate>Wed, 02 Dec 2020 15:31:45 +0000</pubDate>
            <description>
                
                使用 Suricata 设定预警规则，收集 pcap，导出流量文件，联动 lua 脚本
                
            </description>
            
            <content:encoded><![CDATA[使用 Suricata 设定预警规则，收集 pcap，导出流量文件，联动 lua 脚本]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 321. 拼接最大数</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_321</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_321</guid>
            <pubDate>Wed, 02 Dec 2020 15:19:51 +0000</pubDate>
            <description>
                
                很不幸，一眼秒出正确思路，然后感觉复杂度太高被自己否了……
                
            </description>
            
            <content:encoded><![CDATA[很不幸，一眼秒出正确思路，然后感觉复杂度太高被自己否了……]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 847. 访问所有节点的最短路径</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_847</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_847</guid>
            <pubDate>Wed, 02 Dec 2020 14:31:56 +0000</pubDate>
            <description>
                
                虽然貌似和官方题解不太一样（没细看官方思路），但是也算一个思路吧
                
            </description>
            
            <content:encoded><![CDATA[虽然貌似和官方题解不太一样（没细看官方思路），但是也算一个思路吧]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 777. 在LR字符串中交换相邻字符</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_777</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_777</guid>
            <pubDate>Fri, 27 Nov 2020 18:48:52 +0000</pubDate>
            <description>
                
                这道题写出来暴力解很容易，但是最优解感觉还是有点绕，所以记一下
                
            </description>
            
            <content:encoded><![CDATA[这道题写出来暴力解很容易，但是最优解感觉还是有点绕，所以记一下]]></content:encoded>
            
        </item>
        
        <item>
            <title>自动清理 ChromeDriver 进程</title>
            <link>https://www.ohyee.cc/post/note_kill_chromedriver</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_kill_chromedriver</guid>
            <pubDate>Mon, 23 Nov 2020 04:42:04 +0000</pubDate>
            <description>
                
                自动清理指定名称的进程
                
            </description>
            
            <content:encoded><![CDATA[自动清理指定名称的进程]]></content:encoded>
            
        </item>
        
        <item>
            <title>荣耀手环 6 评测</title>
            <link>https://www.ohyee.cc/post/evaluation_honor_wristband_6</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_honor_wristband_6</guid>
            <pubDate>Sun, 15 Nov 2020 08:14:44 +0000</pubDate>
            <description>
                
                荣耀手环 6 使用体验
                
            </description>
            
            <content:encoded><![CDATA[荣耀手环 6 使用体验]]></content:encoded>
            
        </item>
        
        <item>
            <title>分布式哈希表</title>
            <link>https://www.ohyee.cc/post/note_distributed_hash_table</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_distributed_hash_table</guid>
            <pubDate>Sat, 14 Nov 2020 12:25:58 +0000</pubDate>
            <description>
                
                DHT 是 Torrent 以及很多点对点网络中使用的检索方法，可以很快地在分布式网络中实现内容的检索
                
            </description>
            
            <content:encoded><![CDATA[DHT 是 Torrent 以及很多点对点网络中使用的检索方法，可以很快地在分布式网络中实现内容的检索]]></content:encoded>
            
        </item>
        
        <item>
            <title>贡献自己服务器作为 Tor 中继</title>
            <link>https://www.ohyee.cc/post/note_tor_as_relay</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_as_relay</guid>
            <pubDate>Mon, 09 Nov 2020 14:30:10 +0000</pubDate>
            <description>
                
                Tor 网络由几千名志愿者无私贡献的中继节点构成，如果要研究 Tor，自然也有必要成为一个中继节点进行研究。
                
            </description>
            
            <content:encoded><![CDATA[Tor 网络由几千名志愿者无私贡献的中继节点构成，如果要研究 Tor，自然也有必要成为一个中继节点进行研究。]]></content:encoded>
            
        </item>
        
        <item>
            <title>【弃案】在博客中插入思维导图</title>
            <link>https://www.ohyee.cc/post/note_mindmap</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_mindmap</guid>
            <pubDate>Sun, 08 Nov 2020 05:16:11 +0000</pubDate>
            <description>
                
                尝试在博客中插入可思维导图。由各种原因已放弃。
                
            </description>
            
            <content:encoded><![CDATA[尝试在博客中插入可思维导图。由各种原因已放弃。]]></content:encoded>
            
        </item>
        
        <item>
            <title>【转】SNORT 入侵检测系统</title>
            <link>https://www.ohyee.cc/post/reproduction_snort</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/reproduction_snort</guid>
            <pubDate>Fri, 06 Nov 2020 16:43:34 +0000</pubDate>
            <description>
                
                本文章转载自乌云，原作者 YxWa。原文章来自乌云，由于乌云无法访问，无法联系原作者。文章内容来自于乌云镜像
                
            </description>
            
            <content:encoded><![CDATA[本文章转载自乌云，原作者 YxWa。原文章来自乌云，由于乌云无法访问，无法联系原作者。文章内容来自于乌云镜像]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用机器学习实现奇偶分类</title>
            <link>https://www.ohyee.cc/post/note_parity_classification</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_parity_classification</guid>
            <pubDate>Thu, 05 Nov 2020 16:40:11 +0000</pubDate>
            <description>
                
                被逼无奈，还是要学习下如何机器学习进行分类，为后续 Tor 流量去匿名化做准备
                
            </description>
            
            <content:encoded><![CDATA[被逼无奈，还是要学习下如何机器学习进行分类，为后续 Tor 流量去匿名化做准备]]></content:encoded>
            
        </item>
        
        <item>
            <title>LeetCode 941.有效的山脉数组</title>
            <link>https://www.ohyee.cc/post/answer_leetcode_941</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/answer_leetcode_941</guid>
            <pubDate>Tue, 03 Nov 2020 13:43:30 +0000</pubDate>
            <description>
                
                久违地开始刷题，先从简单的开始，慢慢地提升难度，尽可能把题解写的不那么水
                
            </description>
            
            <content:encoded><![CDATA[久违地开始刷题，先从简单的开始，慢慢地提升难度，尽可能把题解写的不那么水]]></content:encoded>
            
        </item>
        
        <item>
            <title>如何优雅地使用 Docker</title>
            <link>https://www.ohyee.cc/post/note_docker</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_docker</guid>
            <pubDate>Wed, 28 Oct 2020 16:48:57 +0000</pubDate>
            <description>
                
                Docker 基础概念及使用手册
                
            </description>
            
            <content:encoded><![CDATA[Docker 基础概念及使用手册]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 docker 将 gitbook 开源图书转换为 EPUB</title>
            <link>https://www.ohyee.cc/post/note_gitbook_docker</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_gitbook_docker</guid>
            <pubDate>Sat, 24 Oct 2020 06:35:23 +0000</pubDate>
            <description>
                
                Gitbook 已死，但是开源书籍永存
                
            </description>
            
            <content:encoded><![CDATA[Gitbook 已死，但是开源书籍永存]]></content:encoded>
            
        </item>
        
        <item>
            <title>动态规划 PPT</title>
            <link>https://www.ohyee.cc/post/note_dp</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_dp</guid>
            <pubDate>Tue, 20 Oct 2020 10:28:04 +0000</pubDate>
            <description>
                
                扒出来了之前做的动态规划 PPT
                
            </description>
            
            <content:encoded><![CDATA[扒出来了之前做的动态规划 PPT]]></content:encoded>
            
        </item>
        
        <item>
            <title>文石 Nova2 评测</title>
            <link>https://www.ohyee.cc/post/evaluation_boox_nova2</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_boox_nova2</guid>
            <pubDate>Sun, 18 Oct 2020 13:34:09 +0000</pubDate>
            <description>
                
                一个很好的产品，但是被官方背刺，感受极差。
                
            </description>
            
            <content:encoded><![CDATA[一个很好的产品，但是被官方背刺，感受极差。]]></content:encoded>
            
        </item>
        
        <item>
            <title>Teambition 网盘评测</title>
            <link>https://www.ohyee.cc/post/evaluation_teambition</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/evaluation_teambition</guid>
            <pubDate>Fri, 16 Oct 2020 07:38:04 +0000</pubDate>
            <description>
                
                传说中的阿里网盘评测
                
            </description>
            
            <content:encoded><![CDATA[传说中的阿里网盘评测]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor 控制协议信号列表</title>
            <link>https://www.ohyee.cc/post/note_tor_spec_signal</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_spec_signal</guid>
            <pubDate>Thu, 15 Oct 2020 08:23:42 +0000</pubDate>
            <description>
                
                在诸如 Stem 等 Tor 控制软件中，除去使用 GETINFO 获取信息外，最主要的便是信号列表（由于可用于爬虫，信号中的 NEWNYM 大概是是最广为人知的东西）
                
            </description>
            
            <content:encoded><![CDATA[在诸如 Stem 等 Tor 控制软件中，除去使用 GETINFO 获取信息外，最主要的便是信号列表（由于可用于爬虫，信号中的 NEWNYM 大概是是最广为人知的东西）]]></content:encoded>
            
        </item>
        
        <item>
            <title>VMWare 安装 Mac OSX</title>
            <link>https://www.ohyee.cc/post/note_vmware_macosx</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_vmware_macosx</guid>
            <pubDate>Thu, 15 Oct 2020 08:23:04 +0000</pubDate>
            <description>
                
                为了测试跨平台页面的兼容性，需要在虚拟机安装 MAC 测试 Safari
                
            </description>
            
            <content:encoded><![CDATA[为了测试跨平台页面的兼容性，需要在虚拟机安装 MAC 测试 Safari]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor 可插拔传输规范</title>
            <link>https://www.ohyee.cc/post/note_pluggable_transports_spec</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_pluggable_transports_spec</guid>
            <pubDate>Thu, 15 Oct 2020 08:09:54 +0000</pubDate>
            <description>
                
                Tor 路由选择中文翻译
                
            </description>
            
            <content:encoded><![CDATA[Tor 路由选择中文翻译]]></content:encoded>
            
        </item>
        
        <item>
            <title>如何优雅地在北邮打卡、出校</title>
            <link>https://www.ohyee.cc/post/note_bupt_check_leave</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_bupt_check_leave</guid>
            <pubDate>Wed, 14 Oct 2020 08:58:01 +0000</pubDate>
            <description>
                
                北邮自动打卡、出校请假脚本
                
            </description>
            
            <content:encoded><![CDATA[北邮自动打卡、出校请假脚本]]></content:encoded>
            
        </item>
        
        <item>
            <title>互联网自治系统</title>
            <link>https://www.ohyee.cc/post/note_autonomous_system</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_autonomous_system</guid>
            <pubDate>Mon, 12 Oct 2020 08:52:30 +0000</pubDate>
            <description>
                
                某篇论文涉及到该部分内容，故翻出之前的笔记重整理了下
                
            </description>
            
            <content:encoded><![CDATA[某篇论文涉及到该部分内容，故翻出之前的笔记重整理了下]]></content:encoded>
            
        </item>
        
        <item>
            <title>电影《姜子牙》影评</title>
            <link>https://www.ohyee.cc/post/writting_movie_jiangziya</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_movie_jiangziya</guid>
            <pubDate>Tue, 06 Oct 2020 14:09:45 +0000</pubDate>
            <description>
                
                针对《姜子牙》的影评，以及大家差评的理解
                
            </description>
            
            <content:encoded><![CDATA[针对《姜子牙》的影评，以及大家差评的理解]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 Wireshark 对 Tor 进行抓包</title>
            <link>https://www.ohyee.cc/post/note_tor_wireshark</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_wireshark</guid>
            <pubDate>Fri, 25 Sep 2020 10:37:16 +0000</pubDate>
            <description>
                
                从 TCP 层面对 Tor 启动过程涉及的协议进行分析（不包括加密部分数据）
                
            </description>
            
            <content:encoded><![CDATA[从 TCP 层面对 Tor 启动过程涉及的协议进行分析（不包括加密部分数据）]]></content:encoded>
            
        </item>
        
        <item>
            <title>近世代数预备知识</title>
            <link>https://www.ohyee.cc/post/note_modern_algebra_basic</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_modern_algebra_basic</guid>
            <pubDate>Thu, 24 Sep 2020 11:02:09 +0000</pubDate>
            <description>
                
                近世代数的预备知识，包括集合、映射、代数系统等内容
                
            </description>
            
            <content:encoded><![CDATA[近世代数的预备知识，包括集合、映射、代数系统等内容]]></content:encoded>
            
        </item>
        
        <item>
            <title>Socks 代理域名解析机制</title>
            <link>https://www.ohyee.cc/post/note_socks5h_hostname</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_socks5h_hostname</guid>
            <pubDate>Wed, 23 Sep 2020 16:41:32 +0000</pubDate>
            <description>
                
                Socks5 和 Socks5h 在实际使用中的区别，及在 DNS 污染下的不同表现
                
            </description>
            
            <content:encoded><![CDATA[Socks5 和 Socks5h 在实际使用中的区别，及在 DNS 污染下的不同表现]]></content:encoded>
            
        </item>
        
        <item>
            <title>伪造微信浏览器中“网页由XXX提供”字段</title>
            <link>https://www.ohyee.cc/post/note_wechat_browser_hint</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_wechat_browser_hint</guid>
            <pubDate>Mon, 07 Sep 2020 16:27:43 +0000</pubDate>
            <description>
                
                微信浏览器中的域名提醒本身并不能提供很好的安全作用，仅仅需要简单的几步即可伪造一个域名提醒
                
            </description>
            
            <content:encoded><![CDATA[微信浏览器中的域名提醒本身并不能提供很好的安全作用，仅仅需要简单的几步即可伪造一个域名提醒]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go 读取 OpenWRT 时区信息</title>
            <link>https://www.ohyee.cc/post/note_go_read_openwrt_timezone</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_read_openwrt_timezone</guid>
            <pubDate>Mon, 07 Sep 2020 08:26:33 +0000</pubDate>
            <description>
                
                作为一个极为精简的 Linux 发行版，即使是时区这种基本的配置都与其他 Linux 不同，这可能会导致 Go 等语言错误初始化时间
                
            </description>
            
            <content:encoded><![CDATA[作为一个极为精简的 Linux 发行版，即使是时区这种基本的配置都与其他 Linux 不同，这可能会导致 Go 等语言错误初始化时间]]></content:encoded>
            
        </item>
        
        <item>
            <title>将 Go 程序编译至 OpenWRT</title>
            <link>https://www.ohyee.cc/post/note_compile_go_to_openwrt</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_compile_go_to_openwrt</guid>
            <pubDate>Fri, 04 Sep 2020 17:56:25 +0000</pubDate>
            <description>
                
                将 Go 程序编译到 OpenWRT 上，替代很难安装的 Python 执行定时任务
                
            </description>
            
            <content:encoded><![CDATA[将 Go 程序编译到 OpenWRT 上，替代很难安装的 Python 执行定时任务]]></content:encoded>
            
        </item>
        
        <item>
            <title>为 crontab 正确设置环境变量避免无法正确运行程序</title>
            <link>https://www.ohyee.cc/post/note_crontab_environment_variables</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_crontab_environment_variables</guid>
            <pubDate>Thu, 03 Sep 2020 17:16:02 +0000</pubDate>
            <description>
                
                crontab 本身不携带系统环境变量，因此如果需要运行 Pyhon 等脚本，可能会导致找不到相应的第三方包
                
            </description>
            
            <content:encoded><![CDATA[crontab 本身不携带系统环境变量，因此如果需要运行 Pyhon 等脚本，可能会导致找不到相应的第三方包]]></content:encoded>
            
        </item>
        
        <item>
            <title>如何优雅地在北邮洗澡</title>
            <link>https://www.ohyee.cc/post/note_bupt_bath</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_bupt_bath</guid>
            <pubDate>Mon, 31 Aug 2020 17:45:36 +0000</pubDate>
            <description>
                
                对北邮浴室预约系统进行研究，同时探索防止自动预约脚本思路技术
                
            </description>
            
            <content:encoded><![CDATA[对北邮浴室预约系统进行研究，同时探索防止自动预约脚本思路技术]]></content:encoded>
            
        </item>
        
        <item>
            <title>Multipathing Traffic to Reduce Entry Node Exposure in Onion Routing</title>
            <link>https://www.ohyee.cc/post/paper_multipathing_traffic_to_reduce_entry_node_exposure_in_onion_router</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/paper_multipathing_traffic_to_reduce_entry_node_exposure_in_onion_router</guid>
            <pubDate>Sat, 29 Aug 2020 08:16:28 +0000</pubDate>
            <description>
                
                本篇论文提出了使用多跳路径构建用户到中间节点的连接，从而抵抗指纹分析攻击。
                
            </description>
            
            <content:encoded><![CDATA[本篇论文提出了使用多跳路径构建用户到中间节点的连接，从而抵抗指纹分析攻击。]]></content:encoded>
            
        </item>
        
        <item>
            <title>POSTER: Traffic Splitting to Counter Website Fingerprinting</title>
            <link>https://www.ohyee.cc/post/page_poster_traffic_splitting_to_counter_website_fingerprinting</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/page_poster_traffic_splitting_to_counter_website_fingerprinting</guid>
            <pubDate>Fri, 28 Aug 2020 15:35:05 +0000</pubDate>
            <description>
                
                这篇论文主要介绍了使用流量分割(Traffic Splitting)技术来抵抗指纹分析(Website Fingerprinting, WFP)的手段，并使用目前最常用的几种指纹分析手段对提出的流量分割策略进行了测试。
                
            </description>
            
            <content:encoded><![CDATA[这篇论文主要介绍了使用流量分割(Traffic Splitting)技术来抵抗指纹分析(Website Fingerprinting, WFP)的手段，并使用目前最常用的几种指纹分析手段对提出的流量分割策略进行了测试。]]></content:encoded>
            
        </item>
        
        <item>
            <title>OpenWRT 访问内网地址失败</title>
            <link>https://www.ohyee.cc/post/note_openwrt_local_network_dns</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_openwrt_local_network_dns</guid>
            <pubDate>Fri, 28 Aug 2020 09:43:21 +0000</pubDate>
            <description>
                
                在学校内访问学校网站失败，原因竟是……
                
            </description>
            
            <content:encoded><![CDATA[在学校内访问学校网站失败，原因竟是……]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor 路由选择规范</title>
            <link>https://www.ohyee.cc/post/note_tor_path_spec</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_path_spec</guid>
            <pubDate>Thu, 06 Aug 2020 11:47:46 +0000</pubDate>
            <description>
                
                Tor 路径选择规范
                
            </description>
            
            <content:encoded><![CDATA[Tor 路径选择规范]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor 连接目录服务器逻辑</title>
            <link>https://www.ohyee.cc/post/note_tor_dir_lookup</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_dir_lookup</guid>
            <pubDate>Tue, 04 Aug 2020 19:28:59 +0000</pubDate>
            <description>
                
                Tor 客户端连接至 Tor 网络实际上并不一定需要通过权威目录服务器 DA，而是可以借助备用目录服务器来获取节点信息
                
            </description>
            
            <content:encoded><![CDATA[Tor 客户端连接至 Tor 网络实际上并不一定需要通过权威目录服务器 DA，而是可以借助备用目录服务器来获取节点信息]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor 控制协议 GETINFO 可用参数列表</title>
            <link>https://www.ohyee.cc/post/note_tor_control_spec_getinfo</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_control_spec_getinfo</guid>
            <pubDate>Tue, 04 Aug 2020 13:40:26 +0000</pubDate>
            <description>
                
                Tor 控制协议（如 Python 的 Stem）中，GETINFO 函数可接受参数列表
                
            </description>
            
            <content:encoded><![CDATA[Tor 控制协议（如 Python 的 Stem）中，GETINFO 函数可接受参数列表]]></content:encoded>
            
        </item>
        
        <item>
            <title>将 SVG 放置在 img 中显示及浏览器 base64 编码</title>
            <link>https://www.ohyee.cc/post/note_svg_in_img_and_base64</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_svg_in_img_and_base64</guid>
            <pubDate>Mon, 03 Aug 2020 12:07:12 +0000</pubDate>
            <description>
                
                尽管 svg 本身就是一个页面元素，并且其看起来与图片无异，但是其并不支持右键复制等功能，而浏览器自带的 Base64 编码函数则可以在修改后实现需求。
                
            </description>
            
            <content:encoded><![CDATA[尽管 svg 本身就是一个页面元素，并且其看起来与图片无异，但是其并不支持右键复制等功能，而浏览器自带的 Base64 编码函数则可以在修改后实现需求。]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 Matplotlib 绘图</title>
            <link>https://www.ohyee.cc/post/note_matplotlib</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_matplotlib</guid>
            <pubDate>Fri, 31 Jul 2020 10:03:31 +0000</pubDate>
            <description>
                
                继 GraphViz 和 PlantUML 后，Matplotlib（Python）也被加入到博客中
                
            </description>
            
            <content:encoded><![CDATA[继 GraphViz 和 PlantUML 后，Matplotlib（Python）也被加入到博客中]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 Python Stem 操作 Tor</title>
            <link>https://www.ohyee.cc/post/note_python_tor_stem</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_python_tor_stem</guid>
            <pubDate>Thu, 30 Jul 2020 11:58:15 +0000</pubDate>
            <description>
                
                针对 Tor 程序本身使用 Python 进行控制的笔记
                
            </description>
            
            <content:encoded><![CDATA[针对 Tor 程序本身使用 Python 进行控制的笔记]]></content:encoded>
            
        </item>
        
        <item>
            <title>瀑布流实现思路</title>
            <link>https://www.ohyee.cc/post/note_waterfall</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_waterfall</guid>
            <pubDate>Tue, 28 Jul 2020 13:33:09 +0000</pubDate>
            <description>
                
                使用瀑布流来展示内容（已用于博客首页文章列表），探讨了常见的各种解决方案，并进行修改。
                
            </description>
            
            <content:encoded><![CDATA[使用瀑布流来展示内容（已用于博客首页文章列表），探讨了常见的各种解决方案，并进行修改。]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用CSS过渡动画实现一种有趣的效果</title>
            <link>https://www.ohyee.cc/post/note_css_transition</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_css_transition</guid>
            <pubDate>Mon, 20 Jul 2020 18:00:17 +0000</pubDate>
            <description>
                
                在友链的网站发现一种很好玩的特效，尽管目前没有地方用起来比较合适，但是留作备份。
                
            </description>
            
            <content:encoded><![CDATA[在友链的网站发现一种很好玩的特效，尽管目前没有地方用起来比较合适，但是留作备份。]]></content:encoded>
            
        </item>
        
        <item>
            <title>On the Optimal Path Length for Tor</title>
            <link>https://www.ohyee.cc/post/note_paper_on_the_optimal_path_length_for_tor</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paper_on_the_optimal_path_length_for_tor</guid>
            <pubDate>Fri, 17 Jul 2020 14:50:52 +0000</pubDate>
            <description>
                
                本论文对比了 Tor 在两跳、三跳在性能、安全性上的区别。
                
            </description>
            
            <content:encoded><![CDATA[本论文对比了 Tor 在两跳、三跳在性能、安全性上的区别。]]></content:encoded>
            
        </item>
        
        <item>
            <title>Locating Hidden Servers</title>
            <link>https://www.ohyee.cc/post/note_paper_locating_hidden_servers</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paper_locating_hidden_servers</guid>
            <pubDate>Wed, 15 Jul 2020 14:16:22 +0000</pubDate>
            <description>
                
                该篇论文描述了最初版本的 Tor 隐藏服务的各种攻击手段，并提出了改进的建议
                
            </description>
            
            <content:encoded><![CDATA[该篇论文描述了最初版本的 Tor 隐藏服务的各种攻击手段，并提出了改进的建议]]></content:encoded>
            
        </item>
        
        <item>
            <title>Snort 安装及使用</title>
            <link>https://www.ohyee.cc/post/note_snort</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_snort</guid>
            <pubDate>Wed, 08 Jul 2020 15:00:23 +0000</pubDate>
            <description>
                
                Snort 是一个常用的入侵检测工具，可以通过编写规则实现对可疑内容的检测
                
            </description>
            
            <content:encoded><![CDATA[Snort 是一个常用的入侵检测工具，可以通过编写规则实现对可疑内容的检测]]></content:encoded>
            
        </item>
        
        <item>
            <title>On the CCA (in)Security of MTProto</title>
            <link>https://www.ohyee.cc/post/note_paper_on_the_cca_in_security_of_mtproto</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paper_on_the_cca_in_security_of_mtproto</guid>
            <pubDate>Tue, 07 Jul 2020 09:39:24 +0000</pubDate>
            <description>
                
                本论文针对 MTProto 在 IND-CCA 上理论上存在的两种攻击进行了描述
                
            </description>
            
            <content:encoded><![CDATA[本论文针对 MTProto 在 IND-CCA 上理论上存在的两种攻击进行了描述]]></content:encoded>
            
        </item>
        
        <item>
            <title>A modified secure version of the Telegram protocol</title>
            <link>https://www.ohyee.cc/post/note_paper_a_modified_secure_version_of_the_telegram_protocol</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paper_a_modified_secure_version_of_the_telegram_protocol</guid>
            <pubDate>Mon, 06 Jul 2020 12:05:27 +0000</pubDate>
            <description>
                
                这篇论文对 Telegram 的 MTProto 协议进行了修改，提高了安全性和运行效率
                
            </description>
            
            <content:encoded><![CDATA[这篇论文对 Telegram 的 MTProto 协议进行了修改，提高了安全性和运行效率]]></content:encoded>
            
        </item>
        
        <item>
            <title>西塘游记</title>
            <link>https://www.ohyee.cc/post/travels_xitang</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/travels_xitang</guid>
            <pubDate>Sun, 05 Jul 2020 10:42:38 +0000</pubDate>
            <description>
                
                2020-06-26 ~ 2020-06-27 继乌镇之后则在 26 号来到了西塘
                
            </description>
            
            <content:encoded><![CDATA[2020-06-26 ~ 2020-06-27 继乌镇之后则在 26 号来到了西塘]]></content:encoded>
            
        </item>
        
        <item>
            <title>乌镇东栅游记</title>
            <link>https://www.ohyee.cc/post/travels_wuzhen_dongzha</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/travels_wuzhen_dongzha</guid>
            <pubDate>Sun, 05 Jul 2020 09:30:30 +0000</pubDate>
            <description>
                
                2020-06-26 在游玩西栅后，顺道去了东栅游玩
                
            </description>
            
            <content:encoded><![CDATA[2020-06-26 在游玩西栅后，顺道去了东栅游玩]]></content:encoded>
            
        </item>
        
        <item>
            <title>乌镇西栅游记</title>
            <link>https://www.ohyee.cc/post/travels_wuzhen_xizha</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/travels_wuzhen_xizha</guid>
            <pubDate>Sat, 04 Jul 2020 15:00:36 +0000</pubDate>
            <description>
                
                2020-06-25 恰逢端午节，于是去乌镇游玩，第一天在西栅游玩，第二天则去了东栅。由于非一天游玩，且实际上属于两个不同景区，因此分为两篇撰写。东栅游记见乌镇东栅游记
                
            </description>
            
            <content:encoded><![CDATA[2020-06-25 恰逢端午节，于是去乌镇游玩，第一天在西栅游玩，第二天则去了东栅。由于非一天游玩，且实际上属于两个不同景区，因此分为两篇撰写。东栅游记见乌镇东栅游记]]></content:encoded>
            
        </item>
        
        <item>
            <title>浏览器端 VS Code 部署</title>
            <link>https://www.ohyee.cc/post/note_code_server</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_code_server</guid>
            <pubDate>Tue, 30 Jun 2020 16:29:56 +0000</pubDate>
            <description>
                
                在浏览器中运行服务器中的 VS Code —— code-server
                
            </description>
            
            <content:encoded><![CDATA[在浏览器中运行服务器中的 VS Code —— code-server]]></content:encoded>
            
        </item>
        
        <item>
            <title>网络安全实验总结以及一些想法</title>
            <link>https://www.ohyee.cc/post/writting_cyber_security_teaching_assistant</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_cyber_security_teaching_assistant</guid>
            <pubDate>Wed, 17 Jun 2020 16:15:04 +0000</pubDate>
            <description>
                
                这学期担任了网络安全与网络管理的助教，主要负责实验部分。针对实验的一些总结和想法
                
            </description>
            
            <content:encoded><![CDATA[这学期担任了网络安全与网络管理的助教，主要负责实验部分。针对实验的一些总结和想法]]></content:encoded>
            
        </item>
        
        <item>
            <title>NextJS 获取配置文件</title>
            <link>https://www.ohyee.cc/post/note_nextjs_runtime_config</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_nextjs_runtime_config</guid>
            <pubDate>Wed, 17 Jun 2020 04:39:56 +0000</pubDate>
            <description>
                
                在 NextJS 中配置运行时可获取的变量
                
            </description>
            
            <content:encoded><![CDATA[在 NextJS 中配置运行时可获取的变量]]></content:encoded>
            
        </item>
        
        <item>
            <title>部署 Blotter 博客系统</title>
            <link>https://www.ohyee.cc/post/note_blotter_deploy</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_blotter_deploy</guid>
            <pubDate>Fri, 05 Jun 2020 07:24:11 +0000</pubDate>
            <description>
                
                在 Ubuntu 部署 Blotter 博客系统
                
            </description>
            
            <content:encoded><![CDATA[在 Ubuntu 部署 Blotter 博客系统]]></content:encoded>
            
        </item>
        
        <item>
            <title>Chord: A Scalable Peer-to-peer Lookup Service for Internet Applications</title>
            <link>https://www.ohyee.cc/post/note_paper_chord_a_scalable_peer_to_peer_lookup_service_for_internet_applications</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_paper_chord_a_scalable_peer_to_peer_lookup_service_for_internet_applications</guid>
            <pubDate>Mon, 01 Jun 2020 15:25:00 +0000</pubDate>
            <description>
                
                Chord 是 DHT 的四种原始实现之一，在分布式网络中具有很重要的地位
                
            </description>
            
            <content:encoded><![CDATA[Chord 是 DHT 的四种原始实现之一，在分布式网络中具有很重要的地位]]></content:encoded>
            
        </item>
        
        <item>
            <title>初探 Deno</title>
            <link>https://www.ohyee.cc/post/note_deno_first_use</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_deno_first_use</guid>
            <pubDate>Sat, 23 May 2020 15:16:37 +0000</pubDate>
            <description>
                
                Deno 是一个旨在替代 NodeJS 的编程语言
                
            </description>
            
            <content:encoded><![CDATA[Deno 是一个旨在替代 NodeJS 的编程语言]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 Go WebAssembly 实现密码学前端应用</title>
            <link>https://www.ohyee.cc/post/note_go_wasm_crypto</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_wasm_crypto</guid>
            <pubDate>Thu, 21 May 2020 16:48:06 +0000</pubDate>
            <description>
                
                使用 Go 语言为前端提供模块
                
            </description>
            
            <content:encoded><![CDATA[使用 Go 语言为前端提供模块]]></content:encoded>
            
        </item>
        
        <item>
            <title>密码学家就餐问题</title>
            <link>https://www.ohyee.cc/post/note_dining_cryptographers_problem</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_dining_cryptographers_problem</guid>
            <pubDate>Fri, 15 May 2020 09:14:51 +0000</pubDate>
            <description>
                
                密码学就餐问题是一个关于多端隐私通信的问题
                
            </description>
            
            <content:encoded><![CDATA[密码学就餐问题是一个关于多端隐私通信的问题]]></content:encoded>
            
        </item>
        
        <item>
            <title>配置 Samba 文件共享</title>
            <link>https://www.ohyee.cc/post/note_samba</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_samba</guid>
            <pubDate>Thu, 14 May 2020 15:28:08 +0000</pubDate>
            <description>
                
                在 Windows 和 OpenWRT 配置 Samba
                
            </description>
            
            <content:encoded><![CDATA[在 Windows 和 OpenWRT 配置 Samba]]></content:encoded>
            
        </item>
        
        <item>
            <title>小米路由器 3G 使用 OpenWRT</title>
            <link>https://www.ohyee.cc/post/note_miwifi_openwrt</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_miwifi_openwrt</guid>
            <pubDate>Tue, 12 May 2020 05:39:58 +0000</pubDate>
            <description>
                
                在开发环境中，往往环境很复杂，并且很多资源在国内访问很慢，虽然原则上可以配置代理实现各种功能，但是很多情况下，并非所有的应用都能很好地设置代理。而使用透明代理则可以很好地解决该问题
                
            </description>
            
            <content:encoded><![CDATA[在开发环境中，往往环境很复杂，并且很多资源在国内访问很慢，虽然原则上可以配置代理实现各种功能，但是很多情况下，并非所有的应用都能很好地设置代理。而使用透明代理则可以很好地解决该问题]]></content:encoded>
            
        </item>
        
        <item>
            <title>ArchLinux 更新时覆盖文件</title>
            <link>https://www.ohyee.cc/post/note_archlinux_pacman_overwrite</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_archlinux_pacman_overwrite</guid>
            <pubDate>Thu, 07 May 2020 16:11:33 +0000</pubDate>
            <description>
                
                在更新 Arch Linux 时，可能会提示 ”xxxx exists in filesystem“，覆盖强制更新解决该提示
                
            </description>
            
            <content:encoded><![CDATA[在更新 Arch Linux 时，可能会提示 ”xxxx exists in filesystem“，覆盖强制更新解决该提示]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 archlinux-java 实现多 Java 版本共存</title>
            <link>https://www.ohyee.cc/post/note_archlinux_multi_java_version</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_archlinux_multi_java_version</guid>
            <pubDate>Thu, 07 May 2020 08:57:06 +0000</pubDate>
            <description>
                
                在 Arch Linux 上管理多版本 Java
                
            </description>
            
            <content:encoded><![CDATA[在 Arch Linux 上管理多版本 Java]]></content:encoded>
            
        </item>
        
        <item>
            <title>Riffle: An Efficient Communication System With Strong Anonymity</title>
            <link>https://www.ohyee.cc/post/riffle_an_efficient_communication_system_with_strong_anonymity</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/riffle_an_efficient_communication_system_with_strong_anonymity</guid>
            <pubDate>Tue, 05 May 2020 17:59:31 +0000</pubDate>
            <description>
                
                《Riffle: An Efficient Communication System With Strong Anonymity》论文笔记
                
            </description>
            
            <content:encoded><![CDATA[《Riffle: An Efficient Communication System With Strong Anonymity》论文笔记]]></content:encoded>
            
        </item>
        
        <item>
            <title>华为 EMUI10 换用第三方桌面</title>
            <link>https://www.ohyee.cc/post/note_emui10_thirdpart_launcher</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_emui10_thirdpart_launcher</guid>
            <pubDate>Tue, 05 May 2020 10:55:16 +0000</pubDate>
            <description>
                
                在华为  EMUI10 上换用第三方桌面（微软桌面）
                
            </description>
            
            <content:encoded><![CDATA[在华为  EMUI10 上换用第三方桌面（微软桌面）]]></content:encoded>
            
        </item>
        
        <item>
            <title>Vite 原理浅析</title>
            <link>https://molunerfinn.com/learn-vite/</link>
            
            <author>Molunerfinn</author>
            
            <guid>https://molunerfinn.com/learn-vite/</guid>
            <pubDate>Thu, 17 Sep 2020 15:18:28 +0000</pubDate>
            <description>
                
                已经好久没有写博客了。本文不说 Vue3.0 了，相信已经有很多文章在说它了。而前一段时间尤大开源的 Vite 则是一个更加吸引我的东西，它的总体思路是很不错的，早期源码的学习成本也比较低，于是就趁着假期学习一番。本文撰写于 Vite-0.9.1 版本。什么是 Vite借用作者
                
            </description>
            
            <content:encoded><![CDATA[<p>已经好久没有写博客了。本文不说 Vue3.0 了，相信已经有很多文章在说它了。而前一段时间尤大开源的 <a href="https://github.com/vuejs/vite" target="_blank">Vite</a> 则是一个更加吸引我的东西，它的总体思路是很不错的，早期源码的学习成本也比较低，于是就趁着假期学习一番。</p><p>本文撰写于 Vite-0.9.1 版本。</p><a></a><h2><a href="https://molunerfinn.com/learn-vite/#什么是-Vite"></a>什么是 Vite</h2><p>借用作者的原话：</p><blockquote><p>Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打包。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。</p></blockquote><p>注意到两个点：</p><ul><li>一个是 Vite 主要对应的场景是开发模式，原理是拦截浏览器发出的 ES imports 请求并做相应处理。（生产模式是用 rollup 打包）</li><li>一个是 Vite 在开发模式下不需要打包，只需要编译浏览器发出的 HTTP 请求对应的文件即可，所以热更新速度很快。</li></ul><p>因此，要实现上述目标，需要要求项目里只使用原生 ES imports，如果使用了 require 将失效，所以要用它完全替代掉 Webpack 就目前来说还是不太现实的。上面也说了，生产模式下的打包不是 Vite 自身提供的，因此生产模式下如果你想要用 Webpack 打包也依然是可以的。从这个角度来说，Vite 可能更像是替代了 webpack-dev-server 的一个东西。</p><h3><a href="https://molunerfinn.com/learn-vite/#modules-模块"></a>modules 模块</h3><p>Vite 的实现离不开现代浏览器原生支持的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank">模块功能</a>。如下：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /></pre></td><td><pre><span><span>&lt;<span>script</span> <span>type</span>=<span>"module"</span>&gt;</span></span><br /><span><span><span>import</span> { a } <span>from</span> <span>'./a.js'</span></span></span><br /><span><span>&lt;/<span>script</span>&gt;</span></span><br /></pre></td></tr></table><p>当声明一个 <code>script</code> 标签类型为 <code>module</code> 时，浏览器将对其内部的 <code>import</code> 引用发起 <code>HTTP</code> 请求获取模块内容。比如上述，浏览器将发起一个对 <code>HOST/a.js</code> 的 HTTP 请求，获取到内容之后再执行。</p><p>Vite 劫持了这些请求，并在后端进行相应的处理（比如将 Vue 文件拆分成 <code>template</code>、<code>style</code>、<code>script</code> 三个部分），然后再返回给浏览器。</p><p>由于浏览器只会对用到的模块发起 HTTP 请求，所以 Vite 没必要对项目里所有的文件先打包后返回，而是只编译浏览器发起 HTTP 请求的模块即可。这里是不是有点按需加载的味道？</p><h3><a href="https://molunerfinn.com/learn-vite/#编译和打包的区别"></a>编译和打包的区别</h3><p>看到这里，可能有些朋友不免有些疑问，编译和打包有什么区别？为什么 Vite 号称「热更新的速度不会随着模块增多而变慢」？</p><p>简单举个例子，有三个文件 <code>a.js</code>、<code>b.js</code>、<code>c.js</code></p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /></pre></td><td><pre><span><span>// a.js</span></span><br /><span><span>const</span> a = <span><span>()</span> =&gt;</span> { ... }</span><br /><span><span>export</span> { a }</span><br /><span></span><br /><span><span>// b.js</span></span><br /><span><span>const</span> b = <span><span>()</span> =&gt;</span> { ... }</span><br /><span><span>export</span> { b }</span><br /></pre></td></tr></table><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /></pre></td><td><pre><span><span>// c.js</span></span><br /><span><span>import</span> { a } <span>from</span> <span>'./a'</span></span><br /><span><span>import</span> { b } <span>from</span> <span>'./b'</span></span><br /><span></span><br /><span><span>const</span> c = <span><span>()</span> =&gt;</span> {</span><br /><span>  <span>return</span> a() + b()</span><br /><span>}</span><br /><span></span><br /><span><span>export</span> { c }</span><br /></pre></td></tr></table><p>如果以 c 文件为入口，那么打包就会变成如下（结果进行了简化处理）：（假定打包文件名为 <code>bundle.js</code>)</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /></pre></td><td><pre><span><span>// bundle.js</span></span><br /><span><span>const</span> a = <span><span>()</span> =&gt;</span> { ... }</span><br /><span><span>const</span> b = <span><span>()</span> =&gt;</span> { ... }</span><br /><span><span>const</span> c = <span><span>()</span> =&gt;</span> {</span><br /><span>  <span>return</span> a() + b()</span><br /><span>}</span><br /><span></span><br /><span><span>export</span> { c }</span><br /></pre></td></tr></table><p><strong>值得注意的是，打包也需要有编译的步骤。</strong></p><p>Webpack 的热更新原理简单来说就是，一旦发生某个依赖（比如上面的 <code>a.js</code> ）改变，就将这个依赖所处的 <code>module</code> 的更新，并将新的 <code>module</code> 发送给浏览器重新执行。由于我们只打了一个 <code>bundle.js</code>，所以热更新的话也会重新打这个 <code>bundle.js</code>。试想如果依赖越来越多，就算只修改一个文件，理论上热更新的速度也会越来越慢。</p><p>而如果是像 Vite 这种只编译不打包会是什么情况呢？</p><p>只是编译的话，最终产出的依然是 <code>a.js</code>、<code>b.js</code>、<code>c.js</code> 三个文件，只有编译耗时。由于入口是 <code>c.js</code>，浏览器解析到 <code>import { a } from './a'</code> 时，会发起 HTTP 请求 <code>a.js</code> （b 同理），就算不用打包，也可以加载到所需要的代码，因此省去了合并代码的时间。</p><p>在热更新的时候，如果 <code>a</code> 发生了改变，只需要更新 <code>a</code> 以及用到 <code>a</code> 的 <code>c</code>。由于 <code>b</code> 没有发生改变，所以 Vite 无需重新编译 <code>b</code>，可以从缓存中直接拿编译的结果。这样一来，修改一个文件 <code>a</code>，只会重新编译这个文件 <code>a</code> 以及浏览器当前用到这个文件 <code>a</code> 的文件，而其余文件都无需重新编译。所以理论上热更新的速度不会随着文件增加而变慢。</p><p>当然这样做有没有不好的地方？有，初始化的时候如果浏览器请求的模块过多，也会带来初始化的性能问题。不过如果你能遇到初始化过慢的这个问题，相信热更新的速度会弥补很多。当然我相信以后尤大也会解决这个问题。</p><h2><a href="https://molunerfinn.com/learn-vite/#Vite-运行-Web-应用的实现"></a>Vite 运行 Web 应用的实现</h2><p>上面说了这么多的铺垫，可能还不够直观，我们可以先跑一个 Vite 项目来实际看看。</p><p>按照官网的说明，可以输入如下命令（<code>&lt;project-name&gt;</code> 为自己想要的目录名即可）</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /></pre></td><td><pre><span>$ npx create-vite-app &lt;project-name&gt;</span><br /><span>$ <span>cd</span> &lt;project-name&gt;</span><br /><span>$ npm install</span><br /><span>$ npm run dev</span><br /></pre></td></tr></table><p>如果一切都正常你将在 <code>localhost:3000</code>（Vite 的服务器起的端口） 看到这个界面：</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/blog/20200503152836.png" /></p><p>并得到如下的代码结构：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /></pre></td><td><pre><span>.</span><br /><span>├── App.vue // 页面的主要逻辑</span><br /><span>├── index.html // 默认打开的页面以及 Vue 组件挂载</span><br /><span>├── node_modules</span><br /><span>└── package.json</span><br /></pre></td></tr></table><h3><a href="https://molunerfinn.com/learn-vite/#拦截-HTTP-请求"></a>拦截 HTTP 请求</h3><p>接下来开始说一下 Vite 实现的核心——拦截浏览器对模块的请求并返回处理后的结果。</p><p>我们知道，由于是在 <code>localhost:3000</code> 打开的网页，所以浏览器发起的第一个请求自然是请求 <code>localhost:3000/</code>，这个请求发送到 Vite 后端之后经过静态资源服务器的处理，会进而请求到 <code>/index.html</code>，此时 Vite 就开始对这个请求做拦截和处理了。</p><p>首先，<code>index.html</code> 里的源码是这样的：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /></pre></td><td><pre><span><span>&lt;<span>div</span> <span>id</span>=<span>"app"</span>&gt;</span><span>&lt;/<span>div</span>&gt;</span></span><br /><span><span>&lt;<span>script</span> <span>type</span>=<span>"module"</span>&gt;</span></span><br /><span><span><span>import</span> { createApp } <span>from</span> <span>'vue'</span></span></span><br /><span><span><span>import</span> App <span>from</span> <span>'./App.vue'</span></span></span><br /><span></span><br /><span><span>createApp(App).mount(<span>'#app'</span>)</span></span><br /><span><span>&lt;/<span>script</span>&gt;</span></span><br /></pre></td></tr></table><p>但是在浏览器里它是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/blog/20200503153404.png" /></p><p>注意到什么不同了吗？是的， <code>import { createApp } from 'vue'</code> 换成了 <code>import { createApp } from '/@modules/vue</code>。</p><p>这里就不得不说浏览器对 <code>import</code> 的模块发起请求时的一些局限了，平时我们写代码，如果不是引用相对路径的模块，而是引用 <code>node_modules</code> 的模块，都是直接 <code>import xxx from 'xxx'</code>，由 Webpack 等工具来帮我们找这个模块的具体路径。但是浏览器不知道你项目里有 <code>node_modules</code>，它只能通过相对路径去寻找模块。</p><p>因此 Vite 在拦截的请求里，对直接引用 <code>node_modules</code> 的模块都做了路径的替换，换成了 <code>/@modules/</code> 并返回回去。而后浏览器收到后，会发起对 <code>/@modules/xxx</code> 的请求，然后被 Vite 再次拦截，并由 Vite 内部去访问真正的模块，并将得到的内容再次做同样的处理后，返回给浏览器。</p><h3><a href="https://molunerfinn.com/learn-vite/#imports-替换"></a>imports 替换</h3><h4><a href="https://molunerfinn.com/learn-vite/#普通-JS-import-替换"></a>普通 JS import 替换</h4><p>上面说的这步替换来自 <code>src/node/serverPluginModuleRewrite.ts</code>:</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /></pre></td><td><pre><span><span>// 只取关键代码：</span></span><br /><span><span>// Vite 使用 Koa 作为内置的服务器</span></span><br /><span><span>// 如果请求的路径是 /index.html</span></span><br /><span><span>if</span> (ctx.path === <span>'/index.html'</span>) {</span><br /><span>  <span>// ...</span></span><br /><span>  <span>const</span> html = <span>await</span> readBody(ctx.body)</span><br /><span>  ctx.body = html.replace(</span><br /><span>    /(<span><span>&lt;<span>script\b[^</span>&gt;</span>]*&gt;)([\s\S]*?)<span>&lt;<span>\</span>/<span>script</span>&gt;</span>/gm, // 正则匹配</span></span><br /><span><span>    (_, openTag, script) =&gt; {</span></span><br /><span><span>      // also inject __DEV__ flag</span></span><br /><span><span>      const devFlag = hasInjectedDevFlag ? `` : devInjectionCode</span></span><br /><span><span>      hasInjectedDevFlag = true</span></span><br /><span><span>       // 替换 html 的 import 路径</span></span><br /><span><span>      return `${devFlag}${openTag}${rewriteImports(</span></span><br /><span><span>        script,</span></span><br /><span><span>        '/index.html',</span></span><br /><span><span>        resolver</span></span><br /><span><span>      )}<span>&lt;/<span>script</span>&gt;</span></span><span>`</span></span><br /><span><span>    }</span></span><br /><span><span>  )</span></span><br /><span><span>  // ...</span></span><br /><span><span>}</span></span><br /></pre></td></tr></table><p>如果并没有在 <code>script</code> 标签内部直接写 <code>import</code>，而是用 <code>src</code> 的形式引用的话如下：</p><table><tr><td><pre><span>1</span><br /></pre></td><td><pre><span>&lt;script type=<span>"module"</span> src=<span>"/main.js"</span>&gt;&lt;<span>/script&gt;</span></span><br /></pre></td></tr></table><p>那么就会在浏览器发起对 <code>main.js</code> 请求的时候进行处理：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /></pre></td><td><pre><span><span>// 只取关键代码：</span></span><br /><span><span>if</span> (</span><br /><span>  ctx.response.is(<span>'js'</span>) &amp;&amp;</span><br /><span>  <span>// ...</span></span><br /><span>) {</span><br /><span>  <span>// ...</span></span><br /><span>  <span>const</span> content = <span>await</span> readBody(ctx.body)</span><br /><span>  <span>await</span> initLexer</span><br /><span>  <span>// 重写 js 文件里的 import</span></span><br /><span>  ctx.body = rewriteImports(</span><br /><span>    content,</span><br /><span>    ctx.url.replace(<span>/(&amp;|\?)t=\d+/</span>, <span>''</span>),</span><br /><span>    resolver,</span><br /><span>    ctx.query.t</span><br /><span>  )</span><br /><span>  <span>// 写入缓存，之后可以从缓存中直接读取</span></span><br /><span>  rewriteCache.set(content, ctx.body)</span><br /><span>}</span><br /></pre></td></tr></table><p>替换逻辑 <code>rewriteImports</code> 就不展开了，用的是 <code>es-module-lexer</code> 来进行的语法分析获取 <code>imports</code> 数组，然后再做的替换。</p><h4><a href="https://molunerfinn.com/learn-vite/#vue-文件的替换"></a>*.vue 文件的替换</h4><p>如果 <code>import</code> 的是 <code>.vue</code> 文件，将会做更进一步的替换：</p><p>原本的 <code>App.vue</code> 文件长这样：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /><span>23</span><br /><span>24</span><br /></pre></td><td><pre><span><span>&lt;<span>template</span>&gt;</span></span><br /><span>  <span>&lt;<span>h1</span>&gt;</span>Hello Vite + Vue 3!<span>&lt;/<span>h1</span>&gt;</span></span><br /><span>  <span>&lt;<span>p</span>&gt;</span>Edit ./App.vue to test hot module replacement (HMR).<span>&lt;/<span>p</span>&gt;</span></span><br /><span>  <span>&lt;<span>p</span>&gt;</span></span><br /><span>    <span>&lt;<span>span</span>&gt;</span>Count is: {{ count }}<span>&lt;/<span>span</span>&gt;</span></span><br /><span>    <span>&lt;<span>button</span> @<span>click</span>=<span>"count++"</span>&gt;</span>increment<span>&lt;/<span>button</span>&gt;</span></span><br /><span>  <span>&lt;/<span>p</span>&gt;</span></span><br /><span><span>&lt;/<span>template</span>&gt;</span></span><br /><span></span><br /><span><span>&lt;<span>script</span>&gt;</span></span><br /><span><span><span>export</span> <span>default</span> {</span></span><br /><span><span>  data: <span><span>()</span> =&gt;</span> ({ <span>count</span>: <span>0</span> }),</span></span><br /><span>}</span><br /><span><span>&lt;/<span>script</span>&gt;</span></span><br /><span></span><br /><span><span>&lt;<span>style</span> <span>scoped</span>&gt;</span></span><br /><span>h1 {</span><br /><span><span>  <span>color</span>: <span>#4fc08d</span>;</span></span><br /><span>}</span><br /><span></span><br /><span>h1, p {</span><br /><span>  font-family: Arial, Helvetica, sans-serif;</span><br /><span>}</span><br /><span><span>&lt;/<span>style</span>&gt;</span></span><br /></pre></td></tr></table><p>替换后长这样：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /></pre></td><td><pre><span><span>// localhost:3000/App.vue</span></span><br /><span><span>import</span> { updateStyle } <span>from</span> <span>"/@hmr"</span></span><br /><span></span><br /><span><span>// 抽出 script 逻辑</span></span><br /><span><span>const</span> __script = {</span><br /><span>  data: <span><span>()</span> =&gt;</span> ({ <span>count</span>: <span>0</span> }),</span><br /><span>}</span><br /><span></span><br /><span><span>// 将 style 拆分成 /App.vue?type=style 请求，由浏览器继续发起请求获取样式</span></span><br /><span>updateStyle(<span>"c44b8200-0"</span>, <span>"/App.vue?type=style&amp;index=0&amp;t=1588490870523"</span>)</span><br /><span>__script.__scopeId = <span>"data-v-c44b8200"</span> <span>// 样式的 scopeId</span></span><br /><span></span><br /><span><span>// 将 template 拆分成 /App.vue?type=template 请求，由浏览器继续发起请求获取 render function</span></span><br /><span><span>import</span> { render <span>as</span> __render } <span>from</span> <span>"/App.vue?type=template&amp;t=1588490870523&amp;t=1588490870523"</span></span><br /><span>__script.render = __render <span>// render 方法挂载，用于 createApp 时渲染</span></span><br /><span>__script.__hmrId = <span>"/App.vue"</span> <span>// 记录 HMR 的 id，用于热更新</span></span><br /><span>__script.__file = <span>"/XXX/web/vite-test/App.vue"</span> <span>// 记录文件的原始的路径，后续热更新能用到</span></span><br /><span><span>export</span> <span>default</span> __script</span><br /></pre></td></tr></table><p>这样就把原本一个 <code>.vue</code> 的文件拆成了三个请求（分别对应 <code>script</code>、<code>style</code> 和<code>template</code>） ，浏览器会先收到包含 <code>script</code> 逻辑的 <code>App.vue</code> 的响应，然后解析到 <code>template</code> 和 <code>style</code> 的路径后，会再次发起 HTTP 请求来请求对应的资源，此时 Vite 对其拦截并再次处理后返回相应的内容。</p><p>如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/blog/20200503171228.png" /></p><p>不得不说这个思路是非常巧妙的。</p><p>这一步的拆分来自 <code>src/node/serverPluginVue.ts</code>，核心逻辑是根据 URL 的 query 参数来做不同的处理（简化分析如下）：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /><span>23</span><br /><span>24</span><br /><span>25</span><br /><span>26</span><br /><span>27</span><br /><span>28</span><br /><span>29</span><br /><span>30</span><br /><span>31</span><br /></pre></td><td><pre><span><span>// 如果没有 query 的 type，比如直接请求的 /App.vue</span></span><br /><span><span>if</span> (!query.type) {</span><br /><span>  ctx.type = <span>'js'</span></span><br /><span>  ctx.body = compileSFCMain(descriptor, filePath, publicPath) <span>// 编译 App.vue，编译成上面说的带有 script 内容，以及 template 和 style 链接的形式。</span></span><br /><span>  <span>return</span> etagCacheCheck(ctx) <span>// ETAG 缓存检测相关逻辑</span></span><br /><span>}</span><br /><span></span><br /><span><span>// 如果 query 的 type 是 template，比如 /App.vue?type=template&amp;xxx</span></span><br /><span><span>if</span> (query.type === <span>'template'</span>) {</span><br /><span>  ctx.type = <span>'js'</span></span><br /><span>  ctx.body = compileSFCTemplate( <span>// 编译 template 生成 render function</span></span><br /><span>    <span>// ...</span></span><br /><span>  )</span><br /><span>  <span>return</span> etagCacheCheck(ctx)</span><br /><span>}</span><br /><span></span><br /><span><span>// 如果 query 的 type 是 style，比如 /App.vue?type=style&amp;xxx</span></span><br /><span><span>if</span> (query.type === <span>'style'</span>) {</span><br /><span>  <span>const</span> index = <span>Number</span>(query.index)</span><br /><span>  <span>const</span> styleBlock = descriptor.styles[index]</span><br /><span>  <span>const</span> result = <span>await</span> compileSFCStyle( <span>// 编译 style</span></span><br /><span>    <span>// ...</span></span><br /><span>  )</span><br /><span>  <span>if</span> (query.module != <span>null</span>) { <span>// 如果是 css module</span></span><br /><span>    ctx.type = <span>'js'</span></span><br /><span>    ctx.body = <span>`export default <span>${<span>JSON</span>.stringify(result.modules)}</span>`</span></span><br /><span>  } <span>else</span> { <span>// 正常 css</span></span><br /><span>    ctx.type = <span>'css'</span></span><br /><span>    ctx.body = result.code</span><br /><span>  }</span><br /><span>}</span><br /></pre></td></tr></table><h2><a href="https://molunerfinn.com/learn-vite/#modules-路径解析"></a>@modules/* 路径解析</h2><p>上面只涉及到了替换的逻辑，解析的逻辑来自 <code>src/node/serverPluginModuleResolve.ts</code>。这一步就相对简单了，核心逻辑就是去 <code>node_modules</code> 里找有没有对应的模块，有的话就返回，没有的话就报 404：（省略了很多逻辑，比如对 <code>web_modules</code> 的处理、缓存的处理等）</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /></pre></td><td><pre><span><span>// ...</span></span><br /><span><span>try</span> {</span><br /><span>  <span>const</span> file = resolve(root, id) <span>// id 是模块的名字，比如 axios</span></span><br /><span>  <span>return</span> serve(id, file, <span>'node_modules'</span>) <span>// 从 node_modules 中找到真正的模块内容并返回</span></span><br /><span>} <span>catch</span> (e) {</span><br /><span>  <span>console</span>.error(</span><br /><span>    chalk.red(<span>`[vite] Error while resolving node_modules with id "<span>${id}</span>":`</span>)</span><br /><span>  )</span><br /><span>  <span>console</span>.error(e)</span><br /><span>  ctx.status = <span>404</span> <span>// 如果没找到就 404</span></span><br /><span>}</span><br /></pre></td></tr></table><h2><a href="https://molunerfinn.com/learn-vite/#Vite-热更新的实现"></a>Vite 热更新的实现</h2><p>上面已经说完了 Vite 是如何运行一个 Web 应用的，包括如何拦截请求、替换内容、返回处理后的结果。接下来说一下 Vite 热更新的实现，同样实现的非常巧妙。</p><p>我们知道，如果要实现热更新，那么就需要浏览器和服务器建立某种通信机制，这样浏览器才能收到通知进行热更新。Vite 的是通过 <code>WebSocket</code> 来实现的热更新通信。</p><h3><a href="https://molunerfinn.com/learn-vite/#客户端"></a>客户端</h3><p>客户端的代码在 <code>src/client/client.ts</code>，主要是创建 <code>WebSocket</code> 客户端，监听来自服务端的 HMR 消息推送。</p><p>Vite 的 WS 客户端目前监听这几种消息：</p><ul><li><code>connected</code>: WebSocket 连接成功</li><li><code>vue-reload</code>: Vue 组件重新加载（当你修改了 script 里的内容时）</li><li><code>vue-rerender</code>: Vue 组件重新渲染（当你修改了 template 里的内容时）</li><li><code>style-update</code>: 样式更新</li><li><code>style-remove</code>: 样式移除</li><li><code>js-update</code>: js 文件更新</li><li><code>full-reload</code>: fallback 机制，网页重刷新</li></ul><p>其中针对 Vue 组件本身的一些更新，都可以直接调用 <code>HMRRuntime</code> 提供的方法，非常方便。其余的更新逻辑，基本上都是利用了 <code>timestamp</code> 刷新缓存重新执行的方法来达到更新的目的。</p><p>核心逻辑如下，我感觉非常清晰明了：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /><span>23</span><br /><span>24</span><br /><span>25</span><br /><span>26</span><br /><span>27</span><br /><span>28</span><br /><span>29</span><br /><span>30</span><br /><span>31</span><br /><span>32</span><br /><span>33</span><br /><span>34</span><br /><span>35</span><br /><span>36</span><br /><span>37</span><br /><span>38</span><br /><span>39</span><br /><span>40</span><br /><span>41</span><br /><span>42</span><br /><span>43</span><br /><span>44</span><br /><span>45</span><br /><span>46</span><br /><span>47</span><br /><span>48</span><br /><span>49</span><br /><span>50</span><br /><span>51</span><br /><span>52</span><br /><span>53</span><br /><span>54</span><br /><span>55</span><br /><span>56</span><br /><span>57</span><br /><span>58</span><br /><span>59</span><br /><span>60</span><br /></pre></td><td><pre><span><span>import</span> { HMRRuntime } <span>from</span> <span>'vue'</span> <span>// 来自 Vue3.0 的 HMRRuntime</span></span><br /><span></span><br /><span><span>console</span>.log(<span>'[vite] connecting...'</span>)</span><br /><span></span><br /><span>declare <span>var</span> __VUE_HMR_RUNTIME__: HMRRuntime</span><br /><span></span><br /><span><span>const</span> socket = <span>new</span> WebSocket(<span>`ws://<span>${location.host}</span>`</span>)</span><br /><span></span><br /><span><span>// Listen for messages</span></span><br /><span>socket.addEventListener(<span>'message'</span>, ({ data }) =&gt; {</span><br /><span>  <span>const</span> { type, path, id, index, timestamp, customData } = <span>JSON</span>.parse(data)</span><br /><span>  <span>switch</span> (type) {</span><br /><span>    <span>case</span> <span>'connected'</span>:</span><br /><span>      <span>console</span>.log(<span>`[vite] connected.`</span>)</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'vue-reload'</span>:</span><br /><span>      <span>import</span>(<span>`<span>${path}</span>?t=<span>${timestamp}</span>`</span>).then(<span>(<span>m</span>) =&gt;</span> {</span><br /><span>        __VUE_HMR_RUNTIME__.reload(path, m.default)</span><br /><span>        <span>console</span>.log(<span>`[vite] <span>${path}</span> reloaded.`</span>) <span>// 调用 HMRRUNTIME 的方法更新</span></span><br /><span>      })</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'vue-rerender'</span>:</span><br /><span>      <span>import</span>(<span>`<span>${path}</span>?type=template&amp;t=<span>${timestamp}</span>`</span>).then(<span>(<span>m</span>) =&gt;</span> {</span><br /><span>        __VUE_HMR_RUNTIME__.rerender(path, m.render)</span><br /><span>        <span>console</span>.log(<span>`[vite] <span>${path}</span> template updated.`</span>) <span>// 调用 HMRRUNTIME 的方法更新</span></span><br /><span>      })</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'style-update'</span>:</span><br /><span>      updateStyle(id, <span>`<span>${path}</span>?type=style&amp;index=<span>${index}</span>&amp;t=<span>${timestamp}</span>`</span>) <span>// 重新加载 style 的 URL</span></span><br /><span>      <span>console</span>.log(</span><br /><span>        <span>`[vite] <span>${path}</span> style<span>${index &gt; <span>0</span> ? <span>`#<span>${index}</span>`</span> : <span>``</span>}</span> updated.`</span></span><br /><span>      )</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'style-remove'</span>:</span><br /><span>      <span>const</span> link = <span>document</span>.getElementById(<span>`vite-css-<span>${id}</span>`</span>)</span><br /><span>      <span>if</span> (link) {</span><br /><span>        <span>document</span>.head.removeChild(link) <span>// 删除 style</span></span><br /><span>      }</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'js-update'</span>:</span><br /><span>      <span>const</span> update = jsUpdateMap.get(path)</span><br /><span>      <span>if</span> (update) {</span><br /><span>        update(timestamp) <span>// 用新的时间戳加载并执行 js，达到更新的目的</span></span><br /><span>        <span>console</span>.log(<span>`[vite]: js module reloaded: `</span>, path)</span><br /><span>      } <span>else</span> {</span><br /><span>        <span>console</span>.error(</span><br /><span>          <span>`[vite] got js update notification but no client callback was registered. Something is wrong.`</span></span><br /><span>        )</span><br /><span>      }</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'custom'</span>:</span><br /><span>      <span>const</span> cbs = customUpdateMap.get(id)</span><br /><span>      <span>if</span> (cbs) {</span><br /><span>        cbs.forEach(<span>(<span>cb</span>) =&gt;</span> cb(customData))</span><br /><span>      }</span><br /><span>      <span>break</span></span><br /><span>    <span>case</span> <span>'full-reload'</span>:</span><br /><span>      location.reload()</span><br /><span>  }</span><br /><span>})</span><br /></pre></td></tr></table><h3><a href="https://molunerfinn.com/learn-vite/#服务端"></a>服务端</h3><p>服务端的实现位于 <code>src/node/serverPluginHmr.ts</code>。核心是监听项目文件的变更，然后根据不同文件类型（目前只有 <code>vue</code> 和 <code>js</code>）来做不同的处理：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /></pre></td><td><pre><span>watcher.on(<span>'change'</span>, <span>async</span> (file) =&gt; {</span><br /><span>  <span>const</span> timestamp = <span>Date</span>.now() <span>// 更新时间戳</span></span><br /><span>  <span>if</span> (file.endsWith(<span>'.vue'</span>)) {</span><br /><span>    handleVueReload(file, timestamp)</span><br /><span>  } <span>else</span> <span>if</span> (file.endsWith(<span>'.js'</span>)) {</span><br /><span>    handleJSReload(file, timestamp)</span><br /><span>  }</span><br /><span>})</span><br /></pre></td></tr></table><p>对于 <code>Vue</code> 文件的热更新而言，主要是重新编译 <code>Vue</code> 文件，检测 <code>template</code> 、<code>script</code> 、<code>style</code> 的改动，如果有改动就通过 WS 服务端发起对应的热更新请求。</p><p>简单的源码分析如下：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /><span>22</span><br /><span>23</span><br /><span>24</span><br /><span>25</span><br /><span>26</span><br /><span>27</span><br /><span>28</span><br /><span>29</span><br /><span>30</span><br /><span>31</span><br /><span>32</span><br /><span>33</span><br /><span>34</span><br /><span>35</span><br /><span>36</span><br /><span>37</span><br /><span>38</span><br /><span>39</span><br /><span>40</span><br /><span>41</span><br /><span>42</span><br /><span>43</span><br /><span>44</span><br /><span>45</span><br /><span>46</span><br /><span>47</span><br /><span>48</span><br /><span>49</span><br /><span>50</span><br /><span>51</span><br /><span>52</span><br /><span>53</span><br /><span>54</span><br /><span>55</span><br /><span>56</span><br /><span>57</span><br /><span>58</span><br /><span>59</span><br /><span>60</span><br /><span>61</span><br /><span>62</span><br /><span>63</span><br /><span>64</span><br /><span>65</span><br /><span>66</span><br /><span>67</span><br /><span>68</span><br /><span>69</span><br /><span>70</span><br /><span>71</span><br /><span>72</span><br /><span>73</span><br /><span>74</span><br /><span>75</span><br /><span>76</span><br /><span>77</span><br /><span>78</span><br /><span>79</span><br /><span>80</span><br /></pre></td><td><pre><span><span>async</span> <span><span>function</span> <span>handleVueReload</span>(<span></span></span></span><br /><span><span><span>    file: string,</span></span></span><br /><span><span><span>    timestamp: number = Date.now(</span>),</span></span><br /><span><span>    <span>content</span>?: <span>string</span></span></span><br /><span><span>) </span>{</span><br /><span>  <span>const</span> publicPath = resolver.fileToRequest(file) <span>// 获取文件的路径</span></span><br /><span>  <span>const</span> cacheEntry = vueCache.get(file) <span>// 获取缓存里的内容</span></span><br /><span></span><br /><span>  debugHmr(<span>`busting Vue cache for <span>${file}</span>`</span>)</span><br /><span>  vueCache.del(file) <span>// 发生变动了因此之前的缓存可以删除</span></span><br /><span></span><br /><span>  <span>const</span> descriptor = <span>await</span> parseSFC(root, file, content) <span>// 编译 Vue 文件</span></span><br /><span></span><br /><span>  <span>const</span> prevDescriptor = cacheEntry &amp;&amp; cacheEntry.descriptor <span>// 获取前一次的缓存</span></span><br /><span></span><br /><span>  <span>if</span> (!prevDescriptor) {</span><br /><span>    <span>// 这个文件之前从未被访问过（本次是第一次访问），也就没必要热更新</span></span><br /><span>    <span>return</span></span><br /><span>  }</span><br /><span></span><br /><span>  <span>// 设置两个标志位，用于判断是需要 reload 还是 rerender</span></span><br /><span>  <span>let</span> needReload = <span>false</span></span><br /><span>  <span>let</span> needRerender = <span>false</span></span><br /><span></span><br /><span>  <span>// 如果 script 部分不同则需要 reload</span></span><br /><span>  <span>if</span> (!isEqual(descriptor.script, prevDescriptor.script)) {</span><br /><span>    needReload = <span>true</span></span><br /><span>  }</span><br /><span></span><br /><span>  <span>// 如果 template 部分不同则需要 rerender</span></span><br /><span>  <span>if</span> (!isEqual(descriptor.template, prevDescriptor.template)) {</span><br /><span>    needRerender = <span>true</span></span><br /><span>  }</span><br /><span></span><br /><span>  <span>const</span> styleId = hash_sum(publicPath)</span><br /><span>  <span>// 获取之前的 style 以及下一次（或者说热更新）的 style</span></span><br /><span>  <span>const</span> prevStyles = prevDescriptor.styles || []</span><br /><span>  <span>const</span> nextStyles = descriptor.styles || []</span><br /><span></span><br /><span>  <span>// 如果不需要 reload，则查看是否需要更新 style</span></span><br /><span>  <span>if</span> (!needReload) {</span><br /><span>    nextStyles.forEach(<span>(<span>_, i</span>) =&gt;</span> {</span><br /><span>      <span>if</span> (!prevStyles[i] || !isEqual(prevStyles[i], nextStyles[i])) {</span><br /><span>        send({</span><br /><span>          type: <span>'style-update'</span>,</span><br /><span>          path: publicPath,</span><br /><span>          index: i,</span><br /><span>          id: <span>`<span>${styleId}</span>-<span>${i}</span>`</span>,</span><br /><span>          timestamp</span><br /><span>        })</span><br /><span>      }</span><br /><span>    })</span><br /><span>  }</span><br /><span></span><br /><span>  <span>// 如果 style 标签及内容删掉了，则需要发送 `style-remove` 的通知</span></span><br /><span>  prevStyles.slice(nextStyles.length).forEach(<span>(<span>_, i</span>) =&gt;</span> {</span><br /><span>    send({</span><br /><span>      type: <span>'style-remove'</span>,</span><br /><span>      path: publicPath,</span><br /><span>      id: <span>`<span>${styleId}</span>-<span>${i + nextStyles.length}</span>`</span>,</span><br /><span>      timestamp</span><br /><span>    })</span><br /><span>  })</span><br /><span></span><br /><span>  <span>// 如果需要 reload 发送 `vue-reload` 通知</span></span><br /><span>  <span>if</span> (needReload) {</span><br /><span>    send({</span><br /><span>      type: <span>'vue-reload'</span>,</span><br /><span>      path: publicPath,</span><br /><span>      timestamp</span><br /><span>    })</span><br /><span>  } <span>else</span> <span>if</span> (needRerender) {</span><br /><span>    <span>// 否则发送 `vue-rerender` 通知</span></span><br /><span>    send({</span><br /><span>      type: <span>'vue-rerender'</span>,</span><br /><span>      path: publicPath,</span><br /><span>      timestamp</span><br /><span>    })</span><br /><span>  }</span><br /><span>}</span><br /></pre></td></tr></table><p>对于热更新 <code>js</code> 文件而言，会递归地查找引用这个文件的 <code>importer</code>。比如是某个 <code>Vue</code> 文件所引用了这个 <code>js</code>，就会被查找出来。假如最终发现找不到引用者，则会返回 <code>hasDeadEnd: true</code>。</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /></pre></td><td><pre><span><span>const</span> vueImporters = <span>new</span> <span>Set</span>&lt;string&gt;() <span>// 查找并存放需要热更新的 Vue 文件</span></span><br /><span><span>const</span> jsHotImporters = <span>new</span> <span>Set</span>&lt;string&gt;() <span>// 查找并存放需要热更新的 js 文件</span></span><br /><span><span>const</span> hasDeadEnd = walkImportChain(</span><br /><span>  publicPath,</span><br /><span>  importers,</span><br /><span>  vueImporters,</span><br /><span>  jsHotImporters</span><br /><span>)</span><br /></pre></td></tr></table><p>如果 <code>hasDeadEnd</code> 为 <code>true</code>，则直接发送 <code>full-reload</code>。如果 <code>vueImporters</code> 或 <code>jsHotImporters</code> 里查找到需要热更新的文件，则发起热更新通知：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /><span>13</span><br /><span>14</span><br /><span>15</span><br /><span>16</span><br /><span>17</span><br /><span>18</span><br /><span>19</span><br /><span>20</span><br /><span>21</span><br /></pre></td><td><pre><span><span>if</span> (hasDeadEnd) {</span><br /><span>  send({</span><br /><span>    type: <span>'full-reload'</span>,</span><br /><span>    timestamp</span><br /><span>  })</span><br /><span>} <span>else</span> {</span><br /><span>  vueImporters.forEach(<span>(<span>vueImporter</span>) =&gt;</span> {</span><br /><span>    send({</span><br /><span>      type: <span>'vue-reload'</span>,</span><br /><span>      path: vueImporter,</span><br /><span>      timestamp</span><br /><span>    })</span><br /><span>  })</span><br /><span>  jsHotImporters.forEach(<span>(<span>jsImporter</span>) =&gt;</span> {</span><br /><span>    send({</span><br /><span>      type: <span>'js-update'</span>,</span><br /><span>      path: jsImporter,</span><br /><span>      timestamp</span><br /><span>    })</span><br /><span>  })</span><br /><span>}</span><br /></pre></td></tr></table><h3><a href="https://molunerfinn.com/learn-vite/#客户端逻辑的注入"></a>客户端逻辑的注入</h3><p>写到这里，还有一个问题是，我们在自己的代码里并没有引入 <code>HRM</code> 的 <code>client</code> 代码，Vite 是如何把 <code>client</code> 代码注入的呢？</p><p>回到上面的一张图，Vite 重写 <code>App.vue</code> 文件的内容并返回时：</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/blog/20200503171228.png" /></p><p>注意这张图里的代码区第一句话 <code>import { updateStyle } from '/@hmr'</code>，并且在左侧请求列表中也有一个对 <code>@hmr</code> 文件的请求。这个请求是啥呢？</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/blog/20200503201312.png" /></p><p>可以发现，这个请求就是上面说的客户端逻辑的 <code>client.ts</code> 的内容。</p><p>在 <code>src/node/serverPluginHmr.ts</code> 里，有针对 <code>@hmr</code> 文件的解析处理：</p><table><tr><td><pre><span>1</span><br /><span>2</span><br /><span>3</span><br /><span>4</span><br /><span>5</span><br /><span>6</span><br /><span>7</span><br /><span>8</span><br /><span>9</span><br /><span>10</span><br /><span>11</span><br /><span>12</span><br /></pre></td><td><pre><span><span>export</span> <span>const</span> hmrClientFilePath = path.resolve(__dirname, <span>'./client.js'</span>)</span><br /><span><span>export</span> <span>const</span> hmrClientId = <span>'@hmr'</span></span><br /><span><span>export</span> <span>const</span> hmrClientPublicPath = <span>`/<span>${hmrClientId}</span>`</span></span><br /><span></span><br /><span>app.use(<span>async</span> (ctx, next) =&gt; {</span><br /><span>  <span>if</span> (ctx.path !== hmrClientPublicPath) { <span>// 请求路径如果不是 @hmr 就跳过</span></span><br /><span>    <span>return</span> next()</span><br /><span>  }</span><br /><span>  debugHmr(<span>'serving hmr client'</span>)</span><br /><span>  ctx.type = <span>'js'</span></span><br /><span>  <span>await</span> cachedRead(ctx, hmrClientFilePath) <span>// 返回 client.js 的内容</span></span><br /><span>})</span><br /></pre></td></tr></table><p>至此，热更新的整体流程已经解析完毕。</p><h2><a href="https://molunerfinn.com/learn-vite/#小结"></a>小结</h2><p>这个项目最近在以惊人的速度迭代着，因此没过多久以后再回头看这篇文章，可能代码、实现已经过时。不过 Vite 的整体思路是非常棒的，在早期源码不多的情况下，能学到更贴近作者原始想法的东西，也算是很不错的收获。希望本文能给你学习 Vite 一些参考，有错误也欢迎大家指出。</p>]]></content:encoded>
            
        </item>
        
        <item>
            <title>FreeNet 概述</title>
            <link>https://www.ohyee.cc/post/freenet_overview</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/freenet_overview</guid>
            <pubDate>Thu, 30 Apr 2020 18:43:19 +0000</pubDate>
            <description>
                
                针对 Freenet 的基本概念进行学习
                
            </description>
            
            <content:encoded><![CDATA[针对 Freenet 的基本概念进行学习]]></content:encoded>
            
        </item>
        
        <item>
            <title>React 中监听并存储表单内存问题</title>
            <link>https://www.ohyee.cc/post/note_react_setstate_memory</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_react_setstate_memory</guid>
            <pubDate>Wed, 29 Apr 2020 19:25:52 +0000</pubDate>
            <description>
                
                在 React 中，监听并存储表单，在表单数据很大，且改动频繁时，会导致内存爆炸
                
            </description>
            
            <content:encoded><![CDATA[在 React 中，监听并存储表单，在表单数据很大，且改动频繁时，会导致内存爆炸]]></content:encoded>
            
        </item>
        
        <item>
            <title>LastPass 导致输入框报错</title>
            <link>https://www.ohyee.cc/post/note_lastpass_error</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_lastpass_error</guid>
            <pubDate>Wed, 29 Apr 2020 14:37:59 +0000</pubDate>
            <description>
                
                在前端页面开着控制台时，总是会在输入框输入内容时报错：onloadwff.js:71 Uncaught TypeError: Cannot read property &#39;type&#39; of undefined
                
            </description>
            
            <content:encoded><![CDATA[在前端页面开着控制台时，总是会在输入框输入内容时报错：onloadwff.js:71 Uncaught TypeError: Cannot read property 'type' of undefined]]></content:encoded>
            
        </item>
        
        <item>
            <title>Go WebSocket 服务端</title>
            <link>https://www.ohyee.cc/post/note_go_websocket</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_go_websocket</guid>
            <pubDate>Wed, 29 Apr 2020 14:32:45 +0000</pubDate>
            <description>
                
                在 Go 中使用 WebSocket 与前端通信
                
            </description>
            
            <content:encoded><![CDATA[在 Go 中使用 WebSocket 与前端通信]]></content:encoded>
            
        </item>
        
        <item>
            <title>将 WSL 图形输出到 Windows</title>
            <link>https://www.ohyee.cc/post/note_wsl_gui</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_wsl_gui</guid>
            <pubDate>Mon, 20 Apr 2020 10:06:21 +0000</pubDate>
            <description>
                
                WSL 本身只是 shell，不自带图形界面，而 Windows 从名字上就是已图形界面为主，因此要显示图形，自然要使用“最好的 Linux 发行版”——Windows
                
            </description>
            
            <content:encoded><![CDATA[WSL 本身只是 shell，不自带图形界面，而 Windows 从名字上就是已图形界面为主，因此要显示图形，自然要使用“最好的 Linux 发行版”——Windows]]></content:encoded>
            
        </item>
        
        <item>
            <title>动物森友会时间旅行研究</title>
            <link>https://www.ohyee.cc/post/writting_animal_crossing_time_travel</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_animal_crossing_time_travel</guid>
            <pubDate>Wed, 15 Apr 2020 07:05:50 +0000</pubDate>
            <description>
                
                作为一个主打真实时间的游戏，有必要详细了解一下其时间惩罚
                
            </description>
            
            <content:encoded><![CDATA[作为一个主打真实时间的游戏，有必要详细了解一下其时间惩罚]]></content:encoded>
            
        </item>
        
        <item>
            <title>使用 QQ 互联实现 QQ 登录站点</title>
            <link>https://www.ohyee.cc/post/note_qq_connect</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_qq_connect</guid>
            <pubDate>Wed, 08 Apr 2020 15:54:34 +0000</pubDate>
            <description>
                
                使用 Go 语言调用 QQ 互联API
                
            </description>
            
            <content:encoded><![CDATA[使用 Go 语言调用 QQ 互联API]]></content:encoded>
            
        </item>
        
        <item>
            <title>《集合啦！动物森友会》技巧笔记</title>
            <link>https://www.ohyee.cc/post/writting_animal_crossing</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/writting_animal_crossing</guid>
            <pubDate>Thu, 26 Mar 2020 09:00:33 +0000</pubDate>
            <description>
                
                《集合啦！动物森友会》技巧笔记
                
            </description>
            
            <content:encoded><![CDATA[《集合啦！动物森友会》技巧笔记]]></content:encoded>
            
        </item>
        
        <item>
            <title>Github 代码覆盖度展示</title>
            <link>https://www.ohyee.cc/post/note_github_codecov</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_github_codecov</guid>
            <pubDate>Tue, 17 Mar 2020 10:11:10 +0000</pubDate>
            <description>
                
                在 Github Readme 中显示 codecov.io 的代码覆盖率
                
            </description>
            
            <content:encoded><![CDATA[在 Github Readme 中显示 codecov.io 的代码覆盖率]]></content:encoded>
            
        </item>
        
        <item>
            <title>在 MongoDB 查询 JSON 数据遇到的 bug</title>
            <link>https://www.ohyee.cc/post/note_mongodb_json_data</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_mongodb_json_data</guid>
            <pubDate>Mon, 16 Mar 2020 08:37:22 +0000</pubDate>
            <description>
                
                新版本的博客使用的是 MongoDB 数据库，本意是为了支持更自由的类型（实际上其实没啥意义），但是却又在 JSON 上遇到到了奇怪的 bug
                
            </description>
            
            <content:encoded><![CDATA[新版本的博客使用的是 MongoDB 数据库，本意是为了支持更自由的类型（实际上其实没啥意义），但是却又在 JSON 上遇到到了奇怪的 bug]]></content:encoded>
            
        </item>
        
        <item>
            <title>Tor子系统——时间模块</title>
            <link>https://www.ohyee.cc/post/note_tor_subsystem_time</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_tor_subsystem_time</guid>
            <pubDate>Thu, 12 Mar 2020 15:09:24 +0000</pubDate>
            <description>
                
                针对 Tor 的 time 子系统的源码分析
                
            </description>
            
            <content:encoded><![CDATA[针对 Tor 的 time 子系统的源码分析]]></content:encoded>
            
        </item>
        
        <item>
            <title>”墙上时钟“和”递增时间“</title>
            <link>https://www.ohyee.cc/post/note_wallclock_monotime</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_wallclock_monotime</guid>
            <pubDate>Thu, 12 Mar 2020 13:15:35 +0000</pubDate>
            <description>
                
                系统时钟中除去常见的“墙上时钟”外，还有用于描述时间差的“递增时间”
                
            </description>
            
            <content:encoded><![CDATA[系统时钟中除去常见的“墙上时钟”外，还有用于描述时间差的“递增时间”]]></content:encoded>
            
        </item>
        
        <item>
            <title>DES 算法实现</title>
            <link>https://www.ohyee.cc/post/note_des_encrypto</link>
            
            <author>oyohyee@oyohyee.com</author>
            
            <guid>https://www.ohyee.cc/post/note_des_encrypto</guid>
            <pubDate>Tue, 10 Mar 2020 16:02:18 +0000</pubDate>
            <description>
                
                使用 Go 语言实现 DES加密（当然，重点是实现的思路，具体实现换成别的语言也很容易）
                
            </description>
            
            <content:encoded><![CDATA[使用 Go 语言实现 DES加密（当然，重点是实现的思路，具体实现换成别的语言也很容易）]]></content:encoded>
            
        </item>
        
    </channel>
</rss>